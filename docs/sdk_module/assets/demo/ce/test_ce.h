

/* aes test array begin */
__aligned(64) uint8_t aes_src_13[16] = {
	0x06, 0xa6, 0xe0, 0x91, 0x50, 0xed, 0xff, 0xac, 0xe2, 0x7d, 0xd2, 0x7e, 0x98,
};
__aligned(64) uint8_t aes_key_128[16] = {
	0x6a, 0x51, 0x8a, 0xf3, 0x3e, 0x16, 0xb5, 0xc4, 0x4e, 0x0f, 0x87, 0xc7, 0x55, 0x31, 0xc3, 0x2b,
};
__aligned(64) uint8_t aes_iv[16] = {
	0xa5, 0x79, 0xbc, 0x73, 0xf1, 0xd0, 0x00, 0xb4, 0x64, 0x72, 0xea, 0xd9, 0xca, 0x13, 0x62, 0x3a,
};
__aligned(64) uint8_t aes_128_ecb_13[16] = {
	0xc0, 0xb5, 0x55, 0x8d, 0xd5, 0x0b, 0xb5, 0x13, 0xed, 0xac, 0xfd, 0x46, 0x5d, 0xad, 0x3d, 0x68,
};
__aligned(64) uint8_t aes_src_16[16] = {
	0x43, 0xdd, 0xe8, 0x30, 0x06, 0xf4, 0x1e, 0x25, 0xf9, 0x27, 0x4b, 0x3c, 0x67, 0xe9, 0x3b, 0x06,
};
__aligned(64) uint8_t aes_128_ecb_16[16] = {
	0x7a, 0xff, 0x00, 0xfc, 0x79, 0xa7, 0xad, 0x62, 0xb2, 0xdd, 0x80, 0x4b, 0x28, 0xc7, 0x0d, 0xe8,
};
__aligned(64) uint8_t aes_src_192[192] = {
	0xb3, 0xb7, 0x0a, 0x6f, 0x75, 0xe7, 0xd7, 0x26, 0x57, 0x0c, 0x27, 0x56, 0xa8, 0x97, 0xbe, 0x07,
	0xb1, 0x14, 0x91, 0x6f, 0x41, 0x4e, 0xf2, 0x62, 0x84, 0xb3, 0x14, 0x59, 0x3e, 0x70, 0xf7, 0xc5,
	0x64, 0x15, 0xc8, 0x58, 0xee, 0xef, 0x8d, 0x11, 0x03, 0x65, 0x2d, 0x74, 0x31, 0x49, 0xcc, 0x30,
	0x91, 0x81, 0x39, 0xb6, 0x74, 0x33, 0x54, 0x67, 0x5e, 0x0c, 0xd4, 0x5e, 0xef, 0xf3, 0x56, 0x2f,
	0x94, 0x42, 0xdf, 0x77, 0x68, 0x03, 0xf7, 0x5e, 0xff, 0x96, 0x19, 0x5f, 0x0b, 0xae, 0xa3, 0xbb,
	0x46, 0x65, 0x95, 0x8f, 0x57, 0x8e, 0xa1, 0xb9, 0x8f, 0xa6, 0x9f, 0x2c, 0xc5, 0x68, 0xc7, 0xe6,
	0x97, 0x28, 0x42, 0x20, 0x07, 0x13, 0x17, 0xb0, 0xd5, 0x17, 0xff, 0x5a, 0xb5, 0xaf, 0x74, 0xd9,
	0x90, 0xfb, 0xf5, 0x26, 0xc4, 0xf8, 0xc6, 0x4e, 0xcc, 0xfc, 0xb1, 0x87, 0x10, 0x95, 0x32, 0x48,
	0x1d, 0xf9, 0x8c, 0x5c, 0xc6, 0xdb, 0x13, 0xe2, 0x2a, 0x26, 0x24, 0x07, 0x08, 0x16, 0xef, 0x45,
	0x98, 0xb3, 0x1e, 0xd8, 0x37, 0x35, 0x32, 0x4f, 0x75, 0xc4, 0x11, 0xff, 0x7a, 0x7d, 0x7a, 0x7c,
	0x91, 0x19, 0x54, 0x51, 0x92, 0xf5, 0x98, 0x49, 0x91, 0xaf, 0x55, 0xb7, 0x7b, 0xa3, 0xa5, 0xf9,
	0xd9, 0xe7, 0x2a, 0xb3, 0x8f, 0xfb, 0xd3, 0x20, 0xd5, 0xac, 0xb6, 0x6f, 0x7f, 0x19, 0x7b, 0x80,
};
__aligned(64) uint8_t aes_128_ecb_192[192] = {
	0x96, 0x65, 0xf2, 0xc1, 0x35, 0xc3, 0x01, 0x30, 0xcc, 0xcf, 0x68, 0xb4, 0xb7, 0x2f, 0xe3, 0x26,
	0x3e, 0x49, 0x38, 0xc1, 0xba, 0xf9, 0xed, 0xda, 0x62, 0xd4, 0x82, 0xe1, 0x53, 0x02, 0x5f, 0x81,
	0xb4, 0xe1, 0xbb, 0x7d, 0x2d, 0x14, 0x0b, 0xf8, 0x9e, 0x6a, 0x28, 0x31, 0x5d, 0x7a, 0x84, 0xd5,
	0x6f, 0x50, 0xea, 0x32, 0x0e, 0x6d, 0x63, 0x95, 0x9a, 0xca, 0x17, 0x23, 0xb1, 0x4c, 0xae, 0x62,
	0x01, 0xb0, 0xa2, 0x7e, 0xfd, 0x29, 0x78, 0x56, 0x99, 0x50, 0x99, 0xab, 0x41, 0x4d, 0x05, 0x93,
	0x8e, 0x84, 0x4d, 0xe8, 0x3b, 0x7c, 0x4a, 0xd9, 0x52, 0x0b, 0x01, 0x45, 0xfc, 0x90, 0x0b, 0x85,
	0x6e, 0xc9, 0x72, 0xc6, 0xaa, 0xda, 0xe2, 0x47, 0x72, 0x6d, 0xbc, 0xf5, 0x3e, 0xf9, 0x04, 0x55,
	0x25, 0x0c, 0x30, 0x67, 0x7d, 0x05, 0xb9, 0xda, 0x9a, 0x21, 0x26, 0x6d, 0xa6, 0x0a, 0xa0, 0xe9,
	0xc7, 0x55, 0xa8, 0x5d, 0xa0, 0x81, 0x47, 0x08, 0x49, 0x17, 0x36, 0xda, 0xe3, 0x84, 0x5d, 0x92,
	0x0a, 0x3b, 0x98, 0x22, 0x46, 0xdb, 0x9e, 0x4b, 0x58, 0x17, 0xa2, 0x2a, 0x1a, 0x37, 0x30, 0x72,
	0x35, 0xf7, 0xba, 0x82, 0x30, 0xda, 0x91, 0x77, 0x8d, 0x3c, 0xf3, 0x61, 0x86, 0x04, 0x11, 0x1a,
	0x1e, 0xb1, 0x7d, 0x6e, 0x8b, 0x87, 0x25, 0x60, 0xe3, 0xb0, 0x68, 0x8c, 0xf3, 0x09, 0xb7, 0x36,
};
__aligned(64) uint8_t aes_src_223[224] = {
	0x41, 0x48, 0xf1, 0x45, 0xb4, 0x0c, 0x8f, 0xfe, 0xe2, 0x26, 0x6f, 0x12, 0x42, 0x17, 0x50, 0xe6,
	0x1a, 0x2e, 0x17, 0xba, 0x88, 0xd2, 0x50, 0x3e, 0xbd, 0x91, 0x30, 0x97, 0x53, 0xa9, 0x75, 0xa6,
	0x85, 0x42, 0xff, 0x56, 0x2f, 0x49, 0x0e, 0x2e, 0xfe, 0x5e, 0x6f, 0x53, 0x92, 0xcd, 0x1a, 0xc7,
	0xa4, 0xb2, 0xc3, 0x24, 0xb0, 0xf6, 0xc9, 0x45, 0x8b, 0x85, 0xca, 0x3f, 0x30, 0x8e, 0x05, 0xf9,
	0x65, 0xc7, 0xe7, 0xc4, 0x24, 0x01, 0xaf, 0x27, 0xc6, 0xec, 0xda, 0x26, 0x75, 0xfe, 0x9e, 0x5a,
	0xc6, 0x68, 0xc3, 0x45, 0x88, 0x78, 0xc2, 0xa2, 0x91, 0x98, 0x89, 0x79, 0x7b, 0x99, 0xab, 0x6d,
	0x57, 0x52, 0x57, 0xf5, 0x1b, 0x59, 0x99, 0xa9, 0x3c, 0x7d, 0x8d, 0xd5, 0xfc, 0x47, 0x99, 0x13,
	0x56, 0x09, 0x74, 0x68, 0xbe, 0xce, 0x84, 0xf9, 0x9c, 0x02, 0xb3, 0x7e, 0x3e, 0x4e, 0xb7, 0x69,
	0xff, 0x44, 0x2a, 0xdd, 0xfb, 0x9d, 0xac, 0x77, 0x2e, 0x98, 0x69, 0xa8, 0x9a, 0x40, 0x65, 0xb8,
	0x8a, 0xa3, 0xbc, 0x6c, 0x2a, 0x4e, 0xfa, 0xb9, 0x2a, 0x2c, 0x58, 0x53, 0x14, 0x76, 0xb7, 0x88,
	0xd7, 0x83, 0x0e, 0xae, 0xd9, 0x2c, 0x95, 0xb0, 0x38, 0x28, 0xe6, 0x0b, 0x82, 0xcd, 0x97, 0x53,
	0x8b, 0xfa, 0x22, 0xeb, 0x1b, 0x60, 0xb1, 0x06, 0x8a, 0xfb, 0xe5, 0xe4, 0xa3, 0x91, 0xae, 0xf6,
	0xd7, 0x69, 0x5f, 0xc8, 0x48, 0xe2, 0x9c, 0xf5, 0x98, 0xc3, 0x6a, 0x02, 0x59, 0xdf, 0xa7, 0xfe,
	0x77, 0x39, 0x77, 0x67, 0x32, 0xd2, 0xbf, 0x44, 0xe4, 0xc7, 0xe4, 0xa1, 0x4e, 0xbe, 0x07,
};
__aligned(64) uint8_t aes_128_ecb_223[224] = {
	0xa0, 0x1f, 0x11, 0xe6, 0x4a, 0x92, 0xe8, 0x3b, 0x93, 0xc6, 0xd1, 0xdf, 0x47, 0xf1, 0x2f, 0xfc,
	0x7d, 0xa4, 0xe3, 0xc3, 0xb1, 0x6e, 0x77, 0x89, 0x61, 0xae, 0xb1, 0xea, 0x6c, 0x09, 0xdc, 0xf3,
	0x23, 0x2f, 0xc5, 0x5e, 0x96, 0x60, 0xcc, 0xff, 0x07, 0x9b, 0xa0, 0xa8, 0x6b, 0x48, 0x9f, 0x9e,
	0x0f, 0xa2, 0xfe, 0x34, 0x15, 0x13, 0x1d, 0x9c, 0xb5, 0xe8, 0x59, 0xc6, 0xbc, 0x53, 0x0e, 0x8d,
	0xab, 0x6d, 0xbe, 0x37, 0x7f, 0x63, 0x33, 0x4d, 0x6a, 0x29, 0x96, 0x8d, 0xd3, 0xb9, 0x23, 0xb2,
	0x95, 0xaa, 0xeb, 0x75, 0xee, 0x4a, 0xd7, 0xdd, 0x9a, 0xb2, 0x8c, 0xef, 0xb2, 0x98, 0xce, 0x1e,
	0x3a, 0xfa, 0xe5, 0x0d, 0xb4, 0x8e, 0x6b, 0xe7, 0x6f, 0x41, 0x0c, 0x71, 0xe5, 0xf1, 0x6c, 0x63,
	0x6d, 0x26, 0x7a, 0xc3, 0x7e, 0xcd, 0xc6, 0x03, 0x20, 0x7e, 0x4b, 0xd5, 0x84, 0xf2, 0x7e, 0x38,
	0x0b, 0x7c, 0xfc, 0x7c, 0x03, 0x7f, 0xf3, 0xec, 0x07, 0x9e, 0xe2, 0xe6, 0x31, 0xf0, 0x45, 0xac,
	0x30, 0x9d, 0x56, 0x44, 0xc1, 0x14, 0xed, 0xd7, 0xb6, 0xf5, 0x05, 0xcf, 0x54, 0xb3, 0xda, 0xfa,
	0x99, 0x0f, 0xda, 0xc5, 0x94, 0x2c, 0x0a, 0xcd, 0x51, 0x71, 0x42, 0x68, 0xb3, 0xff, 0xc9, 0xd4,
	0xe5, 0x35, 0x3f, 0xd4, 0x64, 0x1f, 0x52, 0x3c, 0x61, 0x25, 0x91, 0xa3, 0x99, 0xc1, 0x6d, 0x4d,
	0x77, 0x6e, 0xdd, 0x16, 0x93, 0x0b, 0x46, 0xa9, 0x3b, 0x83, 0xf6, 0xc9, 0x6e, 0xb8, 0xbb, 0x23,
	0xa7, 0x71, 0xd1, 0x87, 0x0c, 0x7b, 0x22, 0x6c, 0x60, 0xc7, 0x8b, 0xb5, 0x79, 0x61, 0x3b, 0xf8,
};
__aligned(64) uint8_t aes_src_256[256] = {
	0xee, 0xb3, 0xf4, 0x98, 0x0a, 0x55, 0x3f, 0x60, 0x9d, 0xaa, 0x9e, 0xdc, 0xef, 0xc0, 0xa0, 0x9f,
	0x17, 0x85, 0xe6, 0x54, 0xc0, 0xb7, 0xd0, 0x64, 0x00, 0xf7, 0x81, 0xf2, 0x35, 0x3d, 0x05, 0x8c,
	0x6b, 0xea, 0xd9, 0x2f, 0xbb, 0x18, 0x4d, 0x7c, 0xd7, 0x78, 0xee, 0x62, 0xe2, 0x63, 0xfe, 0xd1,
	0x69, 0xfa, 0x05, 0xfb, 0x4c, 0x36, 0xe1, 0x8b, 0x86, 0x98, 0x61, 0x35, 0x01, 0xdd, 0xe1, 0x3d,
	0x8c, 0xef, 0x94, 0x58, 0xf5, 0xf9, 0xcc, 0x39, 0x0a, 0x6f, 0x53, 0xc7, 0x28, 0x5f, 0x36, 0x75,
	0x6e, 0xb7, 0x98, 0x01, 0xf3, 0x8e, 0x30, 0x0f, 0x14, 0xf5, 0x10, 0xb8, 0x09, 0x86, 0x19, 0x10,
	0x2f, 0xde, 0xec, 0x35, 0x76, 0x3b, 0x08, 0xc7, 0x9d, 0x65, 0x55, 0x93, 0xa0, 0xba, 0x17, 0x29,
	0xf8, 0xa4, 0x1b, 0x1b, 0x73, 0x2b, 0xf3, 0xa2, 0x98, 0x88, 0x52, 0xfc, 0x8d, 0x60, 0x01, 0x9c,
	0xfd, 0xba, 0xc4, 0x36, 0x10, 0x3c, 0x50, 0xa2, 0x52, 0x9d, 0xf0, 0x46, 0x33, 0x5c, 0xeb, 0xb5,
	0x84, 0xe9, 0xe4, 0x8d, 0x2f, 0xfd, 0x7d, 0x02, 0x43, 0x78, 0x2e, 0xb6, 0x43, 0x41, 0x10, 0x8a,
	0x5f, 0x7e, 0x80, 0x5f, 0xb6, 0x33, 0x74, 0x3b, 0x99, 0x35, 0x07, 0x2f, 0x5b, 0x75, 0x62, 0x6d,
	0x72, 0x3f, 0x90, 0x69, 0x4c, 0x4e, 0x22, 0x04, 0x64, 0xe8, 0x53, 0xcb, 0xc0, 0xf0, 0xeb, 0xe5,
	0xf7, 0x3d, 0x8c, 0x17, 0x6a, 0x41, 0x68, 0xd2, 0x0b, 0xc1, 0xe4, 0xa1, 0x3d, 0xca, 0x13, 0x0d,
	0x0f, 0xc6, 0xca, 0x4a, 0xf8, 0xe5, 0xcc, 0x58, 0x7e, 0x76, 0x75, 0xf9, 0xe4, 0xf9, 0x26, 0x71,
	0xa2, 0x75, 0x1a, 0x59, 0xb5, 0x7b, 0xf9, 0x22, 0x75, 0x1f, 0x4c, 0xc4, 0xc8, 0x8d, 0xa2, 0x0b,
	0x53, 0x76, 0xaa, 0xe0, 0xce, 0x3b, 0xd6, 0xdd, 0x32, 0x4b, 0xb1, 0xef, 0x63, 0x61, 0x7d, 0x00,
};
__aligned(64) uint8_t aes_128_ecb_256[256] = {
	0x27, 0x6d, 0x84, 0x26, 0x83, 0x0c, 0xc8, 0x87, 0xe5, 0xe0, 0x46, 0xe5, 0xbd, 0x87, 0x0a, 0x07,
	0xf6, 0x8b, 0x62, 0x76, 0x52, 0xb7, 0x1a, 0xfe, 0x75, 0xaf, 0xc1, 0x81, 0x58, 0xdf, 0xc6, 0xa4,
	0xdb, 0x4f, 0xc1, 0x34, 0x6e, 0x98, 0x63, 0x54, 0x3a, 0x03, 0xc2, 0x4d, 0xda, 0x4e, 0xaf, 0xda,
	0x84, 0x42, 0xd9, 0x4f, 0x0a, 0x03, 0x76, 0xcf, 0xba, 0xa6, 0x7a, 0x28, 0xdc, 0x49, 0x62, 0x36,
	0x07, 0x97, 0xe5, 0x6b, 0x12, 0xf0, 0xbf, 0x62, 0xd7, 0x60, 0x4d, 0x3d, 0x59, 0x5b, 0x60, 0xf4,
	0x84, 0xfd, 0x4f, 0x5e, 0x0d, 0xa7, 0x49, 0xcd, 0xd9, 0xc1, 0xcb, 0xcc, 0x5f, 0xb5, 0x6b, 0x0a,
	0xae, 0x1b, 0x5f, 0x39, 0xa6, 0x6d, 0x5e, 0x34, 0x5e, 0x86, 0xe8, 0xf2, 0xcd, 0xe5, 0x72, 0xd4,
	0x46, 0x0d, 0xec, 0xb9, 0x44, 0xa9, 0xb2, 0xa1, 0x77, 0x2b, 0x0c, 0xf7, 0x10, 0x2b, 0x6e, 0x50,
	0x4d, 0xc9, 0x5a, 0xd0, 0x25, 0x27, 0x90, 0xfa, 0x66, 0xc5, 0x00, 0x15, 0xdb, 0x30, 0x7e, 0xb6,
	0x37, 0xba, 0xb9, 0x75, 0xfa, 0x45, 0xcd, 0xa6, 0x38, 0x81, 0xa0, 0x64, 0x39, 0x92, 0xe5, 0x97,
	0x57, 0x3c, 0xf0, 0x71, 0x77, 0xe3, 0xc0, 0xd0, 0xdd, 0x8a, 0x2a, 0xd1, 0xe7, 0xe0, 0x95, 0x12,
	0xdd, 0xf2, 0x29, 0x7f, 0x8f, 0x72, 0x49, 0x33, 0xd7, 0xd3, 0xab, 0x75, 0x4d, 0xc7, 0xb8, 0xa5,
	0x97, 0xa6, 0x86, 0x04, 0xf4, 0x4c, 0x87, 0x67, 0x84, 0xaf, 0xca, 0x2e, 0x58, 0x59, 0x33, 0x39,
	0x4b, 0x9e, 0x0d, 0xec, 0x73, 0x20, 0xfe, 0x13, 0xe2, 0x9d, 0x99, 0x3a, 0x51, 0x7b, 0x4e, 0xef,
	0x00, 0xb6, 0xf7, 0x36, 0x91, 0xa0, 0xae, 0xc9, 0x1e, 0x1c, 0xba, 0x59, 0x19, 0x93, 0x0e, 0x0a,
	0x7d, 0xcf, 0x13, 0x7c, 0x43, 0xae, 0x06, 0xa6, 0x1c, 0x83, 0x41, 0x6b, 0x12, 0x29, 0xaa, 0x59,
};
__aligned(64) uint8_t aes_key_192[24] = {
	0xa4, 0xfa, 0x51, 0xa4, 0x20, 0xe4, 0xc1, 0x3f, 0xa8, 0xf9, 0x7b, 0x6d, 0xe9, 0x5e, 0xcb, 0xbd,
	0xc5, 0xb4, 0x0d, 0xe0, 0xcd, 0x8c, 0x1c, 0xda,
};
__aligned(64) uint8_t aes_192_ecb_13[16] = {
	0x7f, 0xbf, 0xc3, 0x80, 0x17, 0x67, 0xa2, 0x61, 0xa7, 0xf6, 0x90, 0x43, 0xfe, 0x66, 0x60, 0x6e,
};
__aligned(64) uint8_t aes_192_ecb_16[16] = {
	0x06, 0xef, 0xa1, 0xf6, 0x52, 0x4f, 0xf3, 0xbc, 0xbc, 0x69, 0x0e, 0x26, 0xd4, 0x58, 0x65, 0x5e,
};
__aligned(64) uint8_t aes_192_ecb_192[192] = {
	0x62, 0xfa, 0x57, 0x15, 0xe4, 0xed, 0xf2, 0xd2, 0x18, 0x60, 0x16, 0x17, 0xa1, 0x46, 0x9a, 0xa6,
	0x15, 0x7e, 0x8d, 0xc5, 0x7d, 0x3e, 0x6c, 0x07, 0x97, 0x47, 0x64, 0x96, 0x0b, 0x34, 0xc8, 0x00,
	0x0d, 0x65, 0x9e, 0x61, 0xc3, 0x94, 0xe0, 0xe3, 0x62, 0xb8, 0x1f, 0x90, 0x7c, 0x8f, 0xa3, 0xe3,
	0xb8, 0x9e, 0x55, 0xf7, 0xf9, 0xf3, 0x86, 0x84, 0xae, 0xe6, 0x77, 0xe0, 0x5a, 0x84, 0x60, 0x2b,
	0x52, 0x8c, 0x55, 0xb7, 0x1d, 0xef, 0x95, 0xcd, 0x2e, 0xe5, 0xa6, 0x0a, 0x8a, 0x87, 0x2a, 0x48,
	0x10, 0x77, 0xa6, 0xbf, 0xb7, 0x91, 0x59, 0xbe, 0xe6, 0xb8, 0x3b, 0x9c, 0xb0, 0x3e, 0x07, 0x50,
	0xa2, 0x1c, 0x81, 0xf4, 0x88, 0xcf, 0x28, 0x54, 0xe5, 0xf6, 0xce, 0x29, 0x2a, 0x16, 0xe6, 0xf4,
	0x71, 0x91, 0x3f, 0x1b, 0xd1, 0x01, 0x24, 0x44, 0xad, 0xca, 0xf1, 0xbf, 0xa6, 0x73, 0x70, 0xc6,
	0xfb, 0x1e, 0x32, 0x53, 0xc8, 0x37, 0xc5, 0x66, 0x3b, 0x44, 0x6a, 0x0d, 0xc1, 0x1f, 0xd8, 0x72,
	0x3f, 0x2c, 0x3b, 0xcd, 0xed, 0x91, 0xf1, 0xd7, 0x42, 0x6e, 0xa2, 0x21, 0x1b, 0x4e, 0x59, 0xfb,
	0x70, 0xc6, 0xfc, 0xc3, 0xcd, 0xee, 0x8e, 0x68, 0x3b, 0x25, 0xe2, 0xea, 0x7a, 0x61, 0xfe, 0x16,
	0x0c, 0xa5, 0xc3, 0x28, 0x4a, 0xfe, 0xbc, 0xfe, 0xfd, 0xaa, 0x56, 0x28, 0x90, 0xeb, 0x95, 0xd3,
};
__aligned(64) uint8_t aes_192_ecb_223[224] = {
	0xd3, 0x49, 0xa4, 0x5a, 0xfa, 0xf0, 0x87, 0xa5, 0x58, 0xdc, 0xf9, 0xf2, 0x1b, 0xbd, 0x27, 0xe3,
	0x79, 0xed, 0x0a, 0x06, 0x5a, 0x2a, 0xd1, 0xfb, 0x55, 0x8b, 0xde, 0x79, 0x7a, 0x21, 0x34, 0xab,
	0x55, 0xbe, 0xc5, 0x03, 0xa5, 0xee, 0xf3, 0x10, 0x48, 0x1b, 0x36, 0x49, 0x19, 0x60, 0x28, 0x8f,
	0x91, 0x5d, 0xc3, 0x85, 0x47, 0x81, 0xbc, 0x96, 0x37, 0x56, 0xd6, 0xe0, 0x43, 0x5e, 0x94, 0xe6,
	0xad, 0xee, 0x5f, 0x68, 0xa5, 0x2a, 0xd0, 0x6a, 0x43, 0xdc, 0xaa, 0x9a, 0x21, 0x4d, 0xcb, 0xdb,
	0x6f, 0x53, 0x63, 0xb5, 0xd3, 0x29, 0x09, 0xcd, 0x61, 0x15, 0xc0, 0xff, 0xba, 0x77, 0xfe, 0x5f,
	0x32, 0x0e, 0xcb, 0x48, 0x44, 0x94, 0x6b, 0x25, 0x55, 0xe9, 0x11, 0x0d, 0x52, 0x40, 0x74, 0x36,
	0x34, 0xf0, 0x1a, 0xad, 0x75, 0xda, 0xf5, 0xfb, 0xaa, 0x58, 0x14, 0x0a, 0xa9, 0xe9, 0x82, 0x35,
	0xec, 0x69, 0x8e, 0xe0, 0x9d, 0xf2, 0xf8, 0x8f, 0xca, 0x98, 0x8c, 0x96, 0xcc, 0x72, 0x69, 0x2c,
	0x1e, 0x8b, 0xc1, 0x1a, 0x18, 0xc6, 0x03, 0xba, 0xb0, 0x0b, 0x51, 0x04, 0xdd, 0x8e, 0x99, 0x5c,
	0x9e, 0x2d, 0x0e, 0x9b, 0x6a, 0xfa, 0x74, 0xca, 0xa0, 0x16, 0xf9, 0x5a, 0x01, 0x22, 0x65, 0x33,
	0xc5, 0x04, 0xd8, 0x40, 0xe0, 0x9f, 0x8a, 0xdc, 0xc5, 0xa0, 0x76, 0xf8, 0x11, 0x26, 0xa3, 0x74,
	0x31, 0x91, 0xf8, 0x29, 0x48, 0x07, 0xb9, 0xbb, 0xf6, 0x43, 0xf5, 0x25, 0x61, 0x6b, 0xa6, 0xd2,
	0x09, 0x38, 0x08, 0xdb, 0x48, 0x70, 0x12, 0x34, 0x1e, 0x51, 0xb8, 0xde, 0xbb, 0xec, 0x99, 0x2d,
};
__aligned(64) uint8_t aes_192_ecb_256[256] = {
	0x21, 0x7f, 0xc6, 0x53, 0xa6, 0x73, 0x57, 0xe4, 0x98, 0xad, 0xc8, 0x52, 0x22, 0x51, 0x83, 0xe5,
	0x58, 0x55, 0x6e, 0xd3, 0xff, 0x48, 0x08, 0x79, 0x90, 0x20, 0xba, 0x15, 0x6b, 0xe1, 0xe3, 0x2f,
	0xc1, 0xc5, 0x2b, 0xe0, 0x51, 0x66, 0x65, 0xac, 0xdf, 0x8f, 0xbb, 0xdf, 0xfe, 0xcf, 0x12, 0xb0,
	0x81, 0xe2, 0xd5, 0xac, 0x7b, 0x88, 0xa8, 0xf8, 0x4f, 0x38, 0xc5, 0x8e, 0x24, 0x19, 0xe5, 0xa0,
	0xec, 0x1c, 0xcb, 0x16, 0x87, 0x32, 0x52, 0x3f, 0xe9, 0xb6, 0x1b, 0x22, 0xa2, 0x4c, 0xb1, 0x57,
	0xc0, 0xe9, 0xfd, 0x1c, 0x5e, 0x16, 0x20, 0xd6, 0x67, 0x63, 0x11, 0x15, 0x77, 0x1e, 0x5d, 0x96,
	0xb0, 0x27, 0xba, 0xc2, 0xc7, 0x42, 0xe9, 0x6b, 0xd1, 0x8b, 0x4c, 0x6e, 0xc7, 0x83, 0xae, 0x51,
	0x81, 0x1a, 0x35, 0x1a, 0xd3, 0x0a, 0x52, 0x31, 0xd3, 0x16, 0xd7, 0xbf, 0x81, 0xc8, 0x92, 0x7c,
	0x5a, 0x17, 0xe7, 0x6b, 0xd8, 0xca, 0xd6, 0xd3, 0x88, 0xe3, 0xfe, 0x48, 0x33, 0xc0, 0x75, 0x86,
	0xeb, 0xd5, 0x2b, 0x88, 0xbb, 0x59, 0x75, 0xf8, 0x40, 0x57, 0x48, 0xc1, 0x61, 0xdd, 0x27, 0x1d,
	0x8b, 0xb4, 0x73, 0xb7, 0xe5, 0x6b, 0xf8, 0xba, 0xc1, 0xa8, 0xd3, 0x9a, 0xfa, 0x92, 0x90, 0x56,
	0xff, 0xeb, 0xc3, 0x7e, 0x4d, 0x0e, 0x64, 0x23, 0x59, 0xaa, 0xc9, 0x7c, 0xdb, 0xce, 0x3a, 0xb0,
	0x15, 0x95, 0x66, 0x4d, 0x19, 0x78, 0x80, 0x8f, 0xaf, 0x9a, 0xf3, 0x87, 0xe9, 0xa9, 0x4b, 0x3b,
	0xa3, 0x26, 0xb3, 0x64, 0xb9, 0xc1, 0x57, 0xcf, 0x21, 0xfa, 0x8e, 0x61, 0xcb, 0x36, 0x7a, 0xaf,
	0xd8, 0x23, 0xd6, 0xac, 0xef, 0x4e, 0x0e, 0x5e, 0x5c, 0xbc, 0x88, 0x6d, 0x23, 0x31, 0xd7, 0x19,
	0x9c, 0xd1, 0xb4, 0xab, 0xc5, 0xa9, 0x43, 0xaa, 0xb8, 0x35, 0xda, 0x35, 0x3d, 0x33, 0xaa, 0x55,
};
__aligned(64) uint8_t aes_key_256[32] = {
	0xd4, 0x38, 0x92, 0x67, 0x0c, 0x8d, 0x66, 0x15, 0x75, 0x90, 0x89, 0x70, 0x12, 0x4a, 0x6e, 0x52,
	0x44, 0xfa, 0x1a, 0x87, 0x56, 0x45, 0x37, 0x99, 0x6a, 0xad, 0xc3, 0xf8, 0xce, 0x8c, 0x7d, 0x4f,
};
__aligned(64) uint8_t aes_256_ecb_13[16] = {
	0xed, 0xa6, 0xa6, 0x82, 0x70, 0x3f, 0x3c, 0x22, 0xad, 0x08, 0xc1, 0x03, 0xfd, 0x11, 0xdc, 0xd7,
};
__aligned(64) uint8_t aes_256_ecb_16[16] = {
	0xd2, 0x4d, 0xca, 0x69, 0x6e, 0x63, 0xc0, 0x8f, 0xba, 0xd6, 0x5b, 0x68, 0x39, 0xd4, 0x49, 0x43,
};
__aligned(64) uint8_t aes_256_ecb_192[192] = {
	0xa7, 0x68, 0xb6, 0x7d, 0x91, 0xf0, 0x08, 0x0b, 0xe7, 0xba, 0xf4, 0xc2, 0xd0, 0x36, 0xcd, 0x5f,
	0x0b, 0xe4, 0x7b, 0x22, 0x5d, 0x5b, 0xd7, 0xc2, 0x57, 0x45, 0xc2, 0xa5, 0x56, 0x49, 0x8f, 0xf9,
	0x28, 0xae, 0xc7, 0xea, 0xe2, 0xe8, 0x3c, 0x42, 0xda, 0x06, 0x01, 0x42, 0x41, 0x35, 0x1c, 0x8d,
	0xbd, 0x6b, 0x5f, 0x44, 0xc5, 0x85, 0x0a, 0xfd, 0xa6, 0x8b, 0x8f, 0x9c, 0xe4, 0x68, 0x61, 0x7d,
	0xd9, 0xcf, 0xf4, 0x00, 0xb8, 0xa2, 0xf6, 0xf9, 0x55, 0x4f, 0x3d, 0xfc, 0xe3, 0x47, 0xa3, 0xda,
	0x75, 0x20, 0x82, 0xb1, 0x45, 0x11, 0x2f, 0x49, 0xe1, 0x77, 0x2f, 0x95, 0x43, 0x77, 0x5f, 0xf7,
	0xe5, 0xbb, 0x94, 0x24, 0x9a, 0xf3, 0x4a, 0xc7, 0x25, 0xde, 0x24, 0x29, 0x0d, 0x49, 0x2c, 0x30,
	0xd9, 0xa0, 0xc4, 0xbe, 0xf5, 0xc3, 0x1a, 0x57, 0xaa, 0x4e, 0xae, 0x32, 0x8d, 0xc8, 0xc9, 0xf7,
	0xea, 0xdc, 0x7a, 0xda, 0x52, 0xa5, 0x33, 0x27, 0x52, 0x14, 0xcc, 0x8b, 0x79, 0x7f, 0x40, 0x22,
	0xcf, 0x10, 0x35, 0x4e, 0x10, 0xad, 0x38, 0x57, 0xff, 0x9b, 0x66, 0xd7, 0x4b, 0x74, 0xcd, 0x0d,
	0x0a, 0xe5, 0x9b, 0x91, 0x2e, 0x13, 0xdd, 0xd9, 0x30, 0x35, 0x3e, 0x7c, 0x29, 0x0d, 0xb9, 0x5c,
	0x99, 0xb1, 0x41, 0xe1, 0x38, 0x2d, 0xfa, 0x69, 0xf1, 0xb1, 0x93, 0xb3, 0x8f, 0x44, 0x97, 0x2b,
};
__aligned(64) uint8_t aes_256_ecb_223[224] = {
	0x77, 0x1f, 0xe1, 0xc7, 0xd4, 0x35, 0x61, 0xe6, 0xcf, 0xd6, 0x10, 0x1f, 0xa3, 0x17, 0x34, 0xf5,
	0x98, 0xee, 0xfc, 0x87, 0x95, 0x7a, 0x8f, 0x11, 0xa7, 0xdc, 0x0a, 0x66, 0xe7, 0x06, 0x0a, 0x47,
	0x1e, 0x23, 0x96, 0x54, 0xaf, 0x68, 0x5c, 0xb7, 0x6a, 0x74, 0xe6, 0xe6, 0xa7, 0x3d, 0x8e, 0xf4,
	0xc1, 0x56, 0xf4, 0xc8, 0x12, 0x2e, 0x4e, 0x76, 0xd6, 0xde, 0x71, 0xb5, 0xbc, 0x75, 0xa8, 0x2d,
	0xf6, 0xdf, 0x1d, 0xd1, 0xa0, 0x45, 0x79, 0x4a, 0xae, 0x16, 0xd1, 0x62, 0x18, 0xed, 0xf5, 0x33,
	0x0c, 0x63, 0x61, 0x95, 0x9e, 0x44, 0xfe, 0x36, 0x51, 0xce, 0x3f, 0x4b, 0xfe, 0xc1, 0x54, 0x9f,
	0x92, 0x63, 0xb4, 0x0f, 0x46, 0x2f, 0x12, 0x8a, 0x3d, 0xd4, 0x29, 0xe9, 0x47, 0xc3, 0xde, 0xc4,
	0xc6, 0xf7, 0xee, 0xce, 0xe8, 0x63, 0x45, 0x4b, 0x97, 0x0c, 0xbe, 0xa6, 0x11, 0x88, 0x49, 0x1b,
	0x90, 0x7d, 0x3a, 0xe2, 0xd1, 0x37, 0x85, 0xf4, 0x41, 0x3c, 0x63, 0x14, 0xc8, 0xf8, 0x4c, 0xa1,
	0x48, 0xa2, 0x41, 0xcc, 0x3f, 0x40, 0xfe, 0x01, 0x23, 0x39, 0x05, 0x02, 0x3c, 0x39, 0x2f, 0x27,
	0xdd, 0x42, 0xd7, 0x00, 0x36, 0xae, 0x10, 0x86, 0x03, 0xae, 0xd5, 0xf7, 0xae, 0x7e, 0x3a, 0xd9,
	0xe0, 0xc1, 0x58, 0xc4, 0xcb, 0x20, 0x6f, 0x8b, 0x0f, 0x07, 0xba, 0xbf, 0xd6, 0x0b, 0x31, 0x7a,
	0x9d, 0xea, 0x2a, 0x30, 0xd0, 0x3e, 0x9c, 0x61, 0xad, 0x81, 0xca, 0xf8, 0x88, 0x00, 0xfc, 0xda,
	0x10, 0xa5, 0x63, 0x7d, 0xe0, 0x77, 0xf1, 0xde, 0x49, 0xde, 0xe4, 0x2e, 0x1d, 0xdb, 0x6b, 0x59,
};
__aligned(64) uint8_t aes_256_ecb_256[256] = {
	0x62, 0xe6, 0xa4, 0xc8, 0xd3, 0x95, 0x6c, 0x52, 0xa4, 0x48, 0x59, 0x09, 0x03, 0x68, 0x3a, 0x27,
	0x7d, 0x3e, 0x0b, 0xdd, 0x2a, 0x87, 0xe4, 0x85, 0xbb, 0xe7, 0x0f, 0x1f, 0xc4, 0x3a, 0xaa, 0xe8,
	0x5a, 0x0b, 0x35, 0xcd, 0x97, 0x55, 0x85, 0x6a, 0xf5, 0x9e, 0x68, 0x80, 0x27, 0x4c, 0xfa, 0xa8,
	0x00, 0x15, 0x9d, 0x4b, 0x41, 0x9b, 0x34, 0x86, 0xb9, 0x41, 0xf0, 0xa0, 0x90, 0x62, 0x8b, 0x19,
	0xa3, 0x0f, 0x58, 0xb4, 0x7f, 0x4f, 0x82, 0x02, 0x4f, 0x6d, 0xa2, 0xf7, 0x2f, 0xdd, 0xbe, 0x0d,
	0x5a, 0xfd, 0x64, 0xdb, 0x04, 0x84, 0xcc, 0xbe, 0x8b, 0x78, 0x0e, 0xad, 0xf6, 0xd5, 0xb8, 0x68,
	0x52, 0x7e, 0x3f, 0x90, 0xeb, 0xce, 0xfb, 0x6f, 0x5d, 0x89, 0x02, 0x5c, 0x39, 0x6b, 0xa6, 0x87,
	0x39, 0x72, 0x94, 0xe1, 0x78, 0x36, 0x98, 0x60, 0x88, 0xab, 0x8a, 0x03, 0xc7, 0xd0, 0x48, 0x4b,
	0x9e, 0xff, 0xee, 0x3d, 0x4a, 0x48, 0xad, 0x42, 0xce, 0xfe, 0xb9, 0x91, 0xea, 0x2b, 0xb7, 0xea,
	0x53, 0xf0, 0x38, 0xae, 0x14, 0xbe, 0xa5, 0x08, 0x18, 0x20, 0xea, 0x99, 0xe1, 0x88, 0x2f, 0x4e,
	0xd7, 0x58, 0xcc, 0x86, 0xee, 0x22, 0xfd, 0x9d, 0x0a, 0x88, 0xf1, 0xea, 0x17, 0x54, 0xe6, 0x48,
	0x8e, 0xcc, 0x75, 0xbc, 0x8c, 0x28, 0x96, 0x6e, 0x3f, 0x90, 0x1c, 0xbc, 0x2c, 0x5a, 0xa8, 0xd3,
	0xd7, 0x1a, 0xc9, 0x5b, 0x79, 0x17, 0x11, 0x5f, 0xf7, 0xc3, 0xf3, 0x95, 0xde, 0x50, 0x92, 0xc2,
	0x7b, 0x4e, 0x66, 0xaa, 0xc5, 0x3a, 0x04, 0xc0, 0x33, 0xd8, 0x88, 0xff, 0x4c, 0x0e, 0x2a, 0x5c,
	0x72, 0x60, 0x02, 0x64, 0xfc, 0x4b, 0x08, 0xff, 0x16, 0x45, 0x7e, 0x80, 0x58, 0xe7, 0xd9, 0xee,
	0x41, 0x0a, 0x42, 0x81, 0xc4, 0xe4, 0xb4, 0x62, 0x80, 0x19, 0x85, 0xfc, 0x49, 0x31, 0xec, 0xec,
};
__aligned(64) uint8_t aes_128_cbc_13[16] = {
	0x43, 0x5f, 0x34, 0x72, 0x06, 0xaa, 0x5c, 0x91, 0xaf, 0x3b, 0x9e, 0xb9, 0xc7, 0x18, 0x2d, 0x35,
};
__aligned(64) uint8_t aes_128_cbc_16[16] = {
	0x82, 0x87, 0x59, 0xe4, 0x5c, 0x09, 0xef, 0x4b, 0x90, 0x03, 0x7e, 0x9c, 0xf5, 0x5f, 0x34, 0xd6,
};
__aligned(64) uint8_t aes_128_cbc_192[192] = {
	0xdf, 0x09, 0x8d, 0xd6, 0x93, 0x4a, 0x39, 0x0b, 0x4c, 0xf8, 0x5b, 0x7e, 0x67, 0xc2, 0x97, 0xd0,
	0xd5, 0xa3, 0x50, 0x11, 0x4a, 0x92, 0xe4, 0x31, 0xf6, 0x3b, 0x16, 0x56, 0x12, 0x44, 0x87, 0x3a,
	0x0c, 0x23, 0xa1, 0xd1, 0x3e, 0x4b, 0x36, 0x53, 0x95, 0x48, 0x3d, 0x06, 0x84, 0x9d, 0xf8, 0xf3,
	0xad, 0x42, 0x9e, 0x5b, 0xf6, 0x87, 0x6c, 0x91, 0xe6, 0xbc, 0x20, 0x89, 0x3f, 0x24, 0xe6, 0x83,
	0x13, 0xb1, 0x5a, 0x18, 0xa1, 0x93, 0x9d, 0xa9, 0xcc, 0x7a, 0xcc, 0xb2, 0x24, 0x46, 0xb7, 0x14,
	0xea, 0x43, 0x77, 0x77, 0xc5, 0x77, 0x4f, 0x66, 0xe2, 0xae, 0xfd, 0x67, 0x79, 0x85, 0xbc, 0x24,
	0x78, 0xab, 0x78, 0x28, 0x3c, 0x8a, 0x17, 0xc7, 0x8a, 0xb5, 0xbd, 0x55, 0xf3, 0x23, 0x01, 0x02,
	0x78, 0xa9, 0x02, 0xff, 0x27, 0xed, 0x38, 0x81, 0xf5, 0xf1, 0x03, 0xd2, 0x44, 0x1a, 0x98, 0xce,
	0x10, 0x72, 0x26, 0x7d, 0x60, 0xb8, 0xbe, 0xdc, 0xd3, 0x09, 0x05, 0x8d, 0x4b, 0xa5, 0x46, 0xf2,
	0xb9, 0xa8, 0x93, 0x56, 0xf8, 0xd2, 0xf6, 0x7d, 0xd5, 0x34, 0x5b, 0x2c, 0x97, 0xcc, 0xc3, 0xf3,
	0x8f, 0x80, 0x77, 0x8a, 0x35, 0x2b, 0x1a, 0xc2, 0xf9, 0xd6, 0xec, 0xb0, 0x43, 0xa5, 0xa3, 0xfa,
	0xe0, 0xc3, 0x5b, 0x8a, 0xf8, 0xc6, 0x8e, 0x54, 0xb2, 0x37, 0xb2, 0x23, 0x9d, 0x02, 0x5a, 0xbc,
};
__aligned(64) uint8_t aes_128_cbc_223[224] = {
	0xf5, 0xed, 0xf1, 0x3f, 0x1b, 0x88, 0x83, 0x6a, 0xdd, 0x1c, 0x59, 0x35, 0xe7, 0xe6, 0x2f, 0x77,
	0xb6, 0x8c, 0x9c, 0x41, 0x31, 0x58, 0x87, 0xe8, 0x11, 0x6d, 0xdf, 0x9c, 0x86, 0x9c, 0xd5, 0x6c,
	0x40, 0xf9, 0x0a, 0x21, 0xa1, 0x0b, 0xa8, 0xab, 0xc2, 0x0b, 0xad, 0xe1, 0x4a, 0xfa, 0x0e, 0xcf,
	0xdf, 0xb4, 0xa1, 0xb0, 0x51, 0x24, 0x73, 0xde, 0x1f, 0xf5, 0x91, 0x6f, 0x7e, 0xb4, 0x77, 0x6f,
	0x43, 0x4b, 0xe5, 0x83, 0x5c, 0xda, 0x63, 0xd3, 0x1a, 0xf2, 0xc9, 0x66, 0xdc, 0x28, 0x76, 0x01,
	0xf1, 0xfb, 0x14, 0xba, 0xc9, 0x2f, 0x5d, 0x5f, 0x9f, 0x0c, 0x38, 0x06, 0x13, 0x06, 0x0a, 0xf9,
	0xf6, 0xfd, 0x1a, 0x7a, 0xca, 0x21, 0xd2, 0xf4, 0x56, 0x67, 0x67, 0xc1, 0x3f, 0x60, 0x73, 0x1e,
	0xb0, 0x54, 0xc2, 0x94, 0x21, 0x25, 0x34, 0x70, 0xee, 0xc3, 0x62, 0x6d, 0xb2, 0x4c, 0x83, 0x95,
	0x37, 0xe4, 0x9d, 0x75, 0xa5, 0xf3, 0x06, 0x23, 0xd9, 0x63, 0xdb, 0xec, 0xd7, 0x0a, 0xce, 0xfb,
	0x8b, 0x90, 0x3b, 0xd4, 0x24, 0x80, 0xa0, 0x75, 0xe8, 0x14, 0x14, 0x84, 0xab, 0xd8, 0x7c, 0x6a,
	0xc6, 0xa7, 0xf8, 0x5a, 0xae, 0x6d, 0xf3, 0xeb, 0x0d, 0xa8, 0xcb, 0x2e, 0xbf, 0x0d, 0xdc, 0x5f,
	0x14, 0x10, 0x7c, 0x0b, 0xe8, 0xf6, 0x3d, 0x90, 0xca, 0xd0, 0x9b, 0x34, 0x2f, 0xc0, 0x3d, 0xc3,
	0x75, 0x5c, 0x26, 0xc5, 0xdf, 0xb1, 0x9a, 0xf9, 0xad, 0xae, 0x17, 0x2a, 0xb0, 0x64, 0xbc, 0xa5,
	0x05, 0xee, 0x0a, 0x3a, 0xbb, 0x6f, 0x59, 0xfd, 0x68, 0xae, 0x32, 0x93, 0x4e, 0x6c, 0x83, 0x6a,
};
__aligned(64) uint8_t aes_128_cbc_256[256] = {
	0xbb, 0x19, 0xae, 0x21, 0x33, 0x78, 0xd4, 0x79, 0xd6, 0xdf, 0xa3, 0x0c, 0x3d, 0x83, 0x54, 0x73,
	0x47, 0xda, 0xaa, 0x9a, 0x32, 0x67, 0x8a, 0xd4, 0xac, 0x43, 0xe9, 0x26, 0x62, 0x7a, 0x9f, 0xbd,
	0xf3, 0xe0, 0xb7, 0x34, 0xbe, 0xa9, 0xbf, 0x5b, 0x3e, 0x0b, 0xbe, 0x56, 0xc6, 0x8f, 0x46, 0x7b,
	0x15, 0x38, 0x6a, 0xa2, 0xa6, 0xe3, 0xbb, 0xd3, 0xe2, 0x6c, 0x86, 0x87, 0xea, 0x79, 0x19, 0x12,
	0xe5, 0x27, 0xcb, 0x2e, 0xc7, 0x3a, 0xc5, 0x61, 0x18, 0xd9, 0x6b, 0x8f, 0xa4, 0x8b, 0x35, 0xb2,
	0xa9, 0xe8, 0x50, 0xe2, 0x08, 0x0b, 0xd4, 0xf7, 0x90, 0x04, 0xc0, 0x21, 0x82, 0xc0, 0xe9, 0xc5,
	0xac, 0xcb, 0x29, 0x61, 0x0e, 0xce, 0x0c, 0x88, 0x4f, 0x41, 0x07, 0x53, 0x3a, 0xac, 0x88, 0x6b,
	0xfc, 0x11, 0x86, 0x40, 0x1b, 0xdd, 0x24, 0xf7, 0xbf, 0x6b, 0xd9, 0x78, 0xac, 0x9f, 0x3f, 0x0f,
	0x3e, 0x8f, 0x3b, 0x0a, 0x75, 0x31, 0x3f, 0xfb, 0xd1, 0x78, 0x40, 0x25, 0x38, 0x29, 0xe3, 0x1f,
	0xfc, 0xcc, 0x84, 0x9c, 0x47, 0x1c, 0xe9, 0xe9, 0xdb, 0x3d, 0xb3, 0x7a, 0x76, 0xaf, 0xc7, 0x9d,
	0x12, 0x5f, 0x71, 0x96, 0x24, 0x8c, 0x2a, 0xd1, 0x04, 0x12, 0x20, 0xb6, 0x8b, 0xfe, 0x4d, 0x3b,
	0x5f, 0x1f, 0x18, 0x0f, 0x2d, 0x2d, 0xa4, 0x98, 0x57, 0x5a, 0x52, 0xc8, 0x35, 0x16, 0x38, 0x62,
	0x01, 0x20, 0x97, 0xff, 0x09, 0x4a, 0x6f, 0x9a, 0xd7, 0xe8, 0x6b, 0x7a, 0x8f, 0xd1, 0xef, 0x19,
	0x37, 0x82, 0x77, 0x1f, 0xe5, 0xb8, 0x08, 0x88, 0x2c, 0x75, 0xe3, 0xeb, 0x4e, 0x7e, 0xfc, 0x21,
	0xe6, 0x81, 0xc6, 0x94, 0x97, 0x01, 0x08, 0xba, 0x59, 0xf9, 0xb7, 0x21, 0x00, 0xc4, 0x5e, 0xf0,
	0xde, 0x24, 0x94, 0xd5, 0x88, 0xd3, 0x55, 0x10, 0x1c, 0x31, 0x42, 0x56, 0x44, 0x5b, 0x64, 0x25,
};
__aligned(64) uint8_t aes_192_cbc_13[16] = {
	0x95, 0xf1, 0x53, 0x4a, 0x30, 0xa1, 0xb7, 0x66, 0x2b, 0xcc, 0x11, 0xe2, 0x12, 0x23, 0xc2, 0xf6,
};
__aligned(64) uint8_t aes_192_cbc_16[16] = {
	0x47, 0xdf, 0x87, 0x7c, 0x43, 0x0b, 0x86, 0xcc, 0x01, 0x80, 0x1c, 0x6d, 0x8a, 0xf5, 0x12, 0x28,
};
__aligned(64) uint8_t aes_192_cbc_192[192] = {
	0xc7, 0xcc, 0x0f, 0xa6, 0x93, 0x7c, 0xc2, 0x0a, 0x01, 0x7b, 0xa9, 0x84, 0x20, 0x0c, 0xd5, 0x75,
	0x43, 0xa7, 0x65, 0x42, 0xb1, 0xb7, 0xc8, 0x0d, 0x76, 0x38, 0xeb, 0x00, 0xb7, 0xcc, 0x25, 0xc6,
	0x94, 0x5f, 0x3d, 0x72, 0x56, 0x48, 0xbf, 0xfb, 0x51, 0x42, 0x6f, 0x55, 0xaf, 0xbb, 0x77, 0xac,
	0xfc, 0x18, 0x01, 0x8b, 0xad, 0xb8, 0x8e, 0xcf, 0x4a, 0xff, 0xb5, 0xa5, 0x05, 0x99, 0x72, 0xfb,
	0xb0, 0xf0, 0xb7, 0x77, 0x3c, 0x22, 0x4d, 0x0b, 0x8f, 0xb6, 0x23, 0x43, 0x98, 0x57, 0x41, 0xe5,
	0xab, 0xae, 0x4a, 0x53, 0xea, 0xbd, 0x2f, 0x38, 0x33, 0x9e, 0x2d, 0xd9, 0x13, 0xe1, 0xd9, 0xe7,
	0xf6, 0xcd, 0x85, 0xa4, 0xc5, 0x71, 0xbf, 0xdc, 0xed, 0xe7, 0xd0, 0xbf, 0xf8, 0xf9, 0xdb, 0xd6,
	0xb4, 0xe6, 0xa2, 0x5a, 0x2e, 0x0a, 0xd7, 0x60, 0x54, 0x35, 0xf0, 0xda, 0xaf, 0xe8, 0x3e, 0xea,
	0x4d, 0xb5, 0xfa, 0xb9, 0x3b, 0x6e, 0x5f, 0x54, 0x55, 0xf1, 0x8d, 0x2d, 0xef, 0x66, 0x74, 0x90,
	0x05, 0x81, 0xa3, 0x33, 0x00, 0xdb, 0x47, 0xda, 0xe4, 0xd4, 0x6d, 0x27, 0xa5, 0x2c, 0x7e, 0x20,
	0x75, 0xe4, 0x7b, 0x58, 0x51, 0x45, 0xe4, 0xbe, 0x2e, 0xec, 0x66, 0x4f, 0x8b, 0xb8, 0x2b, 0xd4,
	0x14, 0x11, 0xa2, 0x07, 0xed, 0x59, 0x62, 0x18, 0xed, 0x40, 0xaa, 0x70, 0xa9, 0x02, 0xfa, 0x53,
};
__aligned(64) uint8_t aes_192_cbc_223[224] = {
	0x1f, 0x4c, 0xfb, 0x65, 0x3e, 0x47, 0x09, 0x81, 0x04, 0x41, 0x52, 0x14, 0xcb, 0x58, 0x78, 0xb0,
	0x97, 0x93, 0xf7, 0xaf, 0x58, 0x51, 0xf4, 0xf9, 0xe9, 0xa7, 0x75, 0x86, 0x57, 0x15, 0x4d, 0x8c,
	0x9c, 0xfc, 0xa0, 0x4d, 0x3d, 0x97, 0x14, 0x21, 0xb6, 0x33, 0x22, 0x18, 0x6d, 0x76, 0x73, 0x06,
	0xe7, 0xbe, 0xcd, 0xb5, 0x96, 0x08, 0x42, 0x95, 0x60, 0x71, 0xca, 0x73, 0x99, 0x4b, 0x88, 0xb4,
	0x12, 0xf4, 0x19, 0x4d, 0x56, 0xbf, 0x05, 0xa8, 0x9b, 0xca, 0x8c, 0x20, 0x66, 0x94, 0xe8, 0x15,
	0x86, 0xf9, 0x54, 0x66, 0x3b, 0x45, 0xf7, 0x13, 0xe5, 0x74, 0xdc, 0xc0, 0x3e, 0x04, 0x9c, 0x40,
	0x52, 0x8b, 0xcf, 0x3d, 0xf8, 0xf6, 0x45, 0x9d, 0x24, 0xe8, 0x48, 0x6d, 0xb7, 0x37, 0x5f, 0xf2,
	0xe8, 0x3e, 0xe0, 0xb9, 0xe6, 0x5a, 0xb5, 0x53, 0x57, 0xd4, 0xda, 0x00, 0xd6, 0xbb, 0xb0, 0x07,
	0x63, 0x0a, 0x98, 0xf0, 0xe8, 0x8a, 0xa6, 0xd6, 0xfc, 0xb1, 0xe9, 0x59, 0xba, 0x33, 0x96, 0xcc,
	0xa9, 0x55, 0x75, 0x0f, 0xa2, 0x25, 0xc2, 0x6d, 0x21, 0x82, 0x8c, 0x2b, 0x6b, 0x9e, 0x7d, 0xed,
	0xbc, 0x4a, 0x5e, 0xf9, 0xc5, 0x33, 0x07, 0x1c, 0xb3, 0xad, 0x2f, 0xd5, 0xf1, 0x12, 0x8a, 0x3f,
	0xc6, 0xab, 0x6a, 0xd0, 0x79, 0xd9, 0x3f, 0x5a, 0x9b, 0xd2, 0x7a, 0x00, 0x86, 0x23, 0xbd, 0xd0,
	0xf2, 0xc0, 0xdd, 0x07, 0x91, 0x71, 0xf0, 0xe9, 0x03, 0x11, 0x20, 0xa7, 0xda, 0x60, 0x05, 0x86,
	0xf1, 0x79, 0xa3, 0x5b, 0xa3, 0xd4, 0x21, 0x63, 0x2a, 0xd6, 0x35, 0x08, 0x15, 0xa4, 0x2c, 0x19,
};
__aligned(64) uint8_t aes_192_cbc_256[256] = {
	0xe0, 0x15, 0x35, 0x53, 0xc2, 0x32, 0x2e, 0xa6, 0x62, 0xea, 0x45, 0xdc, 0x03, 0x26, 0x08, 0x81,
	0xdd, 0xf0, 0x5f, 0x7f, 0xb9, 0x04, 0xd2, 0xbb, 0x1e, 0xed, 0xa5, 0x20, 0x08, 0x88, 0x06, 0xb6,
	0xe0, 0x0a, 0x65, 0x4e, 0xd0, 0x78, 0x9a, 0x9c, 0xd6, 0xd2, 0x0e, 0x82, 0xf2, 0x48, 0x5e, 0x3c,
	0x20, 0xa5, 0xb3, 0xf8, 0x46, 0x8e, 0x85, 0x7c, 0x3c, 0x45, 0xc4, 0xf2, 0xde, 0xca, 0x5b, 0x74,
	0x65, 0x79, 0x70, 0xa3, 0x41, 0xd3, 0xc7, 0x49, 0x59, 0xe6, 0x90, 0x70, 0xa8, 0x91, 0xea, 0xc9,
	0x80, 0x3a, 0x8a, 0xcf, 0x7b, 0xc9, 0x23, 0x0b, 0x1e, 0x9f, 0x71, 0xd7, 0x95, 0x45, 0x23, 0x3a,
	0x1c, 0xce, 0x55, 0xf1, 0xba, 0xe3, 0xbc, 0xdb, 0x18, 0x0b, 0x25, 0xda, 0x78, 0x10, 0x7c, 0x1e,
	0x5d, 0xe5, 0xbb, 0xba, 0xad, 0x6a, 0xbe, 0x99, 0x71, 0x6c, 0xd8, 0x94, 0xf7, 0xac, 0xb3, 0xcf,
	0xe6, 0xc9, 0xf8, 0x46, 0x33, 0xd0, 0x24, 0x83, 0x40, 0x43, 0x74, 0xe2, 0x9d, 0x0b, 0xc9, 0x52,
	0x95, 0x71, 0xc8, 0xe4, 0xb6, 0x89, 0x12, 0x8a, 0x82, 0x8d, 0xe3, 0x72, 0xce, 0x53, 0xdf, 0xfd,
	0x21, 0xd5, 0x44, 0x44, 0x64, 0xe3, 0x1a, 0x88, 0x66, 0xd5, 0xa4, 0x2c, 0x6a, 0x13, 0x83, 0x09,
	0x46, 0x88, 0x5c, 0x5c, 0x7f, 0xa5, 0xad, 0xf2, 0x5a, 0x20, 0xbc, 0xe5, 0x6b, 0x24, 0xf6, 0x52,
	0xf7, 0x7b, 0xef, 0xde, 0xec, 0xc5, 0x76, 0x3a, 0xf4, 0xd9, 0xf7, 0xcf, 0x16, 0x01, 0xe5, 0xc3,
	0x92, 0xad, 0x1e, 0xc3, 0xc7, 0x53, 0x82, 0xa4, 0xb9, 0x6e, 0x94, 0xd4, 0x61, 0x9a, 0xab, 0x3f,
	0xba, 0x8c, 0x76, 0x91, 0x5b, 0xdd, 0x15, 0xb4, 0xf6, 0xd9, 0x1b, 0x5a, 0x37, 0xb2, 0xde, 0x62,
	0x78, 0x4d, 0x0c, 0xfa, 0xc0, 0xd0, 0xb2, 0x76, 0x0e, 0xd0, 0xf1, 0x27, 0x6a, 0x2c, 0xf3, 0x90,
};
__aligned(64) uint8_t aes_256_cbc_13[16] = {
	0xda, 0xe1, 0xf5, 0x13, 0x88, 0xb2, 0x4e, 0x3d, 0x3d, 0x56, 0x14, 0xa8, 0x37, 0x37, 0x46, 0x0d,
};
__aligned(64) uint8_t aes_256_cbc_16[16] = {
	0x12, 0x3c, 0xe6, 0xcb, 0xa6, 0x80, 0xaf, 0x6f, 0x61, 0xb9, 0xab, 0x3b, 0x2f, 0x06, 0xdb, 0x1f,
};
__aligned(64) uint8_t aes_256_cbc_192[192] = {
	0x9a, 0x33, 0xf1, 0x5d, 0x0a, 0xd8, 0xb9, 0x42, 0x93, 0xbf, 0xdc, 0x21, 0x8e, 0xc2, 0x1b, 0x86,
	0xd1, 0x37, 0x58, 0xfb, 0x36, 0x54, 0xfe, 0x85, 0x55, 0x9d, 0xc9, 0x4d, 0xd1, 0x33, 0x32, 0xf0,
	0x9d, 0x51, 0x47, 0xf5, 0x1d, 0xa2, 0x40, 0x07, 0xaa, 0xdc, 0x3f, 0xf8, 0x6e, 0x35, 0x9f, 0xe5,
	0xf2, 0xa0, 0xba, 0xdd, 0x5e, 0x50, 0xef, 0xcb, 0x1c, 0xcb, 0xc7, 0xed, 0xb5, 0xb7, 0x59, 0xe0,
	0xb2, 0x8e, 0xf4, 0x2d, 0x1d, 0x2d, 0x81, 0xc3, 0xa7, 0x47, 0x3b, 0x22, 0x85, 0x80, 0x38, 0xb6,
	0x5f, 0xb5, 0x3a, 0x9f, 0x85, 0x52, 0xd3, 0x90, 0xbd, 0x78, 0x6a, 0x82, 0x3b, 0xa0, 0x70, 0x24,
	0xcb, 0xe1, 0x25, 0x16, 0xb5, 0xee, 0x66, 0x4d, 0x62, 0xcb, 0x05, 0x44, 0xe0, 0xbb, 0xea, 0x12,
	0xe0, 0x80, 0x2f, 0xfa, 0x7a, 0xa1, 0x89, 0xba, 0x7c, 0x2d, 0xfc, 0x1b, 0x63, 0x7f, 0x33, 0x16,
	0xc8, 0xd4, 0x41, 0x6f, 0xc5, 0xca, 0x3c, 0xad, 0xdf, 0x0a, 0x45, 0x38, 0xb3, 0xbd, 0x58, 0xa2,
	0xa9, 0x26, 0xea, 0xb0, 0x83, 0x14, 0xed, 0x0b, 0xc4, 0x59, 0x8d, 0x53, 0x88, 0x7d, 0x5b, 0xb5,
	0x54, 0x7d, 0xfa, 0x63, 0xc2, 0x45, 0x2f, 0x70, 0x65, 0x7d, 0x72, 0x9e, 0xdb, 0x9f, 0xf6, 0xd7,
	0x76, 0x01, 0xfc, 0x0f, 0xfe, 0x10, 0xee, 0xbe, 0xca, 0xd8, 0x1f, 0x5a, 0xa7, 0x3f, 0xe2, 0x60,
};
__aligned(64) uint8_t aes_256_cbc_223[224] = {
	0x50, 0xee, 0x70, 0xcb, 0xaf, 0x90, 0x98, 0xe2, 0x99, 0x67, 0xda, 0xe2, 0xb1, 0xa5, 0xa6, 0xe6,
	0x1b, 0x52, 0xf6, 0x75, 0xe2, 0xe9, 0xba, 0x55, 0x79, 0x63, 0xc1, 0x1a, 0xb1, 0xef, 0x8c, 0xf7,
	0xbc, 0xe3, 0x4c, 0x13, 0xa2, 0x83, 0x45, 0x1e, 0x62, 0xff, 0xc7, 0x0d, 0xd6, 0x6e, 0x7b, 0xb5,
	0xd8, 0x26, 0xb4, 0x11, 0xd3, 0x39, 0xd1, 0xfa, 0x19, 0x42, 0x93, 0x95, 0x7f, 0x7b, 0xf4, 0x89,
	0xda, 0xc7, 0x71, 0xf5, 0x9c, 0x90, 0x1f, 0x02, 0xa8, 0x73, 0x1b, 0xcd, 0x4c, 0x44, 0x25, 0xf6,
	0x98, 0x34, 0xe1, 0xa1, 0x8f, 0x68, 0x15, 0xc8, 0x62, 0xf3, 0xe9, 0xe9, 0x1e, 0x68, 0x44, 0xb3,
	0x5d, 0xe6, 0x9c, 0x71, 0x1b, 0xad, 0xb5, 0xbe, 0x55, 0xce, 0x5b, 0x06, 0x93, 0xa4, 0x1f, 0xe4,
	0x4e, 0x4d, 0xd4, 0x9f, 0x8d, 0xde, 0xc2, 0xec, 0x5f, 0x69, 0xa2, 0xd2, 0x6a, 0x15, 0x27, 0xa8,
	0x32, 0xec, 0x0e, 0x8e, 0x2e, 0x65, 0xae, 0x65, 0x0b, 0x95, 0xf3, 0xe7, 0x98, 0xb3, 0x5f, 0xfd,
	0x7e, 0x1f, 0x69, 0x27, 0x99, 0x92, 0xc7, 0x02, 0x0c, 0x44, 0x1d, 0x8c, 0x63, 0x48, 0x4d, 0x6b,
	0x3c, 0xa3, 0x79, 0xc6, 0xa9, 0xfa, 0x01, 0x7d, 0x2e, 0x1f, 0x6e, 0x97, 0xc9, 0x0c, 0xe9, 0x8c,
	0x6b, 0x16, 0x52, 0x7a, 0x5f, 0xfd, 0xd9, 0x84, 0x5b, 0xfb, 0xc2, 0x5c, 0xf4, 0xb5, 0xdf, 0x35,
	0xf2, 0xb6, 0x54, 0x67, 0x2d, 0x74, 0x8d, 0x36, 0x04, 0xa0, 0xca, 0xe1, 0x63, 0x0c, 0xf3, 0x77,
	0xff, 0x3d, 0x85, 0x21, 0x5b, 0x8b, 0xdd, 0x19, 0xf9, 0xc9, 0xe0, 0x89, 0x46, 0x47, 0xf8, 0xc9,
};
__aligned(64) uint8_t aes_256_cbc_256[256] = {
	0x8b, 0xc9, 0x0a, 0x8a, 0xf1, 0x2b, 0xba, 0x6e, 0x4d, 0x6c, 0x98, 0xec, 0xbb, 0xa0, 0x33, 0x20,
	0x0c, 0x36, 0x5a, 0x6c, 0xc5, 0x2a, 0x27, 0x61, 0x38, 0xc2, 0x84, 0xc3, 0xe4, 0x9c, 0x12, 0x03,
	0x58, 0xba, 0x77, 0x81, 0x7c, 0x98, 0x4e, 0x04, 0x0b, 0xb5, 0xc0, 0xb5, 0xff, 0x41, 0x13, 0x56,
	0x11, 0xdb, 0xde, 0x57, 0xec, 0xef, 0x49, 0x01, 0x60, 0x37, 0xd2, 0xee, 0xd5, 0xfc, 0x36, 0x2e,
	0xa4, 0x0e, 0x61, 0x9c, 0xa5, 0xa6, 0xdd, 0x5c, 0xe2, 0x0d, 0x0e, 0x6e, 0x56, 0x2b, 0xa1, 0xf9,
	0xe0, 0xc5, 0x40, 0x0a, 0xef, 0xc6, 0xcb, 0x57, 0x21, 0x79, 0x9a, 0xb9, 0x2c, 0x6f, 0x42, 0x43,
	0xbc, 0x21, 0xb0, 0x46, 0xca, 0xb1, 0x2c, 0x49, 0xc4, 0xda, 0x41, 0x7d, 0xae, 0x2d, 0x92, 0x9b,
	0x7e, 0x24, 0x26, 0x3d, 0x3b, 0x10, 0x19, 0x54, 0x17, 0x0b, 0x59, 0x4c, 0x36, 0xd6, 0x5e, 0xa3,
	0xd8, 0xc2, 0xbc, 0xfa, 0xeb, 0x35, 0x9b, 0xf4, 0x91, 0xeb, 0x43, 0x68, 0xb6, 0xe9, 0x38, 0x04,
	0xaa, 0x9e, 0xc4, 0x1d, 0x5a, 0x6c, 0x5c, 0xca, 0xb6, 0x79, 0x8a, 0x70, 0x48, 0xb9, 0xe9, 0x0b,
	0xd7, 0x5f, 0xff, 0x2a, 0xe5, 0xb4, 0xc2, 0xcc, 0x10, 0x61, 0xcd, 0xf2, 0xbf, 0xba, 0x44, 0x31,
	0x97, 0xc3, 0x8c, 0x88, 0x0f, 0xf1, 0x27, 0xe5, 0xa2, 0xa5, 0x3e, 0x48, 0x0b, 0x39, 0x6f, 0x1a,
	0x61, 0xe6, 0xee, 0xd0, 0xcf, 0x53, 0x5a, 0xda, 0xc8, 0xdf, 0xb4, 0xd4, 0x03, 0xb7, 0x1b, 0x19,
	0xac, 0x62, 0x7c, 0x9f, 0xa9, 0xd3, 0xe6, 0xb1, 0x68, 0x15, 0x55, 0xdd, 0xb6, 0x2e, 0xca, 0x95,
	0xf8, 0x1a, 0x8a, 0xcb, 0x0b, 0x39, 0x25, 0xe8, 0xc0, 0x4b, 0xed, 0x6e, 0xdc, 0xfd, 0x8c, 0x62,
	0x8f, 0x36, 0xef, 0x5b, 0xc2, 0x85, 0xa8, 0x04, 0x02, 0x2f, 0x6f, 0xbf, 0x2f, 0x4d, 0xf0, 0x8f,
};
__aligned(64) uint8_t aes_128_ctr_13[16] = {
	0x14, 0x92, 0x63, 0x4e, 0x94, 0x95, 0x94, 0xf5, 0x36, 0xa7, 0x48, 0x9a, 0xf7,
};
__aligned(64) uint8_t aes_128_ctr_16[16] = {
	0x51, 0xe9, 0x6b, 0xef, 0xc2, 0x8c, 0x75, 0x7c, 0x2d, 0xfd, 0xd1, 0xd8, 0x08, 0x06, 0x39, 0x59,
};
__aligned(64) uint8_t aes_128_ctr_192[192] = {
	0xa1, 0x83, 0x89, 0xb0, 0xb1, 0x9f, 0xbc, 0x7f, 0x83, 0xd6, 0xbd, 0xb2, 0xc7, 0x78, 0xbc, 0x58,
	0xe9, 0x79, 0x20, 0x46, 0xeb, 0x9f, 0x5c, 0x63, 0x89, 0x7c, 0x10, 0x2c, 0x3a, 0xb5, 0xb3, 0x79,
	0x5a, 0x53, 0x42, 0x39, 0x76, 0x17, 0x98, 0x59, 0x65, 0x34, 0xc3, 0x08, 0x6e, 0xba, 0x91, 0x74,
	0xa4, 0xcc, 0x70, 0x9d, 0xa7, 0x08, 0xdc, 0x77, 0x74, 0x99, 0x32, 0x09, 0xfb, 0xaf, 0x12, 0x6b,
	0x0d, 0x41, 0xd3, 0x6d, 0xe2, 0x16, 0x10, 0xe5, 0x6d, 0x31, 0xf0, 0x3b, 0x3e, 0xce, 0x1b, 0x9d,
	0x98, 0x19, 0xbe, 0x5d, 0x63, 0x1f, 0xdb, 0x7d, 0x70, 0xf0, 0xf5, 0x6c, 0x43, 0x4d, 0x71, 0x62,
	0x0b, 0x72, 0x61, 0x91, 0x4b, 0xda, 0x1a, 0x33, 0x7f, 0x84, 0x56, 0x4c, 0x92, 0x53, 0xbb, 0xcd,
	0xbb, 0xe4, 0x8f, 0xd1, 0xa5, 0xbc, 0x29, 0x1c, 0xd0, 0x1e, 0x28, 0x8e, 0xf3, 0x51, 0xd7, 0xe1,
	0x51, 0x61, 0x5e, 0x67, 0x24, 0x65, 0x8c, 0x18, 0x89, 0x2f, 0x43, 0x01, 0xb9, 0x60, 0x84, 0x12,
	0x89, 0x64, 0xa6, 0x18, 0xac, 0x08, 0x64, 0x4d, 0x06, 0x0f, 0x10, 0x93, 0xc3, 0x2f, 0x16, 0xe2,
	0x4e, 0xcd, 0x72, 0x24, 0x3c, 0xe3, 0x42, 0x9e, 0xcb, 0xbd, 0xda, 0xcc, 0xcd, 0x46, 0x50, 0xc2,
	0xcf, 0x41, 0x27, 0x9d, 0xf9, 0x14, 0x92, 0x88, 0x91, 0x10, 0xf2, 0x7f, 0x52, 0x8e, 0xe2, 0x1c,
};
__aligned(64) uint8_t aes_128_ctr_223[224] = {
	0x53, 0x7c, 0x72, 0x9a, 0x70, 0x74, 0xe4, 0xa7, 0x36, 0xfc, 0xf5, 0xf6, 0x2d, 0xf8, 0x52, 0xb9,
	0x42, 0x43, 0xa6, 0x93, 0x22, 0x03, 0xfe, 0x3f, 0xb0, 0x5e, 0x34, 0xe2, 0x57, 0x6c, 0x31, 0x1a,
	0xbb, 0x04, 0x75, 0x37, 0xb7, 0xb1, 0x1b, 0x66, 0x98, 0x0f, 0x81, 0x2f, 0xcd, 0x3e, 0x47, 0x83,
	0x91, 0xff, 0x8a, 0x0f, 0x63, 0xcd, 0x41, 0x55, 0xa1, 0x10, 0x2c, 0x68, 0x24, 0xd2, 0x41, 0xbd,
	0xfc, 0xc4, 0xeb, 0xde, 0xae, 0x14, 0x48, 0x9c, 0x54, 0x4b, 0x33, 0x42, 0x40, 0x9e, 0x26, 0x7c,
	0x18, 0x14, 0xe8, 0x97, 0xbc, 0xe9, 0xb8, 0x66, 0x6e, 0xce, 0xe3, 0x39, 0xfd, 0xbc, 0x1d, 0xe9,
	0xcb, 0x08, 0x74, 0x44, 0x57, 0x90, 0x94, 0x2a, 0x96, 0xee, 0x24, 0xc3, 0xdb, 0xbb, 0x56, 0x07,
	0x7d, 0x16, 0x0e, 0x9f, 0xdf, 0x8a, 0x6b, 0xab, 0x80, 0xe0, 0x2a, 0x77, 0xdd, 0x8a, 0x52, 0xc0,
	0xb3, 0xdc, 0xf8, 0xe6, 0x19, 0x23, 0x33, 0x8d, 0x8d, 0x91, 0x0e, 0xae, 0x2b, 0x36, 0x0e, 0xef,
	0x9b, 0x74, 0x04, 0xac, 0xb1, 0x73, 0xac, 0xbb, 0x59, 0xe7, 0x59, 0x3f, 0xad, 0x24, 0xdb, 0x16,
	0x08, 0x57, 0x28, 0xdb, 0x77, 0x3a, 0x4f, 0x67, 0x62, 0x3a, 0x69, 0x70, 0x34, 0x28, 0x62, 0x68,
	0x9d, 0x5c, 0x2f, 0xc5, 0x6d, 0x8f, 0xf0, 0xae, 0xce, 0x47, 0xa1, 0xf4, 0x8e, 0x06, 0x37, 0x6a,
	0x35, 0x6d, 0x6f, 0x05, 0x3d, 0x1a, 0xa9, 0x26, 0x9b, 0xb8, 0x7d, 0x07, 0xf6, 0x2f, 0xa0, 0x84,
	0x10, 0x1b, 0x8c, 0xbf, 0xf8, 0xac, 0x65, 0x94, 0xb9, 0xa5, 0x17, 0xe4, 0xf2, 0x01, 0x98,
};
__aligned(64) uint8_t aes_128_ctr_256[256] = {
	0xfc, 0x87, 0x77, 0x47, 0xce, 0x2d, 0x54, 0x39, 0x49, 0x70, 0x04, 0x38, 0x80, 0x2f, 0xa2, 0xc0,
	0x4f, 0xe8, 0x57, 0x7d, 0x6a, 0x66, 0x7e, 0x65, 0x0d, 0x38, 0x85, 0x87, 0x31, 0xf8, 0x41, 0x30,
	0x55, 0xac, 0x53, 0x4e, 0x23, 0xe0, 0x58, 0x34, 0xb1, 0x29, 0x00, 0x1e, 0xbd, 0x90, 0xa3, 0x95,
	0x5c, 0xb7, 0x4c, 0xd0, 0x9f, 0x0d, 0x69, 0x9b, 0xac, 0x0d, 0x87, 0x62, 0x15, 0x81, 0xa5, 0x79,
	0x15, 0xec, 0x98, 0x42, 0x7f, 0xec, 0x2b, 0x82, 0x98, 0xc8, 0xba, 0xa3, 0x1d, 0x3f, 0x8e, 0x53,
	0xb0, 0xcb, 0xb3, 0xd3, 0xc7, 0x1f, 0x4a, 0xcb, 0xeb, 0xa3, 0x7a, 0xf8, 0x8f, 0xa3, 0xaf, 0x94,
	0xb3, 0x84, 0xcf, 0x84, 0x3a, 0xf2, 0x05, 0x44, 0x37, 0xf6, 0xfc, 0x85, 0x87, 0x46, 0xd8, 0x3d,
	0xd3, 0xbb, 0x61, 0xec, 0x12, 0x6f, 0x1c, 0xf0, 0x84, 0x6a, 0xcb, 0xf5, 0x6e, 0xa4, 0xe4, 0x35,
	0xb1, 0x22, 0x16, 0x0d, 0xf2, 0x82, 0xcf, 0x58, 0xf1, 0x94, 0x97, 0x40, 0x82, 0x2a, 0x80, 0xe2,
	0x95, 0x3e, 0x5c, 0x4d, 0xb4, 0xc0, 0x2b, 0x00, 0x30, 0xb3, 0x2f, 0xda, 0xfa, 0x13, 0x7c, 0x14,
	0x80, 0xaa, 0xa6, 0x2a, 0x18, 0x25, 0xae, 0xec, 0xc3, 0x27, 0x88, 0x54, 0xed, 0x90, 0x97, 0x56,
	0x64, 0x99, 0x9d, 0x47, 0x3a, 0xa1, 0x63, 0xac, 0x20, 0x54, 0x17, 0xdb, 0xed, 0x67, 0x72, 0x79,
	0x15, 0x39, 0xbc, 0xda, 0x1f, 0xb9, 0x5d, 0x01, 0x08, 0xba, 0xf3, 0xa4, 0x92, 0x3a, 0x14, 0x77,
	0x68, 0xe4, 0x31, 0x92, 0x32, 0x9b, 0x16, 0x88, 0x23, 0x14, 0x86, 0xbc, 0x58, 0x46, 0xb9, 0x93,
	0xdf, 0xb3, 0x49, 0xe6, 0x4c, 0xd6, 0x90, 0x6d, 0x9a, 0xc0, 0xa0, 0x30, 0x72, 0x0f, 0x6b, 0x6e,
	0x78, 0x74, 0x73, 0x57, 0x30, 0x88, 0xba, 0x92, 0xae, 0xe9, 0xe4, 0x54, 0xf6, 0xcb, 0x5e, 0x2e,
};
__aligned(64) uint8_t aes_192_ctr_13[16] = {
	0x31, 0x4e, 0x2d, 0x3a, 0xbe, 0xbf, 0xde, 0xd4, 0xa3, 0x6b, 0xcd, 0x7d, 0x94,
};
__aligned(64) uint8_t aes_192_ctr_16[16] = {
	0x74, 0x35, 0x25, 0x9b, 0xe8, 0xa6, 0x3f, 0x5d, 0xb8, 0x31, 0x54, 0x3f, 0x6b, 0xc2, 0x90, 0xa3,
};
__aligned(64) uint8_t aes_192_ctr_192[192] = {
	0x84, 0x5f, 0xc7, 0xc4, 0x9b, 0xb5, 0xf6, 0x5e, 0x16, 0x1a, 0x38, 0x55, 0xa4, 0xbc, 0x15, 0xa2,
	0x25, 0x62, 0x4c, 0x30, 0x40, 0x58, 0xda, 0x8a, 0x33, 0x8f, 0x5d, 0x5a, 0x14, 0xd0, 0xec, 0x24,
	0xe0, 0x8a, 0x9f, 0xe3, 0x6e, 0x14, 0x79, 0xd9, 0x51, 0xf0, 0xbe, 0x31, 0xd4, 0x19, 0x66, 0xa6,
	0xc3, 0x0d, 0x9c, 0x17, 0xf2, 0xe9, 0x7d, 0x66, 0xe7, 0x44, 0xc4, 0x3a, 0xd5, 0x76, 0x70, 0x3a,
	0xf9, 0x56, 0x0f, 0x4d, 0x72, 0x89, 0x8d, 0xed, 0xab, 0x15, 0x82, 0xa3, 0xcd, 0xad, 0xc1, 0x1f,
	0x8c, 0x15, 0xc1, 0xfc, 0x19, 0x93, 0xe5, 0x21, 0x4a, 0x44, 0xde, 0x78, 0xde, 0x4f, 0xe5, 0xde,
	0x12, 0x22, 0xcc, 0xb3, 0x2b, 0xbc, 0xe2, 0x7c, 0x0d, 0x18, 0x1d, 0x50, 0x63, 0xba, 0x7e, 0xbd,
	0x2e, 0x24, 0xb3, 0x2e, 0x94, 0x2e, 0x6f, 0x56, 0xaf, 0xfe, 0x99, 0x4b, 0xa3, 0xd9, 0x42, 0x7d,
	0xe5, 0x5e, 0xe5, 0x85, 0xb6, 0xab, 0x1f, 0x68, 0x33, 0xc9, 0x11, 0x49, 0xee, 0xfc, 0x3d, 0x62,
	0x01, 0xe6, 0xbf, 0x75, 0xa2, 0xf2, 0x82, 0x8e, 0x65, 0x2d, 0x23, 0x0c, 0x0c, 0x50, 0x56, 0x24,
	0xa2, 0x1c, 0xd8, 0x76, 0xc8, 0x67, 0x0d, 0xae, 0xbf, 0x8c, 0x49, 0x44, 0x8a, 0x56, 0x59, 0x05,
	0x35, 0x45, 0x11, 0xc4, 0xce, 0x15, 0xcd, 0x45, 0x25, 0x13, 0x6e, 0xcd, 0x39, 0xdd, 0x4e, 0x25,
};
__aligned(64) uint8_t aes_192_ctr_223[224] = {
	0x76, 0xa0, 0x3c, 0xee, 0x5a, 0x5e, 0xae, 0x86, 0xa3, 0x30, 0x70, 0x11, 0x4e, 0x3c, 0xfb, 0x43,
	0x8e, 0x58, 0xca, 0xe5, 0x89, 0xc4, 0x78, 0xd6, 0x0a, 0xad, 0x79, 0x94, 0x79, 0x09, 0x6e, 0x47,
	0x01, 0xdd, 0xa8, 0xed, 0xaf, 0xb2, 0xfa, 0xe6, 0xac, 0xcb, 0xfc, 0x16, 0x77, 0x9d, 0xb0, 0x51,
	0xf6, 0x3e, 0x66, 0x85, 0x36, 0x2c, 0xe0, 0x44, 0x32, 0xcd, 0xda, 0x5b, 0x0a, 0x0b, 0x23, 0xec,
	0x08, 0xd3, 0x37, 0xfe, 0x3e, 0x8b, 0xd5, 0x94, 0x92, 0x6f, 0x41, 0xda, 0xb3, 0xfd, 0xfc, 0xfe,
	0x0c, 0x18, 0x97, 0x36, 0xc6, 0x65, 0x86, 0x3a, 0x54, 0x7a, 0xc8, 0x2d, 0x60, 0xbe, 0x89, 0x55,
	0xd2, 0x58, 0xd9, 0x66, 0x37, 0xf6, 0x6c, 0x65, 0xe4, 0x72, 0x6f, 0xdf, 0x2a, 0x52, 0x93, 0x77,
	0xe8, 0xd6, 0x32, 0x60, 0xee, 0x18, 0x2d, 0xe1, 0xff, 0x00, 0x9b, 0xb2, 0x8d, 0x02, 0xc7, 0x5c,
	0x07, 0xe3, 0x43, 0x04, 0x8b, 0xed, 0xa0, 0xfd, 0x37, 0x77, 0x5c, 0xe6, 0x7c, 0xaa, 0xb7, 0x9f,
	0x13, 0xf6, 0x1d, 0xc1, 0xbf, 0x89, 0x4a, 0x78, 0x3a, 0xc5, 0x6a, 0xa0, 0x62, 0x5b, 0x9b, 0xd0,
	0xe4, 0x86, 0x82, 0x89, 0x83, 0xbe, 0x00, 0x57, 0x16, 0x0b, 0xfa, 0xf8, 0x73, 0x38, 0x6b, 0xaf,
	0x67, 0x58, 0x19, 0x9c, 0x5a, 0x8e, 0xaf, 0x63, 0x7a, 0x44, 0x3d, 0x46, 0xe5, 0x55, 0x9b, 0x53,
	0xe8, 0xc9, 0xe3, 0x4c, 0x5e, 0x9c, 0x27, 0x9c, 0x19, 0x19, 0xb7, 0xd4, 0x5c, 0x87, 0xef, 0x83,
	0xc8, 0xe7, 0xb3, 0x77, 0xe7, 0x89, 0x94, 0xcb, 0xaa, 0xbe, 0xfa, 0x32, 0x1a, 0xf4, 0x99,
};
__aligned(64) uint8_t aes_192_ctr_256[256] = {
	0xd9, 0x5b, 0x39, 0x33, 0xe4, 0x07, 0x1e, 0x18, 0xdc, 0xbc, 0x81, 0xdf, 0xe3, 0xeb, 0x0b, 0x3a,
	0x83, 0xf3, 0x3b, 0x0b, 0xc1, 0xa1, 0xf8, 0x8c, 0xb7, 0xcb, 0xc8, 0xf1, 0x1f, 0x9d, 0x1e, 0x6d,
	0xef, 0x75, 0x8e, 0x94, 0x3b, 0xe3, 0xb9, 0xb4, 0x85, 0xed, 0x7d, 0x27, 0x07, 0x33, 0x54, 0x47,
	0x3b, 0x76, 0xa0, 0x5a, 0xca, 0xec, 0xc8, 0x8a, 0x3f, 0xd0, 0x71, 0x51, 0x3b, 0x58, 0xc7, 0x28,
	0xe1, 0xfb, 0x44, 0x62, 0xef, 0x73, 0xb6, 0x8a, 0x5e, 0xec, 0xc8, 0x3b, 0xee, 0x5c, 0x54, 0xd1,
	0xa4, 0xc7, 0xcc, 0x72, 0xbd, 0x93, 0x74, 0x97, 0xd1, 0x17, 0x51, 0xec, 0x12, 0xa1, 0x3b, 0x28,
	0xaa, 0xd4, 0x62, 0xa6, 0x5a, 0x94, 0xfd, 0x0b, 0x45, 0x6a, 0xb7, 0x99, 0x76, 0xaf, 0x1d, 0x4d,
	0x46, 0x7b, 0x5d, 0x13, 0x23, 0xfd, 0x5a, 0xba, 0xfb, 0x8a, 0x7a, 0x30, 0x3e, 0x2c, 0x71, 0xa9,
	0x05, 0x1d, 0xad, 0xef, 0x60, 0x4c, 0x5c, 0x28, 0x4b, 0x72, 0xc5, 0x08, 0xd5, 0xb6, 0x39, 0x92,
	0x1d, 0xbc, 0x45, 0x20, 0xba, 0x3a, 0xcd, 0xc3, 0x53, 0x91, 0x1c, 0x45, 0x35, 0x6c, 0x3c, 0xd2,
	0x6c, 0x7b, 0x0c, 0x78, 0xec, 0xa1, 0xe1, 0xdc, 0xb7, 0x16, 0x1b, 0xdc, 0xaa, 0x80, 0x9e, 0x91,
	0x9e, 0x9d, 0xab, 0x1e, 0x0d, 0xa0, 0x3c, 0x61, 0x94, 0x57, 0x8b, 0x69, 0x86, 0x34, 0xde, 0x40,
	0xc8, 0x9d, 0x30, 0x93, 0x7c, 0x3f, 0xd3, 0xbb, 0x8a, 0x1b, 0x39, 0x77, 0x38, 0x92, 0x5b, 0x70,
	0xb0, 0x18, 0x0e, 0x5a, 0x2d, 0xbe, 0xe7, 0xd7, 0x30, 0x0f, 0x6b, 0x6a, 0xb0, 0xb3, 0xb8, 0xcd,
	0x0b, 0xe0, 0x77, 0xdf, 0x1a, 0x65, 0x87, 0x20, 0x26, 0xce, 0x13, 0xc9, 0x6c, 0xa3, 0xef, 0xe2,
	0x92, 0x1d, 0x84, 0x01, 0xca, 0x07, 0xc7, 0x73, 0xec, 0xa3, 0x21, 0xde, 0x48, 0xa4, 0xe9, 0x65,
};
__aligned(64) uint8_t aes_256_ctr_13[16] = {
	0x74, 0x84, 0xb2, 0x32, 0x44, 0x53, 0x33, 0x29, 0xfb, 0x7b, 0x8a, 0x9e, 0x13,
};
__aligned(64) uint8_t aes_256_ctr_16[16] = {
	0x31, 0xff, 0xba, 0x93, 0x12, 0x4a, 0xd2, 0xa0, 0xe0, 0x21, 0x13, 0xdc, 0xec, 0x2c, 0xe6, 0x33,
};
__aligned(64) uint8_t aes_256_ctr_192[192] = {
	0xc1, 0x95, 0x58, 0xcc, 0x61, 0x59, 0x1b, 0xa3, 0x4e, 0x0a, 0x7f, 0xb6, 0x23, 0x52, 0x63, 0x32,
	0xfb, 0x4f, 0xee, 0x5b, 0x52, 0xe8, 0x18, 0x43, 0xe1, 0x81, 0x21, 0x10, 0x33, 0xc1, 0x13, 0x55,
	0x2f, 0xf2, 0x40, 0x82, 0x02, 0x9f, 0x0f, 0x2d, 0x68, 0x29, 0x6f, 0xed, 0xf0, 0x4c, 0xf8, 0x40,
	0xab, 0x59, 0x07, 0x9c, 0xd5, 0x69, 0xd8, 0x09, 0x79, 0xaa, 0x6f, 0x3f, 0xde, 0xa8, 0x49, 0x86,
	0xec, 0x10, 0x26, 0x5a, 0x1f, 0x93, 0x99, 0xe9, 0xa7, 0xd3, 0xad, 0x9d, 0x35, 0x85, 0x91, 0x34,
	0x59, 0x1c, 0xdc, 0xea, 0x54, 0x35, 0x65, 0x1a, 0xfd, 0x93, 0x89, 0x2c, 0x93, 0x8e, 0x03, 0x9f,
	0x06, 0x19, 0x59, 0xc7, 0x92, 0x54, 0x74, 0x87, 0xff, 0xcc, 0x5f, 0x3f, 0xb8, 0x3b, 0x5e, 0xcb,
	0xbd, 0x2b, 0x7e, 0xea, 0x47, 0x91, 0x35, 0xd2, 0xb2, 0x98, 0x4f, 0x21, 0x70, 0x34, 0xd8, 0xaf,
	0xb7, 0x55, 0xb5, 0x29, 0x47, 0x20, 0xbc, 0x57, 0x58, 0x04, 0x72, 0x7a, 0x98, 0x5a, 0x88, 0x39,
	0xf5, 0x63, 0xa9, 0xab, 0x7d, 0x22, 0x8d, 0x0d, 0xaa, 0xfd, 0x1b, 0xc0, 0xa7, 0x12, 0x82, 0xa1,
	0x43, 0x6f, 0x0b, 0x08, 0xe4, 0x64, 0x95, 0xa5, 0xda, 0x15, 0xdc, 0xa2, 0x96, 0xdf, 0xfa, 0x94,
	0xef, 0xe6, 0x42, 0x1e, 0xe0, 0x7d, 0xa5, 0x80, 0xda, 0xf2, 0xac, 0x07, 0x78, 0x75, 0x7b, 0xf9,
};
__aligned(64) uint8_t aes_256_ctr_223[224] = {
	0x33, 0x6a, 0xa3, 0xe6, 0xa0, 0xb2, 0x43, 0x7b, 0xfb, 0x20, 0x37, 0xf2, 0xc9, 0xd2, 0x8d, 0xd3,
	0x50, 0x75, 0x68, 0x8e, 0x9b, 0x74, 0xba, 0x1f, 0xd8, 0xa3, 0x05, 0xde, 0x5e, 0x18, 0x91, 0x36,
	0xce, 0xa5, 0x77, 0x8c, 0xc3, 0x39, 0x8c, 0x12, 0x95, 0x12, 0x2d, 0xca, 0x53, 0xc8, 0x2e, 0xb7,
	0x9e, 0x6a, 0xfd, 0x0e, 0x11, 0xac, 0x45, 0x2b, 0xac, 0x23, 0x71, 0x5e, 0x01, 0xd5, 0x1a, 0x50,
	0x1d, 0x95, 0x1e, 0xe9, 0x53, 0x91, 0xc1, 0x90, 0x9e, 0xa9, 0x6e, 0xe4, 0x4b, 0xd5, 0xac, 0xd5,
	0xd9, 0x11, 0x8a, 0x20, 0x8b, 0xc3, 0x06, 0x01, 0xe3, 0xad, 0x9f, 0x79, 0x2d, 0x7f, 0x6f, 0x14,
	0xc6, 0x63, 0x4c, 0x12, 0x8e, 0x1e, 0xfa, 0x9e, 0x16, 0xa6, 0x2d, 0xb0, 0xf1, 0xd3, 0xb3, 0x01,
	0x7b, 0xd9, 0xff, 0xa4, 0x3d, 0xa7, 0x77, 0x65, 0xe2, 0x66, 0x4d, 0xd8, 0x5e, 0xef, 0x5d, 0x8e,
	0x55, 0xe8, 0x13, 0xa8, 0x7a, 0x66, 0x03, 0xc2, 0x5c, 0xba, 0x3f, 0xd5, 0x0a, 0x0c, 0x02, 0xc4,
	0xe7, 0x73, 0x0b, 0x1f, 0x60, 0x59, 0x45, 0xfb, 0xf5, 0x15, 0x52, 0x6c, 0xc9, 0x19, 0x4f, 0x55,
	0x05, 0xf5, 0x51, 0xf7, 0xaf, 0xbd, 0x98, 0x5c, 0x73, 0x92, 0x6f, 0x1e, 0x6f, 0xb1, 0xc8, 0x3e,
	0xbd, 0xfb, 0x4a, 0x46, 0x74, 0xe6, 0xc7, 0xa6, 0x85, 0xa5, 0xff, 0x8c, 0xa4, 0xfd, 0xae, 0x8f,
	0x75, 0x9e, 0x6b, 0x26, 0xd2, 0x4d, 0xf3, 0x7b, 0x8a, 0xe5, 0x48, 0xca, 0x6c, 0xe5, 0x39, 0xcb,
	0xc3, 0xe4, 0xf1, 0x2c, 0x01, 0x40, 0x86, 0x9d, 0x65, 0x2f, 0x92, 0x53, 0x78, 0x96, 0xdc,
};
__aligned(64) uint8_t aes_256_ctr_256[256] = {
	0x9c, 0x91, 0xa6, 0x3b, 0x1e, 0xeb, 0xf3, 0xe5, 0x84, 0xac, 0xc6, 0x3c, 0x64, 0x05, 0x7d, 0xaa,
	0x5d, 0xde, 0x99, 0x60, 0xd3, 0x11, 0x3a, 0x45, 0x65, 0xc5, 0xb4, 0xbb, 0x38, 0x8c, 0xe1, 0x1c,
	0x20, 0x0d, 0x51, 0xf5, 0x57, 0x68, 0xcf, 0x40, 0xbc, 0x34, 0xac, 0xfb, 0x23, 0x66, 0xca, 0xa1,
	0x53, 0x22, 0x3b, 0xd1, 0xed, 0x6c, 0x6d, 0xe5, 0xa1, 0x3e, 0xda, 0x54, 0x30, 0x86, 0xfe, 0x94,
	0xf4, 0xbd, 0x6d, 0x75, 0x82, 0x69, 0xa2, 0x8e, 0x52, 0x2a, 0xe7, 0x05, 0x16, 0x74, 0x04, 0xfa,
	0x71, 0xce, 0xd1, 0x64, 0xf0, 0x35, 0xf4, 0xac, 0x66, 0xc0, 0x06, 0xb8, 0x5f, 0x60, 0xdd, 0x69,
	0xbe, 0xef, 0xf7, 0xd2, 0xe3, 0x7c, 0x6b, 0xf0, 0xb7, 0xbe, 0xf5, 0xf6, 0xad, 0x2e, 0x3d, 0x3b,
	0xd5, 0x74, 0x90, 0xd7, 0xf0, 0x42, 0x00, 0x3e, 0xe6, 0xec, 0xac, 0x5a, 0xed, 0xc1, 0xeb, 0x7b,
	0x57, 0x16, 0xfd, 0x43, 0x91, 0xc7, 0xff, 0x17, 0x20, 0xbf, 0xa6, 0x3b, 0xa3, 0x10, 0x8c, 0xc9,
	0xe9, 0x39, 0x53, 0xfe, 0x65, 0xea, 0xc2, 0x40, 0x9c, 0x41, 0x24, 0x89, 0x9e, 0x2e, 0xe8, 0x57,
	0x8d, 0x08, 0xdf, 0x06, 0xc0, 0xa2, 0x79, 0xd7, 0xd2, 0x8f, 0x8e, 0x3a, 0xb6, 0x09, 0x3d, 0x00,
	0x44, 0x3e, 0xf8, 0xc4, 0x23, 0xc8, 0x54, 0xa4, 0x6b, 0xb6, 0x49, 0xa3, 0xc7, 0x9c, 0xeb, 0x9c,
	0x55, 0xca, 0xb8, 0xf9, 0xf0, 0xee, 0x07, 0x5c, 0x19, 0xe7, 0xc6, 0x69, 0x08, 0xf0, 0x8d, 0x38,
	0xbb, 0x1b, 0x4c, 0x01, 0xcb, 0x77, 0xf5, 0x81, 0xff, 0x9e, 0x03, 0x0b, 0xd2, 0xd1, 0xfd, 0xa7,
	0x2d, 0x37, 0x0b, 0x41, 0x10, 0x6d, 0xdd, 0x20, 0xf8, 0x8f, 0xa6, 0x86, 0x85, 0x16, 0x40, 0x06,
	0xdd, 0x55, 0x7d, 0x5d, 0x5a, 0x40, 0x7b, 0xda, 0xa6, 0x90, 0x88, 0x65, 0x4a, 0x5a, 0xea, 0xe0,
};
__aligned(64) uint8_t aes_128_ofb_13[16] = {
	0x14, 0x92, 0x63, 0x4e, 0x94, 0x95, 0x94, 0xf5, 0x36, 0xa7, 0x48, 0x9a, 0xf7,
};
__aligned(64) uint8_t aes_128_ofb_16[16] = {
	0x51, 0xe9, 0x6b, 0xef, 0xc2, 0x8c, 0x75, 0x7c, 0x2d, 0xfd, 0xd1, 0xd8, 0x08, 0x06, 0x39, 0x59,
};
__aligned(64) uint8_t aes_128_ofb_192[192] = {
	0xa1, 0x83, 0x89, 0xb0, 0xb1, 0x9f, 0xbc, 0x7f, 0x83, 0xd6, 0xbd, 0xb2, 0xc7, 0x78, 0xbc, 0x58,
	0xd7, 0x01, 0xde, 0x7d, 0x27, 0x53, 0xa3, 0x59, 0x48, 0x96, 0x81, 0xe7, 0x1a, 0x50, 0x79, 0x07,
	0x00, 0xbe, 0x10, 0x40, 0x7e, 0xd8, 0x46, 0x48, 0xc6, 0x32, 0xb9, 0xee, 0xaa, 0xc5, 0x72, 0x7b,
	0x36, 0x72, 0x5a, 0x14, 0xe4, 0xe9, 0x4c, 0x7d, 0x0a, 0x83, 0x99, 0xc5, 0x70, 0xec, 0x66, 0x30,
	0x73, 0xd5, 0xd9, 0x16, 0xb2, 0x93, 0x5e, 0xd1, 0xff, 0xd5, 0x5b, 0x81, 0x25, 0xff, 0x8e, 0x21,
	0x25, 0xc4, 0xc2, 0x6d, 0xb7, 0x4f, 0x5d, 0xfa, 0x32, 0xe0, 0xf6, 0xdb, 0x34, 0x8c, 0xf8, 0x16,
	0x41, 0x21, 0xcd, 0x9a, 0x08, 0x73, 0xc4, 0xef, 0x0a, 0x97, 0xc3, 0x09, 0x83, 0xa9, 0xc3, 0x19,
	0x21, 0x49, 0xf0, 0x92, 0x8d, 0x7b, 0xe0, 0x37, 0x6d, 0xbf, 0xcc, 0x7b, 0x31, 0x0b, 0xed, 0xc5,
	0x26, 0xbe, 0x6f, 0x00, 0x35, 0xec, 0x43, 0x52, 0x9f, 0xbd, 0x81, 0xc8, 0x2e, 0xe5, 0x37, 0x54,
	0xcf, 0xef, 0xe8, 0x17, 0xb5, 0x28, 0x75, 0xb9, 0x90, 0xa4, 0xb6, 0x63, 0xd4, 0xd7, 0x46, 0x68,
	0x44, 0x66, 0x00, 0xb5, 0xc2, 0x72, 0x5d, 0x33, 0x0f, 0x73, 0x28, 0x23, 0x8b, 0xe8, 0x98, 0x0d,
	0xfc, 0x76, 0xa6, 0x6e, 0x72, 0x0c, 0xeb, 0x24, 0xcf, 0x3b, 0x24, 0x52, 0x5a, 0x03, 0xb1, 0xd5,
};
__aligned(64) uint8_t aes_128_ofb_223[224] = {
	0x53, 0x7c, 0x72, 0x9a, 0x70, 0x74, 0xe4, 0xa7, 0x36, 0xfc, 0xf5, 0xf6, 0x2d, 0xf8, 0x52, 0xb9,
	0x7c, 0x3b, 0x58, 0xa8, 0xee, 0xcf, 0x01, 0x05, 0x71, 0xb4, 0xa5, 0x29, 0x77, 0x89, 0xfb, 0x64,
	0xe1, 0xe9, 0x27, 0x4e, 0xbf, 0x7e, 0xc5, 0x77, 0x3b, 0x09, 0xfb, 0xc9, 0x09, 0x41, 0xa4, 0x8c,
	0x03, 0x41, 0xa0, 0x86, 0x20, 0x2c, 0xd1, 0x5f, 0xdf, 0x0a, 0x87, 0xa4, 0xaf, 0x91, 0x35, 0xe6,
	0x82, 0x50, 0xe1, 0xa5, 0xfe, 0x91, 0x06, 0xa8, 0xc6, 0xaf, 0x98, 0xf8, 0x5b, 0xaf, 0xb3, 0xc0,
	0xa5, 0xc9, 0x94, 0xa7, 0x68, 0xb9, 0x3e, 0xe1, 0x2c, 0xde, 0xe0, 0x8e, 0x8a, 0x7d, 0x94, 0x9d,
	0x81, 0x5b, 0xd8, 0x4f, 0x14, 0x39, 0x4a, 0xf6, 0xe3, 0xfd, 0xb1, 0x86, 0xca, 0x41, 0x2e, 0xd3,
	0xe7, 0xbb, 0x71, 0xdc, 0xf7, 0x4d, 0xa2, 0x80, 0x3d, 0x41, 0xce, 0x82, 0x1f, 0xd0, 0x68, 0xe4,
	0xc4, 0x03, 0xc9, 0x81, 0x08, 0xaa, 0xfc, 0xc7, 0x9b, 0x03, 0xcc, 0x67, 0xbc, 0xb3, 0xbd, 0xa9,
	0xdd, 0xff, 0x4a, 0xa3, 0xa8, 0x53, 0xbd, 0x4f, 0xcf, 0x4c, 0xff, 0xcf, 0xba, 0xdc, 0x8b, 0x9c,
	0x02, 0xfc, 0x5a, 0x4a, 0x89, 0xab, 0x50, 0xca, 0xa6, 0xf4, 0x9b, 0x9f, 0x72, 0x86, 0xaa, 0xa7,
	0xae, 0x6b, 0xae, 0x36, 0xe6, 0x97, 0x89, 0x02, 0x90, 0x6c, 0x77, 0xd9, 0x86, 0x8b, 0x64, 0xa3,
	0xb8, 0xa4, 0x04, 0xc0, 0x54, 0x4e, 0xb4, 0x08, 0x54, 0x01, 0xcb, 0x4b, 0xb6, 0x0c, 0xaf, 0x10,
	0x3e, 0x1c, 0x65, 0x35, 0xa0, 0xb1, 0xcf, 0xc9, 0x12, 0xe1, 0xaf, 0x04, 0x8c, 0xe9, 0x5f,
};
__aligned(64) uint8_t aes_128_ofb_256[256] = {
	0xfc, 0x87, 0x77, 0x47, 0xce, 0x2d, 0x54, 0x39, 0x49, 0x70, 0x04, 0x38, 0x80, 0x2f, 0xa2, 0xc0,
	0x71, 0x90, 0xa9, 0x46, 0xa6, 0xaa, 0x81, 0x5f, 0xcc, 0xd2, 0x14, 0x4c, 0x11, 0x1d, 0x8b, 0x4e,
	0x0f, 0x41, 0x01, 0x37, 0x2b, 0x2f, 0x86, 0x25, 0x12, 0x2f, 0x7a, 0xf8, 0x79, 0xef, 0x40, 0x9a,
	0xce, 0x09, 0x66, 0x59, 0xdc, 0xec, 0xf9, 0x91, 0xd2, 0x17, 0x2c, 0xae, 0x9e, 0xc2, 0xd1, 0x22,
	0x6b, 0x78, 0x92, 0x39, 0x2f, 0x69, 0x65, 0xb6, 0x0a, 0x2c, 0x11, 0x19, 0x06, 0x0e, 0x1b, 0xef,
	0x0d, 0x16, 0xcf, 0xe3, 0x13, 0x4f, 0xcc, 0x4c, 0xa9, 0xb3, 0x79, 0x4f, 0xf8, 0x62, 0x26, 0xe0,
	0xf9, 0xd7, 0x63, 0x8f, 0x79, 0x5b, 0xdb, 0x98, 0x42, 0xe5, 0x69, 0xc0, 0x96, 0xbc, 0xa0, 0xe9,
	0x49, 0x16, 0x1e, 0xaf, 0x3a, 0xa8, 0xd5, 0xdb, 0x39, 0xcb, 0x2f, 0x00, 0xac, 0xfe, 0xde, 0x11,
	0xc6, 0xfd, 0x27, 0x6a, 0xe3, 0x0b, 0x00, 0x12, 0xe7, 0x06, 0x55, 0x89, 0x15, 0xaf, 0x33, 0xa4,
	0xd3, 0xb5, 0x12, 0x42, 0xad, 0xe0, 0x3a, 0xf4, 0xa6, 0x18, 0x89, 0x2a, 0xed, 0xeb, 0x2c, 0x9e,
	0x8a, 0x01, 0xd4, 0xbb, 0xe6, 0xb4, 0xb1, 0x41, 0x07, 0xe9, 0x7a, 0xbb, 0xab, 0x3e, 0x5f, 0x99,
	0x57, 0xae, 0x1c, 0xb4, 0xb1, 0xb9, 0x1a, 0x00, 0x7e, 0x7f, 0xc1, 0xf6, 0xe5, 0xea, 0x21, 0xb0,
	0x98, 0xf0, 0xd7, 0x1f, 0x76, 0xed, 0x40, 0x2f, 0xc7, 0x03, 0x45, 0xe8, 0xd2, 0x19, 0x1b, 0xe3,
	0x46, 0xe3, 0xd8, 0x18, 0x6a, 0x86, 0xbc, 0xd5, 0x88, 0x50, 0x3e, 0x5c, 0x26, 0xae, 0x7e, 0x57,
	0x51, 0x9f, 0xeb, 0xe4, 0x30, 0xc5, 0x59, 0xe7, 0x5f, 0x5d, 0x1b, 0x85, 0x9d, 0xe3, 0xb6, 0x36,
	0xb6, 0xdc, 0x32, 0x29, 0x45, 0x98, 0xdd, 0xd9, 0x7a, 0xd4, 0xef, 0x2a, 0x41, 0xbf, 0xc7, 0x1c,
};
__aligned(64) uint8_t aes_192_ofb_13[16] = {
	0x31, 0x4e, 0x2d, 0x3a, 0xbe, 0xbf, 0xde, 0xd4, 0xa3, 0x6b, 0xcd, 0x7d, 0x94,
};
__aligned(64) uint8_t aes_192_ofb_16[16] = {
	0x74, 0x35, 0x25, 0x9b, 0xe8, 0xa6, 0x3f, 0x5d, 0xb8, 0x31, 0x54, 0x3f, 0x6b, 0xc2, 0x90, 0xa3,
};
__aligned(64) uint8_t aes_192_ofb_192[192] = {
	0x84, 0x5f, 0xc7, 0xc4, 0x9b, 0xb5, 0xf6, 0x5e, 0x16, 0x1a, 0x38, 0x55, 0xa4, 0xbc, 0x15, 0xa2,
	0x75, 0x70, 0xdc, 0x63, 0x9f, 0x02, 0xb7, 0x9c, 0x41, 0x60, 0x24, 0x86, 0x72, 0xa8, 0xf4, 0x98,
	0x19, 0x73, 0x5e, 0x78, 0x72, 0x2b, 0x9f, 0xae, 0x37, 0x87, 0xa6, 0x0f, 0xd5, 0xd8, 0x94, 0xbe,
	0x87, 0x5a, 0x96, 0x03, 0xc2, 0x5c, 0x5f, 0x74, 0x05, 0x85, 0x49, 0xdd, 0x5d, 0x76, 0x5b, 0x0f,
	0x4e, 0x5b, 0x05, 0x48, 0xf8, 0x96, 0xa7, 0x66, 0x46, 0x64, 0xa7, 0xe1, 0x6c, 0x82, 0x3d, 0xe7,
	0x64, 0xb6, 0xdb, 0xfc, 0x3b, 0x72, 0x99, 0xfc, 0x8b, 0xc4, 0xf2, 0x88, 0xc4, 0xa3, 0x01, 0xee,
	0x29, 0xda, 0xce, 0xf2, 0x06, 0x3c, 0x97, 0x8b, 0x33, 0xb3, 0xa5, 0x9e, 0x8f, 0x16, 0x5a, 0x6d,
	0x82, 0x59, 0x2b, 0xe4, 0x2e, 0x1e, 0x3d, 0xfc, 0x64, 0xea, 0x98, 0x2a, 0x8f, 0xc7, 0x0f, 0x27,
	0x35, 0x4c, 0xba, 0xc1, 0xa7, 0x9b, 0xaa, 0x17, 0x26, 0x6b, 0x70, 0xcf, 0xe5, 0xb7, 0x42, 0x85,
	0x09, 0x63, 0x7d, 0x1f, 0xd0, 0x1f, 0x15, 0x9b, 0xe3, 0xa2, 0xfb, 0x54, 0xba, 0x4b, 0x1b, 0x5b,
	0x49, 0xd0, 0x06, 0xb3, 0x73, 0x49, 0x9b, 0x92, 0xe5, 0x57, 0x48, 0x29, 0xa9, 0x3a, 0xdc, 0x26,
	0xed, 0x8f, 0xf2, 0x02, 0x62, 0xf3, 0x8e, 0x98, 0x4f, 0x5b, 0xb8, 0x92, 0xf1, 0xfc, 0x77, 0x4d,
};
__aligned(64) uint8_t aes_192_ofb_223[224] = {
	0x76, 0xa0, 0x3c, 0xee, 0x5a, 0x5e, 0xae, 0x86, 0xa3, 0x30, 0x70, 0x11, 0x4e, 0x3c, 0xfb, 0x43,
	0xde, 0x4a, 0x5a, 0xb6, 0x56, 0x9e, 0x15, 0xc0, 0x78, 0x42, 0x00, 0x48, 0x1f, 0x71, 0x76, 0xfb,
	0xf8, 0x24, 0x69, 0x76, 0xb3, 0x8d, 0x1c, 0x91, 0xca, 0xbc, 0xe4, 0x28, 0x76, 0x5c, 0x42, 0x49,
	0xb2, 0x69, 0x6c, 0x91, 0x06, 0x99, 0xc2, 0x56, 0xd0, 0x0c, 0x57, 0xbc, 0x82, 0x0b, 0x08, 0xd9,
	0xbf, 0xde, 0x3d, 0xfb, 0xb4, 0x94, 0xff, 0x1f, 0x7f, 0x1e, 0x64, 0x98, 0x12, 0xd2, 0x00, 0x06,
	0xe4, 0xbb, 0x8d, 0x36, 0xe4, 0x84, 0xfa, 0xe7, 0x95, 0xfa, 0xe4, 0xdd, 0x7a, 0x52, 0x6d, 0x65,
	0xe9, 0xa0, 0xdb, 0x27, 0x1a, 0x76, 0x19, 0x92, 0xda, 0xd9, 0xd7, 0x11, 0xc6, 0xfe, 0xb7, 0xa7,
	0x44, 0xab, 0xaa, 0xaa, 0x54, 0x28, 0x7f, 0x4b, 0x34, 0x14, 0x9a, 0xd3, 0xa1, 0x1c, 0x8a, 0x06,
	0xd7, 0xf1, 0x1c, 0x40, 0x9a, 0xdd, 0x15, 0x82, 0x22, 0xd5, 0x3d, 0x60, 0x77, 0xe1, 0xc8, 0x78,
	0x1b, 0x73, 0xdf, 0xab, 0xcd, 0x64, 0xdd, 0x6d, 0xbc, 0x4a, 0xb2, 0xf8, 0xd4, 0x40, 0xd6, 0xaf,
	0x0f, 0x4a, 0x5c, 0x4c, 0x38, 0x90, 0x96, 0x6b, 0x4c, 0xd0, 0xfb, 0x95, 0x50, 0x54, 0xee, 0x8c,
	0xbf, 0x92, 0xfa, 0x5a, 0xf6, 0x68, 0xec, 0xbe, 0x10, 0x0c, 0xeb, 0x19, 0x2d, 0x74, 0xa2, 0x3b,
	0x8d, 0x2a, 0xc7, 0x83, 0xee, 0x0d, 0x84, 0x14, 0x81, 0x2a, 0xb2, 0xae, 0xc9, 0x3e, 0x24, 0x4d,
	0x46, 0x7a, 0x76, 0xeb, 0x43, 0x9d, 0xe5, 0xdd, 0xe7, 0xc1, 0xcb, 0x79, 0x55, 0x14, 0x89,
};
__aligned(64) uint8_t aes_192_ofb_256[256] = {
	0xd9, 0x5b, 0x39, 0x33, 0xe4, 0x07, 0x1e, 0x18, 0xdc, 0xbc, 0x81, 0xdf, 0xe3, 0xeb, 0x0b, 0x3a,
	0xd3, 0xe1, 0xab, 0x58, 0x1e, 0xfb, 0x95, 0x9a, 0xc5, 0x24, 0xb1, 0x2d, 0x79, 0xe5, 0x06, 0xd1,
	0x16, 0x8c, 0x4f, 0x0f, 0x27, 0xdc, 0x5f, 0xc3, 0xe3, 0x9a, 0x65, 0x19, 0x06, 0xf2, 0xa6, 0x5f,
	0x7f, 0x21, 0xaa, 0x4e, 0xfa, 0x59, 0xea, 0x98, 0xdd, 0x11, 0xfc, 0xb6, 0xb3, 0x58, 0xec, 0x1d,
	0x56, 0xf6, 0x4e, 0x67, 0x65, 0x6c, 0x9c, 0x01, 0xb3, 0x9d, 0xed, 0x79, 0x4f, 0x73, 0xa8, 0x29,
	0x4c, 0x64, 0xd6, 0x72, 0x9f, 0x72, 0x08, 0x4a, 0x10, 0x97, 0x7d, 0x1c, 0x08, 0x4d, 0xdf, 0x18,
	0x91, 0x2c, 0x60, 0xe7, 0x77, 0x14, 0x88, 0xfc, 0x7b, 0xc1, 0x0f, 0x57, 0x9a, 0x03, 0x39, 0x9d,
	0xea, 0x06, 0xc5, 0xd9, 0x99, 0xcd, 0x08, 0x10, 0x30, 0x9e, 0x7b, 0x51, 0x12, 0x32, 0x3c, 0xf3,
	0xd5, 0x0f, 0xf2, 0xab, 0x71, 0x7c, 0xe9, 0x57, 0x5e, 0xd0, 0xa4, 0x8e, 0xde, 0xfd, 0x46, 0x75,
	0x15, 0x39, 0x87, 0x4a, 0xc8, 0xd7, 0x5a, 0xd6, 0xd5, 0x1e, 0xc4, 0x1d, 0x83, 0x77, 0x71, 0xad,
	0x87, 0xb7, 0xd2, 0xbd, 0x57, 0x8f, 0x77, 0xe0, 0xed, 0xcd, 0x1a, 0xb1, 0x89, 0xec, 0x1b, 0xb2,
	0x46, 0x57, 0x48, 0xd8, 0xa1, 0x46, 0x7f, 0xbc, 0xfe, 0x1f, 0x5d, 0x36, 0x4e, 0x15, 0xe7, 0x28,
	0xad, 0x7e, 0x14, 0x5c, 0xcc, 0xae, 0x70, 0x33, 0x12, 0x28, 0x3c, 0x0d, 0xad, 0x2b, 0x90, 0xbe,
	0x3e, 0x85, 0xcb, 0xc6, 0x89, 0xaa, 0x96, 0xc1, 0x7d, 0x70, 0x5a, 0x21, 0xff, 0x53, 0xa8, 0x68,
	0x35, 0xfb, 0xf9, 0x95, 0xc8, 0x29, 0xb4, 0x0a, 0xae, 0x23, 0x3c, 0x4e, 0xff, 0x8b, 0x73, 0x81,
	0x3a, 0x13, 0x4d, 0x01, 0xda, 0x8f, 0xdf, 0xe4, 0x10, 0xe8, 0xd5, 0x1e, 0x68, 0x62, 0x1d, 0x9b,
};
__aligned(64) uint8_t aes_256_ofb_13[16] = {
	0x74, 0x84, 0xb2, 0x32, 0x44, 0x53, 0x33, 0x29, 0xfb, 0x7b, 0x8a, 0x9e, 0x13,
};
__aligned(64) uint8_t aes_256_ofb_16[16] = {
	0x31, 0xff, 0xba, 0x93, 0x12, 0x4a, 0xd2, 0xa0, 0xe0, 0x21, 0x13, 0xdc, 0xec, 0x2c, 0xe6, 0x33,
};
__aligned(64) uint8_t aes_256_ofb_192[192] = {
	0xc1, 0x95, 0x58, 0xcc, 0x61, 0x59, 0x1b, 0xa3, 0x4e, 0x0a, 0x7f, 0xb6, 0x23, 0x52, 0x63, 0x32,
	0x3e, 0xe7, 0x29, 0xbd, 0xbb, 0xcb, 0xff, 0xd0, 0x52, 0x16, 0x7f, 0xff, 0xb3, 0x1c, 0x06, 0x78,
	0x49, 0xf8, 0xad, 0x76, 0x1e, 0x89, 0x33, 0x33, 0xbb, 0xb7, 0xf7, 0x93, 0x1e, 0x3f, 0x5b, 0xb9,
	0x2b, 0x34, 0xbe, 0x68, 0x0d, 0xfd, 0x08, 0xca, 0x79, 0x38, 0x13, 0xeb, 0xd2, 0xff, 0x32, 0x19,
	0x24, 0xb3, 0xce, 0x09, 0x71, 0xcf, 0x5e, 0x49, 0xdd, 0x3c, 0xf6, 0x9b, 0x9a, 0x6c, 0xc0, 0xc3,
	0x19, 0x42, 0x20, 0x18, 0x24, 0x8d, 0xc8, 0x1d, 0x62, 0xd1, 0x4f, 0xe9, 0xc4, 0xed, 0x0f, 0xd4,
	0xb1, 0x92, 0xa7, 0xdd, 0xad, 0x63, 0x3d, 0x59, 0x33, 0x5d, 0x5f, 0x6f, 0x1b, 0xab, 0xe4, 0x55,
	0x6d, 0x76, 0x3d, 0x8f, 0x60, 0x15, 0xfa, 0x92, 0x51, 0x22, 0x2a, 0x32, 0x0f, 0xef, 0xf7, 0x2b,
	0x0e, 0x0b, 0x78, 0x94, 0x44, 0xfd, 0x35, 0x9a, 0x5b, 0x65, 0xed, 0x26, 0xfe, 0xad, 0xa9, 0x23,
	0x87, 0xe1, 0x31, 0xe6, 0xb9, 0x01, 0x65, 0xdf, 0xaf, 0x30, 0x4c, 0x99, 0x7f, 0x05, 0x8b, 0xa3,
	0xf7, 0x3b, 0x69, 0x2b, 0x2a, 0xcb, 0x28, 0xbc, 0x2d, 0x30, 0x39, 0xbd, 0xc1, 0xfc, 0x03, 0x0a,
	0xe5, 0x9f, 0xbf, 0xec, 0x82, 0x36, 0xd8, 0x2b, 0x2e, 0x55, 0xfc, 0xc1, 0x97, 0xca, 0xe7, 0xa5,
};
__aligned(64) uint8_t aes_256_ofb_223[224] = {
	0x33, 0x6a, 0xa3, 0xe6, 0xa0, 0xb2, 0x43, 0x7b, 0xfb, 0x20, 0x37, 0xf2, 0xc9, 0xd2, 0x8d, 0xd3,
	0x95, 0xdd, 0xaf, 0x68, 0x72, 0x57, 0x5d, 0x8c, 0x6b, 0x34, 0x5b, 0x31, 0xde, 0xc5, 0x84, 0x1b,
	0xa8, 0xaf, 0x9a, 0x78, 0xdf, 0x2f, 0xb0, 0x0c, 0x46, 0x8c, 0xb5, 0xb4, 0xbd, 0xbb, 0x8d, 0x4e,
	0x1e, 0x07, 0x44, 0xfa, 0xc9, 0x38, 0x95, 0xe8, 0xac, 0xb1, 0x0d, 0x8a, 0x0d, 0x82, 0x61, 0xcf,
	0xd5, 0x36, 0xf6, 0xba, 0x3d, 0xcd, 0x06, 0x30, 0xe4, 0x46, 0x35, 0xe2, 0xe4, 0x3c, 0xfd, 0x22,
	0x99, 0x4f, 0x76, 0xd2, 0xfb, 0x7b, 0xab, 0x06, 0x7c, 0xef, 0x59, 0xbc, 0x7a, 0x1c, 0x63, 0x5f,
	0x71, 0xe8, 0xb2, 0x08, 0xb1, 0x29, 0xb3, 0x40, 0xda, 0x37, 0x2d, 0xe0, 0x52, 0x43, 0x09, 0x9f,
	0xab, 0x84, 0xbc, 0xc1, 0x1a, 0x23, 0xb8, 0x25, 0x01, 0xdc, 0x28, 0xcb, 0x21, 0x34, 0x72, 0x0a,
	0xec, 0xb6, 0xde, 0x15, 0x79, 0xbb, 0x8a, 0x0f, 0x5f, 0xdb, 0xa0, 0x89, 0x6c, 0xfb, 0x23, 0xde,
	0x95, 0xf1, 0x93, 0x52, 0xa4, 0x7a, 0xad, 0x29, 0xf0, 0xd8, 0x05, 0x35, 0x11, 0x0e, 0x46, 0x57,
	0xb1, 0xa1, 0x33, 0xd4, 0x61, 0x12, 0x25, 0x45, 0x84, 0xb7, 0x8a, 0x01, 0x38, 0x92, 0x31, 0xa0,
	0xb7, 0x82, 0xb7, 0xb4, 0x16, 0xad, 0xba, 0x0d, 0x71, 0x02, 0xaf, 0x4a, 0x4b, 0x42, 0x32, 0xd3,
	0xbc, 0x45, 0x50, 0x79, 0x40, 0x65, 0xed, 0x91, 0x6a, 0x70, 0x9f, 0x27, 0x0e, 0x87, 0xbf, 0xae,
	0xe9, 0x50, 0xf2, 0x89, 0xce, 0xcd, 0x6c, 0x5c, 0xd5, 0xf3, 0xba, 0x1d, 0xf1, 0x5a, 0x0d,
};
__aligned(64) uint8_t aes_256_ofb_256[256] = {
	0x9c, 0x91, 0xa6, 0x3b, 0x1e, 0xeb, 0xf3, 0xe5, 0x84, 0xac, 0xc6, 0x3c, 0x64, 0x05, 0x7d, 0xaa,
	0x98, 0x76, 0x5e, 0x86, 0x3a, 0x32, 0xdd, 0xd6, 0xd6, 0x52, 0xea, 0x54, 0xb8, 0x51, 0xf4, 0x31,
	0x46, 0x07, 0xbc, 0x01, 0x4b, 0x7e, 0xf3, 0x5e, 0x6f, 0xaa, 0x34, 0x85, 0xcd, 0x15, 0x69, 0x58,
	0xd3, 0x4f, 0x82, 0x25, 0x35, 0xf8, 0xbd, 0x26, 0xa1, 0xac, 0xa6, 0x80, 0x3c, 0xd1, 0x85, 0x0b,
	0x3c, 0x1e, 0x85, 0x26, 0xec, 0x35, 0x65, 0x2e, 0x28, 0xc5, 0xbc, 0x03, 0xb9, 0x9d, 0x55, 0x0d,
	0x31, 0x90, 0x2d, 0x96, 0x80, 0x8d, 0x59, 0xab, 0xf9, 0x82, 0xc0, 0x7d, 0x08, 0x03, 0xd1, 0x22,
	0x09, 0x64, 0x09, 0xc8, 0xdc, 0x4b, 0x22, 0x2e, 0x7b, 0x2f, 0xf5, 0xa6, 0x0e, 0xbe, 0x87, 0xa5,
	0x05, 0x29, 0xd3, 0xb2, 0xd7, 0xc6, 0xcf, 0x7e, 0x05, 0x56, 0xc9, 0x49, 0x92, 0x1a, 0xc4, 0xff,
	0xee, 0x48, 0x30, 0xfe, 0x92, 0x1a, 0x76, 0xda, 0x23, 0xde, 0x39, 0x67, 0xc5, 0xe7, 0xad, 0xd3,
	0x9b, 0xbb, 0xcb, 0xb3, 0xa1, 0xc9, 0x2a, 0x92, 0x99, 0x8c, 0x73, 0xd0, 0x46, 0x39, 0xe1, 0x55,
	0x39, 0x5c, 0xbd, 0x25, 0x0e, 0x0d, 0xc4, 0xce, 0x25, 0xaa, 0x6b, 0x25, 0xe1, 0x2a, 0xc4, 0x9e,
	0x4e, 0x47, 0x05, 0x36, 0x41, 0x83, 0x29, 0x0f, 0x9f, 0x11, 0x19, 0x65, 0x28, 0x23, 0x77, 0xc0,
	0x9c, 0x11, 0x83, 0xa6, 0x62, 0xc6, 0x19, 0xb6, 0xf9, 0x72, 0x11, 0x84, 0x6a, 0x92, 0x0b, 0x5d,
	0x91, 0xaf, 0x4f, 0xa4, 0x04, 0xfa, 0x1f, 0x40, 0x4f, 0x42, 0x2b, 0x45, 0x5b, 0x1d, 0x2c, 0x80,
	0x95, 0x64, 0xe8, 0x63, 0x7d, 0xc1, 0x86, 0x16, 0x67, 0x09, 0xcc, 0x3f, 0x2c, 0xa6, 0x86, 0xf4,
	0xe8, 0x13, 0x33, 0x24, 0xd8, 0xed, 0xaa, 0x18, 0x7f, 0xe1, 0x6a, 0xb6, 0x2c, 0x34, 0x64, 0xe5,
};
__aligned(64) uint8_t aes_128_cfb8_13[16] = {
	0x14, 0xec, 0x4f, 0xe3, 0xd5, 0x70, 0x06, 0x70, 0xc6, 0x38, 0x86, 0x10, 0x7b,
};
__aligned(64) uint8_t aes_128_cfb8_16[16] = {
	0x51, 0x70, 0x41, 0xc7, 0xe3, 0x7d, 0x39, 0x04, 0xcc, 0x91, 0x69, 0xc8, 0x1b, 0xd3, 0x98, 0x27,
};
__aligned(64) uint8_t aes_128_cfb8_192[192] = {
	0xa1, 0x00, 0x59, 0x46, 0xcc, 0x27, 0x52, 0x1f, 0x14, 0x01, 0x6b, 0x01, 0x90, 0x11, 0xb9, 0xdb,
	0xbd, 0x61, 0xd2, 0x80, 0xcd, 0x25, 0x29, 0x2a, 0xec, 0xa9, 0xe5, 0x21, 0x4f, 0x42, 0xa8, 0x70,
	0x21, 0x7f, 0x54, 0x25, 0x63, 0xd3, 0xb1, 0xc9, 0x6a, 0x87, 0x31, 0xa2, 0x74, 0x9b, 0x59, 0x12,
	0x14, 0x7f, 0x4c, 0xe5, 0x3e, 0xac, 0x08, 0xfe, 0xa1, 0xda, 0x4b, 0x4a, 0x69, 0x57, 0x27, 0xaf,
	0xf4, 0x59, 0xe6, 0x33, 0xf6, 0x01, 0x72, 0xf7, 0xab, 0x2d, 0xcc, 0x2e, 0xd8, 0xe2, 0x13, 0x4c,
	0x69, 0xbf, 0x96, 0xed, 0x37, 0x97, 0x4a, 0x7b, 0xc8, 0xd6, 0xf0, 0xb8, 0xfd, 0xec, 0xe8, 0x37,
	0x55, 0x6b, 0x69, 0x62, 0xb7, 0x1d, 0xee, 0x6e, 0x21, 0x82, 0x8b, 0x94, 0x31, 0xdc, 0xcf, 0x9a,
	0x0d, 0x04, 0x20, 0x88, 0x89, 0xa5, 0xcc, 0x65, 0x00, 0x58, 0xdd, 0x9e, 0x0c, 0x80, 0xc8, 0x38,
	0x19, 0x9a, 0xa9, 0xff, 0x1d, 0xa1, 0x78, 0x99, 0xc1, 0xb2, 0xc0, 0x03, 0xbd, 0x7a, 0xd7, 0x09,
	0x1b, 0xb9, 0x5e, 0xd3, 0xaa, 0x51, 0x3b, 0x4e, 0xf5, 0x30, 0x63, 0x4e, 0x67, 0xde, 0xf3, 0x54,
	0xc2, 0xb7, 0x85, 0x4e, 0xa6, 0xfe, 0x84, 0x75, 0x77, 0x83, 0x7e, 0x99, 0xae, 0x4f, 0xff, 0xbf,
	0x69, 0xa7, 0xb2, 0xfa, 0x10, 0x2c, 0x6c, 0xbf, 0x35, 0x3f, 0x94, 0x23, 0xd5, 0xeb, 0x0c, 0xe7,
};
__aligned(64) uint8_t aes_128_cfb8_223[224] = {
	0x53, 0x39, 0x92, 0xdd, 0x7f, 0x24, 0x36, 0x55, 0xf9, 0xbe, 0x16, 0x29, 0x98, 0xd8, 0x1b, 0x16,
	0x8a, 0x25, 0xf7, 0x7c, 0x75, 0x87, 0x88, 0x0b, 0x33, 0x0f, 0xce, 0x9c, 0x52, 0x45, 0x2f, 0xc9,
	0xc2, 0xc7, 0x17, 0x7c, 0x9a, 0x8b, 0x91, 0x7f, 0xff, 0xb0, 0xdb, 0xc2, 0x87, 0x69, 0xa5, 0xf1,
	0x00, 0x6f, 0x53, 0x13, 0xd9, 0xa7, 0x12, 0x1c, 0xce, 0x63, 0x05, 0xcf, 0xdd, 0x46, 0xf5, 0xf3,
	0x12, 0xe8, 0xe4, 0x3c, 0x95, 0xb7, 0xc3, 0x3b, 0x85, 0x3f, 0x66, 0xb0, 0xf6, 0x22, 0x69, 0xd3,
	0xf6, 0xb4, 0xc2, 0xbb, 0x50, 0x6b, 0x17, 0x09, 0x18, 0x46, 0xb9, 0x3f, 0xc3, 0x89, 0x66, 0xb4,
	0x4f, 0xf0, 0xc0, 0x4d, 0x1e, 0x7d, 0xbe, 0xcf, 0x3a, 0x92, 0x1d, 0x75, 0x20, 0x83, 0x62, 0xe2,
	0xf5, 0x7e, 0x60, 0x3f, 0x68, 0x8c, 0xe8, 0x2e, 0x07, 0x9b, 0xb8, 0xd1, 0x9f, 0xc9, 0xfa, 0x77,
	0xc9, 0x12, 0x69, 0x67, 0x94, 0x0e, 0xd4, 0x13, 0x11, 0x21, 0xf4, 0xaa, 0x7d, 0xfc, 0x46, 0x89,
	0x68, 0xee, 0x47, 0x3e, 0x4f, 0xeb, 0x95, 0x00, 0x87, 0x46, 0x0c, 0x3f, 0xed, 0xe0, 0x99, 0x9a,
	0x89, 0x5b, 0x7e, 0x21, 0xf1, 0x0f, 0xc3, 0x7d, 0x13, 0x64, 0xf5, 0x76, 0x27, 0xa8, 0xb8, 0xae,
	0x6f, 0x32, 0x2d, 0x9d, 0xe3, 0x1b, 0x11, 0xec, 0x01, 0x7a, 0xe7, 0xf2, 0xd7, 0x35, 0xad, 0x58,
	0xe8, 0x5f, 0x31, 0xda, 0xe3, 0x36, 0x90, 0xc9, 0x6f, 0xe1, 0xaa, 0x90, 0x31, 0x02, 0xb9, 0x9b,
	0xd2, 0x9a, 0xbe, 0x27, 0xae, 0x01, 0x00, 0x72, 0x77, 0x1c, 0xb5, 0xb0, 0xe4, 0x40, 0x85,
};
__aligned(64) uint8_t aes_128_cfb8_256[256] = {
	0xfc, 0x26, 0xdc, 0x94, 0x8b, 0x17, 0xea, 0xd9, 0xfc, 0xf6, 0xd8, 0xb2, 0x64, 0xa1, 0x28, 0x7c,
	0x47, 0x40, 0x65, 0x54, 0xa2, 0x7c, 0xff, 0x27, 0x4e, 0xfd, 0x96, 0x80, 0xb8, 0x95, 0x27, 0xbe,
	0xf9, 0xe7, 0x2b, 0xeb, 0xe0, 0xa4, 0x5d, 0x95, 0xbc, 0xf6, 0x08, 0xc2, 0x7c, 0x1d, 0x5a, 0x81,
	0x37, 0x84, 0xe7, 0xf2, 0xa2, 0x09, 0xa6, 0x52, 0x88, 0x3e, 0xc6, 0x82, 0x7c, 0x72, 0xbb, 0xab,
	0xec, 0xc0, 0x59, 0xe0, 0x7b, 0x13, 0x93, 0x05, 0x91, 0x2f, 0x24, 0xf6, 0x7d, 0x03, 0x50, 0x3a,
	0x53, 0x15, 0xa3, 0x23, 0x3f, 0x9e, 0x53, 0x67, 0xfc, 0xe3, 0xa1, 0x3f, 0xad, 0x2a, 0xc6, 0xf7,
	0xf9, 0xc8, 0x68, 0x1e, 0xeb, 0xca, 0x32, 0xb5, 0xd8, 0xb4, 0x2d, 0x3e, 0xf8, 0x89, 0x91, 0xd5,
	0x08, 0x2c, 0xd2, 0x2e, 0x07, 0xeb, 0x77, 0x04, 0x1e, 0x0c, 0xc1, 0x2f, 0xfd, 0x8a, 0xda, 0x39,
	0xa3, 0x21, 0x9d, 0xbb, 0x36, 0xba, 0x6b, 0x62, 0x58, 0x82, 0x71, 0x91, 0x49, 0x2b, 0x01, 0xf7,
	0x0b, 0x59, 0x84, 0xf7, 0xa7, 0xaa, 0x2f, 0xab, 0xa4, 0xf4, 0x14, 0xb6, 0xc1, 0xb0, 0x2d, 0xef,
	0x06, 0xa9, 0x6d, 0xe2, 0x39, 0x9e, 0x72, 0x09, 0x92, 0xea, 0x6b, 0x50, 0xf7, 0x5f, 0xd1, 0x9c,
	0x5a, 0x87, 0xfe, 0x04, 0xdf, 0xbe, 0x4e, 0xa4, 0xe4, 0xb6, 0x75, 0x4d, 0x6a, 0x97, 0xd3, 0xed,
	0x8e, 0x22, 0xaf, 0xae, 0x9b, 0x61, 0x97, 0x9f, 0xa4, 0xd4, 0x23, 0x6c, 0x5c, 0x8c, 0x5f, 0xe1,
	0x1a, 0xb3, 0x89, 0x37, 0x8e, 0x8b, 0x25, 0x39, 0x48, 0x6e, 0x40, 0xe5, 0xaa, 0x2b, 0xe9, 0x55,
	0xe3, 0x82, 0x1b, 0xb5, 0x7f, 0xff, 0xc7, 0x8c, 0x1c, 0x3d, 0x3c, 0x63, 0x37, 0x39, 0xa6, 0x01,
	0x6c, 0xb2, 0xce, 0x2f, 0xc7, 0x64, 0x26, 0x6f, 0x5b, 0x2e, 0xc3, 0xa7, 0xaf, 0x19, 0x36, 0xd1,
};
__aligned(64) uint8_t aes_192_cfb8_13[16] = {
	0x31, 0x90, 0x53, 0x2c, 0x90, 0xdc, 0x80, 0x14, 0x95, 0x0e, 0x5f, 0xa1, 0xea,
};
__aligned(64) uint8_t aes_192_cfb8_16[16] = {
	0x74, 0x40, 0x0d, 0xcd, 0xe0, 0x83, 0x49, 0x3e, 0xb7, 0xd2, 0x1c, 0x66, 0xa0, 0x54, 0x3f, 0xc3,
};
__aligned(64) uint8_t aes_192_cfb8_192[192] = {
	0x84, 0xbe, 0x91, 0xa7, 0xb6, 0xa9, 0xdd, 0xa0, 0x98, 0x5c, 0x2f, 0x1f, 0xa6, 0x5a, 0x6f, 0x50,
	0x56, 0x71, 0x97, 0xa8, 0x47, 0x08, 0xce, 0x76, 0x9a, 0xcd, 0x9d, 0xbb, 0x81, 0xf7, 0x2f, 0xc8,
	0x37, 0x79, 0x1e, 0x6a, 0x0a, 0x7a, 0xca, 0xfc, 0xff, 0x6f, 0xcb, 0x94, 0x7e, 0x78, 0x33, 0xe2,
	0x88, 0x16, 0x75, 0xe7, 0x42, 0x86, 0x18, 0x0a, 0x6d, 0x44, 0x6a, 0x45, 0x9a, 0x98, 0x12, 0x54,
	0x31, 0x1b, 0x8b, 0xb4, 0x31, 0xcf, 0x44, 0xff, 0x08, 0x2e, 0xf9, 0x52, 0xcc, 0x67, 0x57, 0x54,
	0x86, 0x1b, 0x9d, 0x42, 0x3f, 0x13, 0x9f, 0xaa, 0xa7, 0xd7, 0x1d, 0x46, 0x68, 0xc4, 0xe3, 0x5f,
	0x40, 0xf9, 0x0d, 0x2e, 0x86, 0x3a, 0xcc, 0xc9, 0xb5, 0xf0, 0x23, 0xb2, 0x99, 0x37, 0x9a, 0x2d,
	0x39, 0x54, 0x9b, 0xba, 0x1f, 0x15, 0x29, 0xdf, 0xd5, 0xa4, 0xf2, 0x9a, 0x14, 0xc7, 0x50, 0x4d,
	0x42, 0xf6, 0xba, 0xcd, 0xde, 0x0a, 0xfa, 0x19, 0xfa, 0x82, 0x72, 0xf3, 0x8f, 0x2d, 0x45, 0xb8,
	0x64, 0x71, 0x6f, 0xd1, 0x9e, 0x06, 0xa6, 0x33, 0xbb, 0x7c, 0x02, 0x39, 0xb4, 0x7b, 0xa0, 0xec,
	0x89, 0x91, 0x48, 0xdb, 0x7c, 0xdb, 0x03, 0xca, 0xf8, 0x0f, 0x50, 0xaa, 0x15, 0xfc, 0x52, 0xf1,
	0xbb, 0xe7, 0xcf, 0x84, 0x31, 0x3c, 0xbb, 0x05, 0x6e, 0xbf, 0x44, 0xbe, 0xb7, 0xe5, 0x21, 0x58,
};
__aligned(64) uint8_t aes_192_cfb8_223[224] = {
	0x76, 0x4d, 0xf2, 0xdd, 0x63, 0xb5, 0x4c, 0x04, 0x12, 0x72, 0x33, 0xe1, 0xd5, 0x07, 0xe1, 0x77,
	0xd5, 0xdb, 0xe0, 0x35, 0xe5, 0x2c, 0xb4, 0x12, 0x66, 0x18, 0x89, 0x85, 0xec, 0x19, 0xf0, 0xa0,
	0x61, 0x80, 0x96, 0xfb, 0x46, 0xb8, 0xcf, 0xdd, 0x9f, 0x91, 0x27, 0x2d, 0x70, 0x29, 0x66, 0x71,
	0x2a, 0x43, 0x9f, 0xc4, 0x40, 0x6b, 0x74, 0x9a, 0x72, 0xac, 0xc0, 0x3b, 0xd3, 0x27, 0x32, 0x47,
	0x7c, 0xd2, 0x6a, 0x1f, 0x63, 0x98, 0xa1, 0xfd, 0x4f, 0x40, 0xc8, 0xb3, 0xdf, 0x86, 0xf5, 0x55,
	0xf7, 0x69, 0xc1, 0xc6, 0x59, 0x36, 0xed, 0xd6, 0x5d, 0x69, 0x9f, 0x73, 0x86, 0xed, 0xa1, 0x1a,
	0xe8, 0xaa, 0xc1, 0xd6, 0x7a, 0xe2, 0x94, 0x38, 0xa3, 0x28, 0x00, 0x4d, 0x7e, 0x63, 0x27, 0xa9,
	0x60, 0x9f, 0x68, 0x04, 0xf0, 0x80, 0x53, 0xa8, 0xdd, 0x77, 0x36, 0x99, 0x0a, 0x36, 0x88, 0x9b,
	0x3a, 0xb1, 0xbd, 0x76, 0xae, 0xf6, 0x57, 0x9d, 0xcf, 0xc5, 0x4b, 0xa2, 0x1b, 0x09, 0x3b, 0x63,
	0x3a, 0x04, 0x2f, 0x63, 0xe9, 0x41, 0xac, 0x4f, 0x01, 0x95, 0xfa, 0x8d, 0xe3, 0xe4, 0x99, 0x20,
	0x24, 0x68, 0xad, 0xdb, 0xe1, 0x14, 0x84, 0xc0, 0x80, 0x4a, 0x96, 0xb2, 0x1e, 0x5f, 0x1a, 0xa6,
	0x27, 0xe6, 0x0c, 0xc3, 0x88, 0x87, 0x45, 0x98, 0xf8, 0x20, 0xe4, 0x3f, 0xf9, 0x82, 0x27, 0x70,
	0x73, 0x43, 0x9e, 0x45, 0x03, 0xc8, 0x55, 0x0c, 0x9f, 0xf7, 0x37, 0xcc, 0x00, 0x05, 0xad, 0x29,
	0xa7, 0xdf, 0x3c, 0x7f, 0xdc, 0xbd, 0x8c, 0x4f, 0xa2, 0xa3, 0x86, 0xfc, 0xd9, 0xdd, 0x06,
};
__aligned(64) uint8_t aes_192_cfb8_256[256] = {
	0xd9, 0xfc, 0x36, 0xd2, 0xc5, 0x9e, 0x99, 0x66, 0x75, 0x99, 0xaa, 0x10, 0x3f, 0xf0, 0x20, 0xc0,
	0x5a, 0x49, 0x8b, 0x96, 0x7d, 0x4d, 0xb7, 0xf6, 0x97, 0x48, 0x08, 0x08, 0xab, 0x3f, 0x41, 0x9e,
	0xd5, 0x1a, 0x17, 0xf1, 0x98, 0x84, 0x09, 0xb0, 0x88, 0xcd, 0x87, 0xa3, 0x51, 0x1a, 0xfb, 0x0c,
	0xb0, 0x13, 0xe2, 0x77, 0xb7, 0x57, 0x9b, 0x08, 0xd4, 0x17, 0x57, 0x3e, 0xa6, 0x88, 0xbd, 0x56,
	0xac, 0x70, 0xd2, 0xf7, 0x5f, 0x76, 0x4a, 0x08, 0xda, 0xea, 0x14, 0xe8, 0x2a, 0xe1, 0x95, 0xea,
	0x3c, 0x50, 0xe8, 0x5b, 0x5f, 0x0d, 0x0c, 0x33, 0xf5, 0xf4, 0x80, 0x13, 0x22, 0xa3, 0x75, 0xe2,
	0x80, 0xb9, 0xfd, 0x30, 0xb8, 0x57, 0xa8, 0xe4, 0x2e, 0x18, 0xb5, 0x7a, 0x0b, 0xfe, 0x51, 0x05,
	0x43, 0xec, 0x8c, 0x8e, 0xbc, 0x21, 0xd3, 0x28, 0x9d, 0x7d, 0x15, 0x2e, 0xc2, 0xd5, 0xdb, 0xc7,
	0x1c, 0x49, 0x0c, 0x2c, 0x07, 0x3c, 0x38, 0xde, 0x0a, 0xde, 0x12, 0xcb, 0xfe, 0x48, 0x94, 0x3e,
	0x6b, 0xcd, 0x1b, 0x19, 0xaf, 0x75, 0x65, 0x96, 0x37, 0x79, 0xd1, 0xf3, 0x05, 0x9c, 0x86, 0x92,
	0x12, 0x5b, 0x1a, 0x60, 0x6d, 0x0f, 0xaf, 0x09, 0xac, 0xef, 0x3f, 0xc6, 0x39, 0xad, 0xc3, 0x78,
	0xf5, 0xf7, 0x45, 0x7d, 0x00, 0xfa, 0xb1, 0x4e, 0xed, 0xce, 0x39, 0x49, 0xeb, 0x39, 0x7c, 0x59,
	0xd9, 0xfc, 0x24, 0x94, 0x38, 0xa2, 0x8e, 0xd0, 0xae, 0x87, 0x6b, 0x07, 0x59, 0x3f, 0xe6, 0x38,
	0xa3, 0xb3, 0xa7, 0x19, 0x16, 0x76, 0x2c, 0xae, 0x2c, 0x02, 0x07, 0xea, 0x0e, 0xc8, 0x01, 0x66,
	0x2c, 0xd9, 0xbd, 0x9e, 0x0e, 0xfe, 0x86, 0xff, 0x90, 0x66, 0xb2, 0x93, 0x92, 0x8a, 0x2a, 0x79,
	0x12, 0x14, 0x78, 0x54, 0x2f, 0x62, 0xe1, 0x5a, 0x27, 0x60, 0xb7, 0x9d, 0x71, 0x02, 0x04, 0x84,
};
__aligned(64) uint8_t aes_256_cfb8_13[16] = {
	0x74, 0xb7, 0xd3, 0x47, 0x6f, 0xaf, 0xd6, 0xb9, 0xd7, 0x09, 0xa1, 0xe7, 0x6f,
};
__aligned(64) uint8_t aes_256_cfb8_16[16] = {
	0x31, 0x4e, 0xe7, 0x63, 0xfe, 0x58, 0xa3, 0xb9, 0x85, 0x10, 0x0a, 0x5c, 0x0f, 0x27, 0x41, 0x1d,
};
__aligned(64) uint8_t aes_256_cfb8_192[192] = {
	0xc1, 0xdf, 0xf6, 0x08, 0x73, 0x23, 0x36, 0xb3, 0xf0, 0x60, 0x4c, 0x5a, 0x6a, 0xb6, 0xdc, 0x1d,
	0xbf, 0xa2, 0x09, 0xd3, 0x8c, 0x6c, 0x5b, 0x54, 0xbb, 0x84, 0xdb, 0xb0, 0xdb, 0xfc, 0x64, 0x5c,
	0xe4, 0xf1, 0xbb, 0x72, 0x4f, 0x1c, 0xf9, 0x54, 0xfb, 0xcd, 0x7f, 0xe9, 0x75, 0x2c, 0xc6, 0x30,
	0x55, 0xbd, 0x5b, 0xa9, 0x30, 0x70, 0xb1, 0x62, 0xbc, 0xb9, 0x9c, 0x17, 0x2f, 0xff, 0x09, 0x4b,
	0xf9, 0xe5, 0x37, 0x77, 0x94, 0x33, 0x86, 0x9e, 0xaa, 0xdc, 0x8e, 0x9f, 0xf0, 0x82, 0x49, 0x10,
	0x94, 0x99, 0x41, 0x62, 0x06, 0x50, 0xc5, 0xec, 0x07, 0x33, 0xbd, 0x2a, 0xf8, 0xe2, 0x78, 0x90,
	0x14, 0x32, 0x48, 0x36, 0x6c, 0xa3, 0x3f, 0x57, 0xff, 0x51, 0xd9, 0x15, 0x3a, 0xe3, 0xda, 0x09,
	0x07, 0x13, 0x5e, 0x3a, 0xf3, 0x80, 0xce, 0x7e, 0xc2, 0xe7, 0x35, 0x18, 0x09, 0xd5, 0xe3, 0x3a,
	0xa5, 0x30, 0x02, 0x69, 0xb9, 0x6a, 0xee, 0x6a, 0xa6, 0xa4, 0x4c, 0x3e, 0xa1, 0xd7, 0x76, 0x57,
	0xb1, 0xfe, 0x47, 0x69, 0x0f, 0x30, 0xae, 0x0c, 0xab, 0x7e, 0x96, 0x2d, 0xe6, 0x99, 0x9c, 0x32,
	0x94, 0xb1, 0x48, 0xda, 0x9f, 0x73, 0xc3, 0x79, 0xea, 0x3f, 0x73, 0xa3, 0x35, 0xcd, 0x5f, 0xf9,
	0xcf, 0xef, 0x88, 0x06, 0x43, 0x49, 0xb8, 0x2a, 0x6a, 0x8a, 0xb7, 0x9d, 0xad, 0xa9, 0xc6, 0xcf,
};
__aligned(64) uint8_t aes_256_cfb8_223[224] = {
	0x33, 0x18, 0x60, 0xfd, 0xf6, 0xcc, 0x2c, 0x04, 0x00, 0xa0, 0x36, 0x58, 0x29, 0x97, 0x0e, 0xd8,
	0xc9, 0xc4, 0x4c, 0x96, 0xc7, 0x36, 0x4b, 0xab, 0x19, 0xa1, 0x60, 0x46, 0xa1, 0x6f, 0x15, 0xd5,
	0x54, 0xcb, 0x46, 0x63, 0x3f, 0x05, 0x1b, 0xe7, 0xb8, 0xdb, 0xab, 0x12, 0x65, 0xdb, 0x9e, 0x9d,
	0x28, 0xe8, 0x3b, 0xf0, 0x4a, 0xdc, 0x56, 0x93, 0x26, 0x0c, 0x31, 0xe5, 0x21, 0x2f, 0x77, 0x8a,
	0x1c, 0x7f, 0xfc, 0x27, 0x3e, 0x7f, 0xc7, 0xc6, 0x7f, 0x00, 0x6d, 0x4f, 0x11, 0x5e, 0x74, 0x42,
	0xbb, 0x75, 0xc7, 0xd7, 0x2c, 0x52, 0xee, 0x49, 0x58, 0x17, 0x73, 0x0f, 0x25, 0xcd, 0xae, 0x73,
	0x40, 0x9e, 0x31, 0x24, 0x0c, 0xe8, 0xa9, 0xda, 0x66, 0x40, 0x27, 0x75, 0x83, 0xb1, 0x7b, 0xd7,
	0x8b, 0x13, 0xf1, 0x1c, 0x92, 0x13, 0xa4, 0xe8, 0x0b, 0x86, 0x05, 0x4c, 0xef, 0x49, 0x24, 0x0f,
	0x03, 0xc7, 0x87, 0x0f, 0x25, 0x83, 0x05, 0x53, 0x8a, 0x75, 0x12, 0x71, 0xc6, 0x35, 0xa0, 0xc8,
	0x7b, 0xe6, 0xc4, 0x81, 0x43, 0xa8, 0x48, 0xa4, 0xd7, 0x87, 0x98, 0xb8, 0xf3, 0xb2, 0xbe, 0x49,
	0x9a, 0x98, 0x17, 0xf5, 0xf4, 0x76, 0xde, 0x5b, 0x6a, 0xaa, 0x32, 0xe9, 0x6d, 0x69, 0xe2, 0x6e,
	0x24, 0x06, 0x98, 0xc7, 0xce, 0x16, 0xc9, 0x7a, 0x6e, 0xe8, 0xec, 0xbd, 0xcd, 0xe5, 0xd1, 0x78,
	0xad, 0xac, 0x06, 0x7f, 0x75, 0xeb, 0x33, 0xdb, 0x1e, 0x2c, 0x07, 0xc8, 0xcb, 0xc5, 0x84, 0x7e,
	0x2e, 0x3e, 0x16, 0x96, 0x2e, 0xca, 0x20, 0xb6, 0xf5, 0x54, 0x76, 0x97, 0xb2, 0xd8, 0x61,
};
__aligned(64) uint8_t aes_256_cfb8_256[256] = {
	0x9c, 0xff, 0x0f, 0x52, 0x3e, 0xa2, 0x76, 0x5f, 0x96, 0x4c, 0x35, 0x93, 0x8f, 0x86, 0x43, 0xf0,
	0x0f, 0x06, 0x3d, 0x2c, 0x24, 0x45, 0x17, 0x6a, 0x3a, 0xca, 0xad, 0xd6, 0xcd, 0x58, 0x6e, 0x04,
	0x90, 0x9c, 0x5f, 0x95, 0xe7, 0xb0, 0x4c, 0xd5, 0xed, 0xff, 0x47, 0x6e, 0x67, 0x45, 0x0d, 0x62,
	0x7c, 0x5c, 0xe8, 0x41, 0xc1, 0x4c, 0xef, 0x0b, 0x83, 0x1a, 0x7c, 0x62, 0x60, 0x15, 0x9e, 0xaa,
	0xa9, 0xb7, 0xf3, 0x7c, 0x5e, 0x0a, 0x16, 0x27, 0xee, 0x58, 0x15, 0xfe, 0xd1, 0xb7, 0x89, 0x8f,
	0x20, 0x8f, 0x35, 0xd8, 0x6f, 0x62, 0x3b, 0x2f, 0x22, 0xc6, 0x8c, 0x24, 0x86, 0x4a, 0x45, 0x95,
	0xd9, 0xa6, 0xad, 0x16, 0xda, 0xae, 0xf5, 0x92, 0x3f, 0xb9, 0xb4, 0x81, 0x7b, 0xc7, 0xa2, 0xc8,
	0xfa, 0xaa, 0x69, 0x49, 0x75, 0xa0, 0xfa, 0x48, 0x7a, 0x2f, 0x60, 0x3b, 0x03, 0x52, 0xe0, 0x17,
	0x18, 0xa0, 0xe0, 0x8c, 0x7d, 0xfc, 0xa1, 0xd3, 0xd5, 0x6b, 0xee, 0xa4, 0x0d, 0x5e, 0x1a, 0x4d,
	0x81, 0x5d, 0x03, 0x6b, 0x28, 0xd4, 0xb7, 0xf6, 0xc6, 0xe6, 0x5b, 0xb7, 0x9c, 0x29, 0x76, 0xa0,
	0x51, 0x60, 0xfa, 0x92, 0xb6, 0xed, 0x0c, 0x06, 0xba, 0xc3, 0x03, 0x01, 0x06, 0x20, 0x72, 0x70,
	0xac, 0x35, 0x54, 0x1f, 0xdb, 0x25, 0x2e, 0x36, 0x4d, 0xe7, 0x49, 0x95, 0x83, 0x3b, 0x65, 0x9b,
	0x49, 0xf1, 0x4e, 0x07, 0x72, 0x5f, 0x62, 0xe0, 0xb6, 0x98, 0x3a, 0x1d, 0x9b, 0xf5, 0x21, 0xbc,
	0x83, 0x62, 0x27, 0x8f, 0xd3, 0x10, 0xcf, 0x34, 0x41, 0x28, 0x70, 0xef, 0x58, 0x7e, 0x67, 0x70,
	0x26, 0xb8, 0x26, 0x53, 0x0b, 0x08, 0x3d, 0x21, 0x20, 0x84, 0x50, 0xb2, 0xed, 0x18, 0x65, 0x30,
	0xdd, 0x50, 0x1e, 0x67, 0xf2, 0xac, 0x4b, 0x2e, 0x96, 0x54, 0x59, 0xa8, 0xa0, 0x2a, 0x49, 0x5f,
};
__aligned(64) uint8_t *aes_src[5] = {aes_src_13, aes_src_16, aes_src_192, aes_src_223, aes_src_256,};
__aligned(64) uint32_t aes_src_len[5] = {13, 16, 192, 223, 256};
__aligned(64) uint8_t *aes_key[3] = {aes_key_128, aes_key_192, aes_key_256,};
__aligned(64) uint32_t aes_key_len[3] = {16, 24, 32};
__aligned(64) uint8_t *aes_ecb[3][5] = {
	aes_128_ecb_13, aes_128_ecb_16, aes_128_ecb_192, aes_128_ecb_223, aes_128_ecb_256,
	aes_192_ecb_13, aes_192_ecb_16, aes_192_ecb_192, aes_192_ecb_223, aes_192_ecb_256,
	aes_256_ecb_13, aes_256_ecb_16, aes_256_ecb_192, aes_256_ecb_223, aes_256_ecb_256,
};
__aligned(64) uint8_t *aes_cbc[3][5] = {
	aes_128_cbc_13, aes_128_cbc_16, aes_128_cbc_192, aes_128_cbc_223, aes_128_cbc_256,
	aes_192_cbc_13, aes_192_cbc_16, aes_192_cbc_192, aes_192_cbc_223, aes_192_cbc_256,
	aes_256_cbc_13, aes_256_cbc_16, aes_256_cbc_192, aes_256_cbc_223, aes_256_cbc_256,
};
__aligned(64) uint8_t *aes_ctr[3][5] = {
	aes_128_ctr_13, aes_128_ctr_16, aes_128_ctr_192, aes_128_ctr_223, aes_128_ctr_256,
	aes_192_ctr_13, aes_192_ctr_16, aes_192_ctr_192, aes_192_ctr_223, aes_192_ctr_256,
	aes_256_ctr_13, aes_256_ctr_16, aes_256_ctr_192, aes_256_ctr_223, aes_256_ctr_256,
};
__aligned(64) uint8_t *aes_ofb[3][5] = {
	aes_128_ofb_13, aes_128_ofb_16, aes_128_ofb_192, aes_128_ofb_223, aes_128_ofb_256,
	aes_192_ofb_13, aes_192_ofb_16, aes_192_ofb_192, aes_192_ofb_223, aes_192_ofb_256,
	aes_256_ofb_13, aes_256_ofb_16, aes_256_ofb_192, aes_256_ofb_223, aes_256_ofb_256,
};
__aligned(64) uint8_t *aes_cfb8[3][5] = {
	aes_128_cfb8_13, aes_128_cfb8_16, aes_128_cfb8_192, aes_128_cfb8_223, aes_128_cfb8_256,
	aes_192_cfb8_13, aes_192_cfb8_16, aes_192_cfb8_192, aes_192_cfb8_223, aes_192_cfb8_256,
	aes_256_cfb8_13, aes_256_cfb8_16, aes_256_cfb8_192, aes_256_cfb8_223, aes_256_cfb8_256,
};
/* aes test array end */


/* hash test array begin */
__aligned(64) uint8_t hash_src_50[64] = {
	0xe6, 0x4f, 0x64, 0x38, 0xe2, 0x5c, 0x76, 0xad, 0x1c, 0x51, 0xd8, 0xee, 0x15, 0xab, 0x1a, 0xd8,
	0x08, 0x86, 0x03, 0xe1, 0x34, 0xce, 0xc0, 0x2e, 0x46, 0xe3, 0xa9, 0x58, 0x97, 0x5e, 0x06, 0xe3,
	0x1a, 0xa9, 0x17, 0x4d, 0xcd, 0xa4, 0x31, 0x28, 0xd0, 0xc9, 0xc3, 0x9f, 0x30, 0x0d, 0x65, 0xf9,
	0x9f, 0x4c,
};
__aligned(64) uint8_t hash_md5_50[MD5_DIGEST_SIZE] = {
	0x79, 0x15, 0xe3, 0x66, 0xd7, 0x24, 0x4b, 0x5c, 0xe2, 0xc0, 0x1d, 0x64, 0x3b, 0x63, 0x6d, 0x91,
};
__aligned(64) uint8_t hash_src_124[128] = {
	0x8c, 0x86, 0x6d, 0x72, 0x22, 0xbe, 0x72, 0x98, 0x5b, 0xb5, 0x4a, 0x8a, 0x11, 0x54, 0x5e, 0x74,
	0x97, 0xd6, 0x64, 0x4a, 0x65, 0x73, 0x84, 0x3d, 0x31, 0x3a, 0xe8, 0xc0, 0xdc, 0x6f, 0xde, 0x89,
	0x6b, 0xf4, 0x7b, 0xb0, 0x06, 0x01, 0xaf, 0x73, 0x35, 0xfc, 0xe9, 0x4a, 0x33, 0x4a, 0x28, 0xa5,
	0xd5, 0xa2, 0x6e, 0x30, 0x4b, 0x14, 0xa4, 0x3b, 0x6b, 0x0a, 0xf4, 0x94, 0x4f, 0xeb, 0x91, 0x53,
	0xa5, 0xc6, 0xb6, 0x5c, 0x8b, 0x17, 0xc9, 0x1f, 0x3e, 0x1d, 0xcf, 0xb1, 0x87, 0x0e, 0x1a, 0x9f,
	0x7a, 0x0e, 0x8c, 0x5d, 0x41, 0xaa, 0x40, 0x15, 0x7d, 0x60, 0x21, 0xba, 0x9d, 0xeb, 0x96, 0xea,
	0x21, 0x40, 0x89, 0xc7, 0x06, 0x5e, 0x1a, 0x8c, 0x77, 0x1d, 0x63, 0x0b, 0xc0, 0x9d, 0x75, 0x46,
	0x47, 0x8d, 0x22, 0xb4, 0xb1, 0x1b, 0x9b, 0x2d, 0xeb, 0xcc, 0x2d, 0x42,
};
__aligned(64) uint8_t hash_md5_124[MD5_DIGEST_SIZE] = {
	0xf0, 0xa2, 0x13, 0xb1, 0x90, 0x6a, 0x1a, 0x42, 0xc5, 0xe4, 0x18, 0x41, 0x61, 0x93, 0xab, 0xf7,
};
__aligned(64) uint8_t hash_src_255[256] = {
	0xd5, 0x7f, 0xed, 0xd4, 0xa6, 0x54, 0x6a, 0x48, 0x79, 0x0c, 0xae, 0x25, 0x4c, 0x6a, 0xaf, 0xf8,
	0xf9, 0x38, 0x84, 0xb6, 0x36, 0x1b, 0xac, 0x96, 0x07, 0x2b, 0x66, 0x43, 0x24, 0x90, 0x3e, 0x20,
	0x7b, 0x27, 0x04, 0x4b, 0x4c, 0x11, 0x5a, 0xb2, 0xae, 0x2a, 0x5a, 0x4d, 0xc4, 0xd9, 0x33, 0x7c,
	0x40, 0xdb, 0x38, 0x29, 0xd4, 0x61, 0x4b, 0x33, 0xbc, 0x0b, 0xd7, 0xb7, 0x84, 0xfb, 0xf2, 0xa0,
	0xfc, 0xed, 0x9d, 0xd4, 0xe6, 0x42, 0xc6, 0xb8, 0xe3, 0xf3, 0x13, 0x33, 0xc1, 0x2d, 0x55, 0x54,
	0xe5, 0x3b, 0x3a, 0x12, 0x88, 0xd8, 0x24, 0x87, 0x96, 0xc1, 0x5c, 0x49, 0x47, 0x1b, 0x35, 0xf8,
	0xb0, 0x3a, 0x85, 0x53, 0xf3, 0x27, 0x3a, 0xd6, 0xb7, 0xf7, 0xbd, 0x1d, 0x80, 0xed, 0xd1, 0x6f,
	0x1f, 0x0f, 0x9f, 0xa8, 0x1b, 0x31, 0xaa, 0x65, 0xea, 0x90, 0x78, 0x82, 0x35, 0x88, 0x83, 0x17,
	0x72, 0x20, 0x24, 0x62, 0x29, 0xc6, 0x1c, 0x40, 0x8c, 0x71, 0xb7, 0xe1, 0x30, 0xe2, 0x1e, 0x6b,
	0xe7, 0xf1, 0x11, 0x33, 0x10, 0x0e, 0x19, 0x41, 0xfe, 0xfd, 0xe6, 0x05, 0xe6, 0xbe, 0x74, 0x7e,
	0x05, 0x3d, 0x02, 0xa0, 0x0b, 0x09, 0x1d, 0x79, 0x21, 0x01, 0xb1, 0x01, 0x9c, 0x1c, 0xe4, 0x34,
	0x2a, 0x5d, 0xb7, 0x89, 0x37, 0xce, 0xdf, 0xa7, 0xd5, 0x05, 0x35, 0x65, 0x5b, 0x89, 0x2f, 0xd6,
	0x12, 0xad, 0x73, 0x9a, 0x57, 0x36, 0xb3, 0x85, 0x30, 0xd1, 0x2a, 0x4f, 0xea, 0xf2, 0x8a, 0x88,
	0x7d, 0x08, 0x59, 0x48, 0x28, 0x71, 0x9f, 0x6a, 0x9e, 0x49, 0x19, 0xa2, 0x1a, 0x6f, 0x8c, 0x27,
	0xbe, 0xa0, 0xd7, 0x89, 0x3a, 0x12, 0x16, 0x4b, 0xfc, 0x56, 0x1a, 0x0e, 0xe4, 0xdb, 0xf8, 0x54,
	0x45, 0x7c, 0x77, 0x05, 0xc0, 0xea, 0xf5, 0x1b, 0xdd, 0x48, 0xa4, 0xcb, 0x4a, 0x75, 0xed,
};
__aligned(64) uint8_t hash_md5_255[MD5_DIGEST_SIZE] = {
	0x56, 0xb8, 0x04, 0xf6, 0x28, 0x2b, 0x07, 0xcf, 0xec, 0x17, 0xcd, 0x7b, 0xd7, 0x84, 0xbb, 0x37,
};
__aligned(64) uint8_t hash_src_512[512] = {
	0xdb, 0x1a, 0x87, 0x6c, 0x83, 0x94, 0xa3, 0x7e, 0xac, 0xc9, 0x55, 0x00, 0x9c, 0xf9, 0x18, 0x7f,
	0xed, 0x62, 0x0e, 0x11, 0xff, 0xaa, 0x8b, 0xf5, 0xad, 0x43, 0x7c, 0x1d, 0xd8, 0x11, 0x77, 0xca,
	0x19, 0x46, 0x06, 0x71, 0x96, 0x04, 0x5c, 0x9d, 0xfe, 0xdd, 0x3b, 0x92, 0x67, 0x6e, 0xbe, 0x04,
	0x02, 0x12, 0x26, 0x8a, 0x7e, 0x6e, 0x22, 0x5b, 0xd8, 0x92, 0xcd, 0xe6, 0x1d, 0xc1, 0xbe, 0xe1,
	0x25, 0x86, 0xd0, 0x57, 0xda, 0xfc, 0x04, 0xf0, 0x4f, 0x1a, 0x59, 0xe4, 0x1a, 0xa9, 0xa8, 0x23,
	0x07, 0xee, 0x72, 0x81, 0x30, 0x96, 0x7d, 0x7f, 0xed, 0xa9, 0x0c, 0xcc, 0x41, 0xd7, 0xae, 0x74,
	0x2c, 0xad, 0x56, 0xc6, 0x31, 0xfd, 0x23, 0x1d, 0x20, 0x61, 0x78, 0xb2, 0x8c, 0x04, 0x40, 0x1d,
	0x51, 0x81, 0xe5, 0x13, 0xab, 0xba, 0x64, 0x05, 0xb4, 0x7a, 0xbb, 0x6f, 0xdb, 0xfd, 0xf6, 0x57,
	0xb8, 0x46, 0x89, 0xc8, 0x69, 0x86, 0x52, 0xff, 0x2c, 0x66, 0x6b, 0x6d, 0xd3, 0x39, 0x30, 0x91,
	0x3c, 0x38, 0x80, 0x53, 0xff, 0x33, 0x06, 0x65, 0x68, 0x0f, 0xc4, 0xc3, 0xa7, 0x78, 0xf4, 0xf6,
	0xff, 0xb2, 0xe4, 0x6e, 0xd9, 0x35, 0x40, 0x4f, 0x75, 0xf1, 0x37, 0x34, 0xc2, 0xab, 0x37, 0xd4,
	0xb8, 0x42, 0x11, 0x2d, 0xe1, 0x4d, 0x00, 0xa9, 0xdd, 0x67, 0xa2, 0xd3, 0xb3, 0x3b, 0x88, 0x8e,
	0xad, 0xac, 0x57, 0x8a, 0xd7, 0x40, 0xc1, 0xe2, 0xc4, 0xfb, 0x22, 0xab, 0x66, 0x30, 0xe8, 0x04,
	0x32, 0x68, 0x21, 0xb4, 0x87, 0x57, 0xcd, 0xc5, 0x5f, 0x3c, 0x29, 0x63, 0x34, 0x1e, 0x1d, 0x14,
	0xb1, 0x1a, 0x5f, 0x8d, 0x6c, 0xb9, 0xb3, 0x6c, 0x0d, 0x7b, 0xf8, 0x8d, 0xea, 0xaa, 0x47, 0x43,
	0x1e, 0xaf, 0xd2, 0xdd, 0x5a, 0x42, 0x3c, 0xa3, 0xd7, 0xf5, 0xd8, 0x09, 0x68, 0x0f, 0x3a, 0xcd,
	0xf7, 0x39, 0x71, 0x25, 0x7a, 0xf2, 0xdb, 0x89, 0x27, 0xe2, 0x6c, 0x29, 0x7f, 0x10, 0xf6, 0xb3,
	0x68, 0x4b, 0x10, 0x7f, 0x84, 0x6e, 0x0c, 0x5e, 0x0e, 0x6c, 0x25, 0x37, 0xdf, 0xe2, 0x0a, 0xb4,
	0xf5, 0xf8, 0x1b, 0x71, 0xcc, 0x84, 0x70, 0x1e, 0x77, 0x3f, 0xda, 0x37, 0x55, 0xa3, 0x0d, 0xa6,
	0x34, 0x47, 0x74, 0x39, 0x59, 0xc3, 0xbd, 0xd8, 0xb2, 0x80, 0xfb, 0xfe, 0x7f, 0x30, 0x99, 0x60,
	0x18, 0xaa, 0xdf, 0xbe, 0x79, 0xa7, 0x41, 0x56, 0x15, 0xc0, 0xb0, 0x4a, 0xd4, 0xa4, 0x1f, 0xf6,
	0x46, 0x69, 0xed, 0x4e, 0x5d, 0x1b, 0x2c, 0x07, 0xf3, 0x2a, 0x76, 0x7c, 0xfb, 0xf2, 0x6c, 0x78,
	0xf6, 0xa8, 0xa7, 0xbd, 0x19, 0xaf, 0x3d, 0x21, 0xbe, 0x0a, 0x72, 0xf1, 0xb0, 0xc3, 0xe1, 0xfd,
	0x06, 0x68, 0xed, 0xe3, 0xf3, 0x9b, 0x02, 0xbc, 0x23, 0x58, 0x33, 0x66, 0xed, 0xc4, 0xcc, 0xb8,
	0x9c, 0x06, 0x50, 0xc2, 0x4f, 0xe2, 0x9b, 0x25, 0x09, 0xdf, 0x5c, 0x8b, 0x81, 0x82, 0xc1, 0x27,
	0xb6, 0x77, 0x2f, 0x00, 0x81, 0xae, 0xfa, 0xc2, 0x8a, 0x0e, 0xfd, 0x03, 0x63, 0xc8, 0xe1, 0x23,
	0x68, 0x74, 0xea, 0xad, 0x59, 0x65, 0x96, 0xcc, 0x04, 0x46, 0x56, 0x2b, 0x12, 0xb8, 0x15, 0xaf,
	0x2a, 0x3a, 0x89, 0xa6, 0xe4, 0xbf, 0xab, 0x06, 0x4d, 0xae, 0x44, 0xbb, 0xa4, 0xf4, 0x0f, 0xa8,
	0xd1, 0x67, 0x95, 0x40, 0x3b, 0x0e, 0x40, 0xbd, 0x70, 0x15, 0x52, 0xdb, 0x3c, 0x2b, 0xfa, 0x21,
	0x69, 0xb9, 0x61, 0xe0, 0xd9, 0x2e, 0x1e, 0x41, 0xd7, 0x7e, 0x9c, 0x14, 0xa3, 0x06, 0x4d, 0xf8,
	0x2d, 0x0f, 0xf9, 0xed, 0x50, 0x4c, 0x3d, 0xf0, 0x02, 0xf4, 0x3a, 0x5c, 0xf3, 0x0b, 0x10, 0xac,
	0xb6, 0x06, 0xc7, 0x87, 0xd6, 0x98, 0x4b, 0x00, 0x02, 0x27, 0xf5, 0x10, 0x58, 0x0c, 0x0a, 0xf7,
};
__aligned(64) uint8_t hash_md5_512[MD5_DIGEST_SIZE] = {
	0x30, 0x6c, 0x00, 0x61, 0x03, 0xd4, 0xf6, 0xad, 0x6d, 0xb1, 0x49, 0x1a, 0x55, 0x04, 0x7e, 0xc7,
};
__aligned(64) uint8_t hash_sha1_50[SHA1_DIGEST_SIZE] = {
	0x5e, 0x8d, 0x10, 0xa4, 0xa9, 0xfd, 0x7f, 0x67, 0xeb, 0x79, 0xb8, 0x17, 0x5b, 0xd9, 0x5d, 0x6a,
	0x5f, 0x63, 0xc7, 0xb6,
};
__aligned(64) uint8_t hash_sha1_124[SHA1_DIGEST_SIZE] = {
	0x1e, 0xe7, 0xc4, 0x12, 0x7d, 0x3a, 0x84, 0x6e, 0x5a, 0xc2, 0x20, 0xa5, 0x96, 0x19, 0xce, 0xb2,
	0x65, 0x63, 0xa2, 0x19,
};
__aligned(64) uint8_t hash_sha1_255[SHA1_DIGEST_SIZE] = {
	0xfe, 0xe8, 0x4d, 0x57, 0x77, 0xbb, 0xbb, 0x62, 0x41, 0x6d, 0x0b, 0xb2, 0x52, 0x8f, 0x88, 0xef,
	0x99, 0x7c, 0x33, 0xb5,
};
__aligned(64) uint8_t hash_sha1_512[SHA1_DIGEST_SIZE] = {
	0xd6, 0x42, 0x7c, 0xed, 0x13, 0x84, 0xad, 0xea, 0x22, 0x85, 0x5e, 0xdc, 0xb9, 0x0d, 0x83, 0x38,
	0x06, 0xbe, 0xb7, 0x04,
};
__aligned(64) uint8_t hash_sha224_50[SHA224_DIGEST_SIZE] = {
	0x1c, 0xc4, 0xbf, 0x25, 0xdc, 0x87, 0xff, 0x42, 0x67, 0xc2, 0x2f, 0x9a, 0x39, 0xd4, 0x87, 0x35,
	0x14, 0xbb, 0xbf, 0xdb, 0x74, 0xc5, 0xa9, 0x51, 0x5b, 0x91, 0x2b, 0xf2,
};
__aligned(64) uint8_t hash_sha224_124[SHA224_DIGEST_SIZE] = {
	0xba, 0xcc, 0xea, 0x2f, 0x59, 0xed, 0xe7, 0xca, 0xfa, 0x41, 0x90, 0xf7, 0xad, 0x56, 0xda, 0xb6,
	0x95, 0x20, 0x28, 0x04, 0x9a, 0xea, 0xed, 0xc3, 0x77, 0xaf, 0x8c, 0xf0,
};
__aligned(64) uint8_t hash_sha224_255[SHA224_DIGEST_SIZE] = {
	0x83, 0xf7, 0x61, 0x78, 0x83, 0x12, 0xb4, 0x62, 0x8d, 0x47, 0xc6, 0x36, 0x2c, 0x1b, 0x00, 0xa3,
	0x23, 0xd0, 0x1b, 0xc1, 0x03, 0x51, 0x3b, 0x96, 0x7f, 0x49, 0xa8, 0xa7,
};
__aligned(64) uint8_t hash_sha224_512[SHA224_DIGEST_SIZE] = {
	0xdc, 0x8a, 0xce, 0x77, 0x78, 0x96, 0xfc, 0xee, 0x8c, 0xbb, 0x8c, 0x72, 0x26, 0x8c, 0x63, 0xa9,
	0x85, 0xbe, 0xac, 0x12, 0xfc, 0xb6, 0x35, 0xdd, 0x55, 0x28, 0xeb, 0xc0,
};
__aligned(64) uint8_t hash_sha256_50[SHA256_DIGEST_SIZE] = {
	0xfa, 0xb7, 0x38, 0x80, 0x4c, 0x75, 0x23, 0x5c, 0x31, 0xba, 0xcc, 0xb4, 0x74, 0x65, 0xaf, 0x7f,
	0x1e, 0x67, 0x1d, 0x05, 0xb4, 0x02, 0x69, 0x44, 0x65, 0xd5, 0x50, 0x1e, 0x5c, 0xc5, 0x29, 0x8f,
};
__aligned(64) uint8_t hash_sha256_124[SHA256_DIGEST_SIZE] = {
	0xea, 0xed, 0x5d, 0xe5, 0x67, 0x79, 0x97, 0xc8, 0xb2, 0xcd, 0xde, 0x65, 0x7e, 0xe0, 0xd3, 0xef,
	0x33, 0xf9, 0x82, 0xb3, 0x0f, 0xdb, 0x02, 0xc9, 0x06, 0x7c, 0x41, 0xff, 0xcc, 0x4d, 0xf6, 0x2d,
};
__aligned(64) uint8_t hash_sha256_255[SHA256_DIGEST_SIZE] = {
	0xb6, 0xc8, 0x81, 0xb4, 0xed, 0x29, 0xcf, 0x9a, 0xcd, 0x4b, 0xfd, 0x4b, 0xc0, 0xe9, 0x15, 0x7e,
	0x72, 0xd7, 0x1c, 0xad, 0xa6, 0x8f, 0x08, 0x79, 0x65, 0x39, 0x68, 0x30, 0x1b, 0xa3, 0x7c, 0x1e,
};
__aligned(64) uint8_t hash_sha256_512[SHA256_DIGEST_SIZE] = {
	0x18, 0x80, 0xe8, 0xfb, 0x4f, 0x9d, 0x4c, 0x39, 0x47, 0x6c, 0x42, 0x73, 0x78, 0x04, 0xb0, 0xab,
	0x03, 0x60, 0xb9, 0xbf, 0x5a, 0x7a, 0xc9, 0x8a, 0x00, 0xec, 0xdf, 0x38, 0xdf, 0xf4, 0x90, 0x47,
};
__aligned(64) uint8_t hash_sha384_50[SHA384_DIGEST_SIZE] = {
	0xb4, 0xeb, 0x3d, 0xa8, 0x0d, 0xf9, 0x0b, 0x6b, 0xc6, 0x8e, 0x9a, 0x43, 0x36, 0x40, 0xa3, 0x34,
	0xa9, 0x9b, 0xd2, 0x72, 0x2f, 0xb9, 0xa5, 0x26, 0x47, 0x95, 0x40, 0x6d, 0xc6, 0x6f, 0x14, 0x67,
	0xac, 0xa7, 0x6e, 0xfe, 0xe3, 0xd0, 0x15, 0x01, 0x5f, 0x25, 0xbe, 0x2b, 0xb9, 0x24, 0xdd, 0x5d,
};
__aligned(64) uint8_t hash_sha384_124[SHA384_DIGEST_SIZE] = {
	0xee, 0xc5, 0x49, 0xae, 0xa3, 0x04, 0x3d, 0x1a, 0xd8, 0xb0, 0xd3, 0x87, 0x53, 0xd1, 0x78, 0xa5,
	0x51, 0xd0, 0xa7, 0xe9, 0x00, 0x98, 0x32, 0xef, 0xa7, 0xdd, 0x70, 0x28, 0xb1, 0x75, 0x77, 0x64,
	0xff, 0x57, 0x2e, 0xde, 0x1c, 0x6c, 0x55, 0xa4, 0x71, 0xc8, 0xe5, 0x36, 0x99, 0xab, 0xc9, 0x02,
};
__aligned(64) uint8_t hash_sha384_255[SHA384_DIGEST_SIZE] = {
	0x25, 0xf9, 0xa7, 0x9d, 0xb4, 0x6a, 0xd2, 0xcc, 0xf9, 0xb4, 0x8f, 0x81, 0xb6, 0xed, 0x68, 0x16,
	0x90, 0xf0, 0x17, 0xd6, 0x9b, 0x66, 0x2f, 0xfd, 0x06, 0xcd, 0x41, 0x03, 0xaf, 0xd5, 0xc3, 0x68,
	0xfc, 0xb4, 0xd8, 0x4b, 0x93, 0x16, 0xb8, 0x86, 0x8d, 0x2f, 0x1a, 0xfc, 0x6c, 0x09, 0xcb, 0x29,
};
__aligned(64) uint8_t hash_sha384_512[SHA384_DIGEST_SIZE] = {
	0x42, 0xc4, 0x31, 0xfd, 0x6c, 0x6b, 0xf0, 0xd2, 0x59, 0x9e, 0x37, 0xc0, 0xd2, 0x98, 0x57, 0x5a,
	0xd2, 0xb8, 0x95, 0x22, 0x79, 0x65, 0x65, 0x35, 0x6c, 0x77, 0xae, 0xca, 0x65, 0x8e, 0xb3, 0xe8,
	0xa8, 0x3c, 0x5a, 0x45, 0x01, 0x30, 0x78, 0x1c, 0xb9, 0x3c, 0x87, 0x78, 0x35, 0x68, 0x22, 0xde,
};
__aligned(64) uint8_t hash_sha512_50[SHA512_DIGEST_SIZE] = {
	0xdb, 0x53, 0xb6, 0xc3, 0x90, 0xc9, 0x3a, 0x6b, 0x3b, 0x1a, 0x70, 0x2e, 0x56, 0xcd, 0x65, 0x72,
	0xc1, 0xe6, 0x5c, 0x97, 0x7d, 0x0e, 0x54, 0xcb, 0x0f, 0x9d, 0xc0, 0x60, 0x91, 0x70, 0x16, 0x03,
	0x46, 0x79, 0xd3, 0x0a, 0xcb, 0x03, 0x74, 0x97, 0x76, 0x2c, 0x51, 0xd7, 0xf0, 0xa1, 0x18, 0x5e,
	0x64, 0x65, 0x1d, 0xcf, 0x06, 0x5d, 0x5e, 0xd8, 0x52, 0x27, 0x4a, 0x66, 0x48, 0x93, 0x41, 0xee,
};
__aligned(64) uint8_t hash_sha512_124[SHA512_DIGEST_SIZE] = {
	0x7a, 0xef, 0x41, 0x9e, 0xea, 0x95, 0xe7, 0xff, 0x5d, 0x3f, 0x52, 0x5d, 0x50, 0xcd, 0xc8, 0x45,
	0xf7, 0x42, 0xb2, 0xfd, 0x8c, 0x2c, 0xb9, 0xe8, 0x9c, 0x9c, 0x0f, 0x28, 0xb8, 0x51, 0x59, 0x8c,
	0xfe, 0xd5, 0x70, 0x26, 0x3d, 0x9c, 0x9e, 0x07, 0xe6, 0x8a, 0x82, 0xee, 0x67, 0xea, 0xd7, 0x77,
	0x5f, 0x02, 0x52, 0x26, 0x10, 0x1b, 0x7c, 0xfa, 0x0b, 0x43, 0x7c, 0xd0, 0x16, 0x48, 0x70, 0x54,
};
__aligned(64) uint8_t hash_sha512_255[SHA512_DIGEST_SIZE] = {
	0xc0, 0xb9, 0xa3, 0xdb, 0xd3, 0x86, 0x72, 0xcb, 0xda, 0xac, 0x34, 0x6a, 0xaf, 0x27, 0xb4, 0xb6,
	0xac, 0x73, 0xd1, 0xc2, 0x9f, 0xd3, 0xa2, 0x86, 0x64, 0xa3, 0x67, 0xac, 0xbc, 0x2c, 0xdf, 0x8c,
	0x31, 0xfe, 0x2c, 0x37, 0x5e, 0x4e, 0x97, 0xb9, 0xd2, 0x2f, 0xfd, 0xae, 0xdc, 0xb6, 0x52, 0x4d,
	0x46, 0x99, 0x62, 0x3b, 0x8e, 0x90, 0x1a, 0xf1, 0x89, 0x4b, 0x9e, 0xc1, 0xef, 0x8b, 0xf2, 0xe4,
};
__aligned(64) uint8_t hash_sha512_512[SHA512_DIGEST_SIZE] = {
	0x42, 0x8e, 0xd3, 0x51, 0xcf, 0x57, 0x46, 0xb8, 0x9a, 0x7b, 0xfc, 0x10, 0xa2, 0xbe, 0x0e, 0xa1,
	0xec, 0xa5, 0xa5, 0x3d, 0x3b, 0x59, 0x26, 0x65, 0x28, 0x69, 0x6a, 0xfb, 0x95, 0xa5, 0x8a, 0xd8,
	0xba, 0xd1, 0x64, 0x71, 0x4e, 0x98, 0x3c, 0x46, 0x79, 0x04, 0x9a, 0x92, 0x8a, 0x5c, 0x01, 0xdf,
	0x96, 0xfc, 0xd0, 0xbc, 0x1c, 0x8e, 0xcf, 0x7a, 0xc6, 0x4c, 0xfb, 0xa9, 0x6e, 0xcb, 0x10, 0xf5,
};
__aligned(64) uint8_t *hash_src[4] = {hash_src_50, hash_src_124, hash_src_255, hash_src_512,};
__aligned(64) uint32_t hash_src_len[4] = {50, 124, 255, 512};
__aligned(64) uint8_t *hash_md5[4] = {hash_md5_50, hash_md5_124, hash_md5_255, hash_md5_512,};
__aligned(64) uint8_t *hash_sha1[4] = {hash_sha1_50, hash_sha1_124, hash_sha1_255, hash_sha1_512,};
__aligned(64) uint8_t *hash_sha224[4] = {hash_sha224_50, hash_sha224_124, hash_sha224_255, hash_sha224_512,};
__aligned(64) uint8_t *hash_sha256[4] = {hash_sha256_50, hash_sha256_124, hash_sha256_255, hash_sha256_512,};
__aligned(64) uint8_t *hash_sha384[4] = {hash_sha384_50, hash_sha384_124, hash_sha384_255, hash_sha384_512,};
__aligned(64) uint8_t *hash_sha512[4] = {hash_sha512_50, hash_sha512_124, hash_sha512_255, hash_sha512_512,};
/* hash test array end */


/* rsa test array begin */
__aligned(64) uint8_t rsa512_keyn[64] = {
	0xed, 0x81, 0x1f, 0x78, 0xe0, 0x8e, 0x42, 0xd3, 0x42, 0x9b, 0xd4, 0xa3, 0x8f, 0x36, 0x8c, 0x9a,
	0x98, 0xeb, 0x43, 0xe1, 0xde, 0xb3, 0x27, 0x64, 0xa1, 0x17, 0x5f, 0x48, 0x4e, 0xdb, 0xa2, 0xa0,
	0x54, 0x7d, 0xe4, 0x56, 0xa8, 0xc8, 0x80, 0x85, 0x53, 0xed, 0xec, 0x18, 0xf2, 0xc9, 0xbf, 0xe3,
	0xbd, 0xa1, 0x69, 0xef, 0x65, 0xd9, 0xda, 0xaa, 0xe8, 0x7c, 0x17, 0x6d, 0x30, 0x85, 0xcf, 0xe9,
};
__aligned(64) uint8_t rsa512_keye[64] = {
	0x01, 0x00, 0x01
};
__aligned(64) uint8_t rsa512_keyd[64] = {
	0x21, 0x57, 0x2f, 0x03, 0xd9, 0x02, 0x1f, 0x7f, 0x68, 0xaa, 0x57, 0x7f, 0x5e, 0x6b, 0x59, 0xf1,
	0x99, 0xe5, 0xec, 0xf1, 0x98, 0x41, 0xae, 0x16, 0x02, 0x47, 0x35, 0xa9, 0x00, 0xe8, 0xf4, 0x3b,
	0x28, 0x5e, 0xeb, 0xf1, 0x4a, 0x67, 0x4c, 0xeb, 0x61, 0x10, 0x54, 0x90, 0xe8, 0xd1, 0x12, 0x0b,
	0xc2, 0xda, 0xba, 0xb0, 0xdd, 0xd1, 0xc4, 0x94, 0x26, 0x47, 0xe4, 0x24, 0x4b, 0x6a, 0x7b, 0x01,
};
__aligned(64) uint8_t rsa512_src[64] = {
	0x00, 0xb6, 0xcf, 0xff, 0x40, 0x78, 0x65, 0xb4, 0xb8, 0xff, 0xb3, 0xe1, 0x01, 0x00, 0xe7, 0xa5,
	0x84, 0xd1, 0xe6, 0xa9, 0x09, 0x7d, 0x56, 0xd4, 0xe6, 0x41, 0x68, 0xce, 0x22, 0x56, 0xd4, 0x85,
	0xe6, 0xfa, 0xe4, 0xd8, 0x38, 0x21, 0x0e, 0xe5, 0x85, 0x61, 0x7e, 0xb8, 0x55, 0x3d, 0x1e, 0x57,
	0x06, 0xe1, 0xbf, 0x8b, 0x6e, 0xaf, 0xd6, 0x53, 0xa5, 0x7f, 0xee, 0xa5, 0x70, 0x1f, 0x44, 0xc6,
};
__aligned(64) uint8_t rsa512_enc[64] = {
	0xb0, 0xbd, 0x89, 0x3c, 0xcb, 0xcb, 0x69, 0xdd, 0x82, 0x3a, 0xa2, 0xf7, 0x8c, 0x64, 0xa8, 0x7d,
	0x2c, 0x85, 0x11, 0x8d, 0x5e, 0xe4, 0xa7, 0x18, 0x84, 0x30, 0x69, 0x81, 0x73, 0xd2, 0xe4, 0xe0,
	0x18, 0xa6, 0x6e, 0x51, 0xbc, 0x9a, 0x5b, 0x2e, 0xc2, 0x9a, 0xca, 0x1a, 0x39, 0x4e, 0xfe, 0x3c,
	0x3b, 0x2a, 0xf7, 0x26, 0xd8, 0x93, 0x48, 0xee, 0x0a, 0x79, 0xbb, 0xc2, 0x91, 0x51, 0x53, 0x2c,
};
__aligned(64) uint8_t rsa512_sha256[32] = {
	0xa6, 0x9f, 0xe2, 0xda, 0x86, 0xe8, 0x22, 0x13, 0xf1, 0x4e, 0x8a, 0x10, 0xde, 0xa9, 0x35, 0x33,
	0x5b, 0x5e, 0xfa, 0x18, 0xfa, 0x1a, 0x02, 0xb0, 0x3c, 0xd4, 0xea, 0xfd, 0xd4, 0xb9, 0x2e, 0x1c,
};
__aligned(64) uint8_t rsa512_sha256_raw[64] = {
	0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
	0xa6, 0x9f, 0xe2, 0xda, 0x86, 0xe8, 0x22, 0x13, 0xf1, 0x4e, 0x8a, 0x10, 0xde, 0xa9, 0x35, 0x33,
	0x5b, 0x5e, 0xfa, 0x18, 0xfa, 0x1a, 0x02, 0xb0, 0x3c, 0xd4, 0xea, 0xfd, 0xd4, 0xb9, 0x2e, 0x1c,
};
__aligned(64) uint8_t rsa512_sha256_sign[64] = {
	0x1c, 0x0d, 0x6e, 0x19, 0xb4, 0x1c, 0xf9, 0xc9, 0x76, 0xb1, 0xc1, 0x3c, 0xcd, 0x61, 0x90, 0xe6,
	0xc6, 0x64, 0x4a, 0xa1, 0x94, 0xdf, 0xcc, 0x76, 0x47, 0x0e, 0x3d, 0x0c, 0x03, 0x23, 0x41, 0x6d,
	0x92, 0xa6, 0x71, 0x6e, 0xb8, 0x12, 0x7c, 0x03, 0x07, 0x9e, 0x58, 0x98, 0xf3, 0xb2, 0x23, 0xcb,
	0x14, 0xe4, 0x2d, 0x49, 0xde, 0x18, 0x84, 0x83, 0x03, 0x87, 0xc7, 0x09, 0xaa, 0xb8, 0x11, 0x15,
};
__aligned(64) uint8_t rsa512_sign_raw[64] = {
	0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x30, 0x31, 0x30,
	0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x20,
	0xa6, 0x9f, 0xe2, 0xda, 0x86, 0xe8, 0x22, 0x13, 0xf1, 0x4e, 0x8a, 0x10, 0xde, 0xa9, 0x35, 0x33,
	0x5b, 0x5e, 0xfa, 0x18, 0xfa, 0x1a, 0x02, 0xb0, 0x3c, 0xd4, 0xea, 0xfd, 0xd4, 0xb9, 0x2e, 0x1c,
};
__aligned(64) uint8_t rsa512_sign[64] = {
	0x53, 0x2f, 0xdf, 0x58, 0xc1, 0xac, 0x66, 0xc2, 0x12, 0xa7, 0xae, 0x39, 0x63, 0x95, 0x21, 0xd7,
	0x4e, 0x02, 0xa6, 0x0f, 0x0e, 0x5f, 0x06, 0xf1, 0xdf, 0x5e, 0x0e, 0x64, 0x90, 0x81, 0xe2, 0xe1,
	0xf3, 0x19, 0x72, 0x74, 0x1d, 0x01, 0xe9, 0xe6, 0xda, 0xf6, 0x23, 0x87, 0x56, 0x0d, 0xe4, 0x86,
	0xdc, 0x4c, 0xc2, 0xd3, 0x8d, 0x4c, 0x0c, 0x5f, 0x58, 0x80, 0x00, 0xe4, 0xc9, 0xf2, 0xa3, 0xd0,
};
__aligned(64) uint8_t rsa1024_keyn[128] = {
	0xc8, 0x4f, 0xb2, 0x52, 0x82, 0x21, 0x0a, 0x6c, 0x7e, 0x86, 0x09, 0x2a, 0x4f, 0x57, 0xdd, 0x17,
	0x6b, 0x2a, 0x49, 0x8d, 0x30, 0xda, 0xd2, 0xb6, 0x29, 0x7a, 0xde, 0x64, 0x2d, 0x1c, 0x59, 0x7c,
	0x10, 0x45, 0x3d, 0x71, 0x59, 0x47, 0x7e, 0xb6, 0xaa, 0x04, 0xd4, 0x5c, 0x00, 0x03, 0x1c, 0xce,
	0x6a, 0xda, 0xa0, 0x61, 0xeb, 0xb0, 0x96, 0x99, 0xc6, 0xc1, 0x0d, 0xfc, 0x43, 0xd8, 0x6d, 0xe4,
	0x1a, 0x91, 0x32, 0x81, 0xbb, 0xe7, 0xd5, 0xe0, 0xeb, 0x35, 0x0c, 0xad, 0x80, 0x26, 0xbf, 0x76,
	0x0b, 0x62, 0x55, 0xc3, 0xe5, 0xeb, 0xc9, 0x0f, 0xf8, 0x35, 0xa2, 0x22, 0x4b, 0xee, 0x3f, 0x5b,
	0x10, 0x32, 0x00, 0xa2, 0x88, 0xf7, 0xac, 0x58, 0xf7, 0xde, 0xee, 0xbe, 0x26, 0x59, 0x87, 0xe4,
	0x99, 0x97, 0xc2, 0x7b, 0xa4, 0x4f, 0x00, 0x12, 0xb8, 0x43, 0xa7, 0xbf, 0x67, 0x1e, 0x1b, 0xeb,
};
__aligned(64) uint8_t rsa1024_keye[128] = {
	0x01, 0x00, 0x01
};
__aligned(64) uint8_t rsa1024_keyd[128] = {
	0x63, 0x18, 0xba, 0x59, 0x83, 0x33, 0x21, 0x5b, 0x07, 0x44, 0xfc, 0x27, 0xc8, 0x54, 0xe9, 0x75,
	0xfa, 0x78, 0x53, 0x26, 0xdc, 0x72, 0x85, 0x27, 0xc5, 0x61, 0x99, 0xbf, 0xe9, 0x69, 0x4b, 0x03,
	0xcb, 0x70, 0xd5, 0xb2, 0xcb, 0xbe, 0x48, 0xfb, 0xc9, 0x24, 0xd6, 0x82, 0x25, 0x27, 0x65, 0x0a,
	0xe1, 0x66, 0x03, 0x4e, 0x2e, 0x31, 0x90, 0x6f, 0xc7, 0x1a, 0x1e, 0xf7, 0x1c, 0x01, 0x68, 0x6b,
	0x3d, 0x48, 0xae, 0xdf, 0xe4, 0x87, 0xe0, 0xa2, 0x10, 0x4f, 0xac, 0x5c, 0x6e, 0x1c, 0xe6, 0xe7,
	0x63, 0x8b, 0x9e, 0x6e, 0xd2, 0x5c, 0x18, 0x44, 0xe3, 0x52, 0x54, 0x4c, 0x8b, 0xba, 0x06, 0x2f,
	0xb4, 0x27, 0x32, 0xba, 0x4b, 0xf4, 0x1d, 0xad, 0xf5, 0x04, 0x11, 0xcc, 0x77, 0xf4, 0x33, 0x6e,
	0x09, 0xaa, 0x26, 0xb0, 0x1e, 0x2c, 0x83, 0x43, 0x5c, 0xbf, 0xfd, 0x57, 0x8b, 0xd4, 0x49, 0x01,
};
__aligned(64) uint8_t rsa1024_src[128] = {
	0x00, 0x6d, 0xaf, 0x0e, 0x38, 0xfc, 0x5e, 0x0c, 0xd8, 0x41, 0x19, 0x04, 0x61, 0x99, 0x26, 0x70,
	0xf1, 0x8e, 0xc5, 0xda, 0x38, 0x81, 0x04, 0x04, 0x0f, 0xdc, 0x67, 0x05, 0xb1, 0x8f, 0xab, 0xcd,
	0x6c, 0x2d, 0xba, 0x5e, 0xd2, 0x46, 0xf7, 0x3d, 0x00, 0x85, 0xcb, 0x6e, 0x97, 0x7e, 0x7c, 0x62,
	0x0a, 0x1a, 0x04, 0x16, 0xb2, 0x93, 0x56, 0xa0, 0x83, 0x7c, 0xdb, 0x56, 0xff, 0x7b, 0xfe, 0x9f,
	0xa7, 0x97, 0xf8, 0xfc, 0x8d, 0x2e, 0xfb, 0x72, 0x7f, 0xc3, 0x57, 0xd3, 0x73, 0x31, 0xc7, 0xa0,
	0xcf, 0x49, 0xf4, 0x41, 0x14, 0x51, 0x5b, 0x05, 0x9d, 0xc5, 0x26, 0x49, 0x04, 0xff, 0xab, 0xe0,
	0xcf, 0x30, 0x93, 0x92, 0x0b, 0x06, 0xce, 0xd2, 0x9d, 0x46, 0x99, 0x5b, 0xe5, 0x30, 0x80, 0x0f,
	0xd4, 0x98, 0xc8, 0x61, 0xf5, 0x8b, 0xff, 0x7d, 0xed, 0xa5, 0x85, 0xf1, 0x9b, 0x01, 0xad, 0x82,
};
__aligned(64) uint8_t rsa1024_enc[128] = {
	0x1e, 0xab, 0xa2, 0x9d, 0xdb, 0x1c, 0x10, 0xce, 0x72, 0x07, 0xdd, 0x99, 0x75, 0x73, 0x3b, 0x6e,
	0x3d, 0xdb, 0x20, 0xe9, 0x12, 0xd6, 0x4c, 0xd5, 0x3c, 0x07, 0xe8, 0x22, 0x58, 0x5e, 0x93, 0xb3,
	0x47, 0xcf, 0x89, 0xa7, 0x93, 0xe5, 0xe0, 0xeb, 0x3e, 0x22, 0xbc, 0xf6, 0x15, 0x00, 0xb9, 0x5e,
	0x24, 0x1e, 0x21, 0xe8, 0x27, 0xb8, 0xee, 0xe8, 0xe8, 0x81, 0x1c, 0xf7, 0xd3, 0xdb, 0x48, 0x65,
	0x29, 0x4d, 0x1f, 0xe8, 0x08, 0x8a, 0x6c, 0x6f, 0x0a, 0x30, 0x4f, 0x0a, 0xdf, 0x27, 0x0f, 0x44,
	0xe3, 0x88, 0x52, 0xf9, 0x4a, 0xc0, 0xed, 0xad, 0x1d, 0x8d, 0x1a, 0x98, 0xd2, 0x66, 0x8e, 0xc8,
	0xc4, 0x81, 0x70, 0x97, 0x84, 0x2b, 0x23, 0x80, 0xb2, 0x8a, 0x46, 0xb8, 0xcb, 0xc8, 0xb2, 0xa4,
	0xda, 0x96, 0xa0, 0x6f, 0x8b, 0xff, 0x98, 0xc7, 0xd8, 0x67, 0x84, 0x0d, 0x6a, 0x0a, 0x10, 0x4b,
};
__aligned(64) uint8_t rsa1024_sha256[32] = {
	0x94, 0x15, 0x54, 0x0c, 0xd2, 0xe6, 0x80, 0xd7, 0x63, 0x51, 0xeb, 0x92, 0xdc, 0x9b, 0xc9, 0xe6,
	0x72, 0xac, 0xd9, 0xc5, 0xdd, 0x41, 0xa5, 0xb2, 0x7c, 0x54, 0xb1, 0xc0, 0x04, 0x05, 0xd7, 0x12,
};
__aligned(64) uint8_t rsa1024_sha256_raw[128] = {
	0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
	0x94, 0x15, 0x54, 0x0c, 0xd2, 0xe6, 0x80, 0xd7, 0x63, 0x51, 0xeb, 0x92, 0xdc, 0x9b, 0xc9, 0xe6,
	0x72, 0xac, 0xd9, 0xc5, 0xdd, 0x41, 0xa5, 0xb2, 0x7c, 0x54, 0xb1, 0xc0, 0x04, 0x05, 0xd7, 0x12,
};
__aligned(64) uint8_t rsa1024_sha256_sign[128] = {
	0x72, 0x17, 0xe0, 0xbe, 0xe5, 0xa8, 0xfe, 0xc8, 0x32, 0xd9, 0xb8, 0x1e, 0xff, 0xd6, 0x6a, 0x14,
	0xb5, 0x03, 0x25, 0xb8, 0x7f, 0x1b, 0x84, 0xc8, 0xaa, 0xb3, 0xce, 0xf8, 0x05, 0x03, 0xc9, 0xa8,
	0x36, 0x3c, 0x90, 0xdf, 0x00, 0x27, 0x9c, 0xcd, 0x25, 0xbb, 0xc8, 0xe7, 0x7f, 0xc3, 0x38, 0x8c,
	0x82, 0xff, 0x52, 0x55, 0x9d, 0xc8, 0xf0, 0xfb, 0xa9, 0x22, 0xd7, 0x17, 0xc6, 0xef, 0x3e, 0xe8,
	0x67, 0x8e, 0xac, 0xeb, 0xb9, 0x69, 0x24, 0xfd, 0x70, 0x8b, 0xac, 0x08, 0x38, 0x4a, 0x60, 0x1c,
	0x48, 0x6a, 0xfa, 0x94, 0x77, 0xa5, 0x13, 0x99, 0x2c, 0xb2, 0x70, 0xdb, 0x67, 0x8d, 0x42, 0xdc,
	0x1b, 0x14, 0x3d, 0x89, 0x86, 0xb5, 0x68, 0xce, 0xea, 0x44, 0x8c, 0x6f, 0xff, 0xbb, 0x8e, 0x1d,
	0x7e, 0x33, 0x0e, 0x5b, 0x53, 0x3b, 0x62, 0xbc, 0x7c, 0xf8, 0xe2, 0x16, 0x29, 0x25, 0x8e, 0xdc,
};
__aligned(64) uint8_t rsa1024_sign_raw[128] = {
	0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x30, 0x31, 0x30,
	0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x20,
	0x94, 0x15, 0x54, 0x0c, 0xd2, 0xe6, 0x80, 0xd7, 0x63, 0x51, 0xeb, 0x92, 0xdc, 0x9b, 0xc9, 0xe6,
	0x72, 0xac, 0xd9, 0xc5, 0xdd, 0x41, 0xa5, 0xb2, 0x7c, 0x54, 0xb1, 0xc0, 0x04, 0x05, 0xd7, 0x12,
};
__aligned(64) uint8_t rsa1024_sign[128] = {
	0x2f, 0x37, 0x28, 0x9b, 0x19, 0x4e, 0x27, 0xaa, 0xbc, 0xb9, 0x38, 0xa7, 0x96, 0x5b, 0x93, 0x3e,
	0xcd, 0x94, 0xc2, 0xd6, 0x11, 0x83, 0x5f, 0xca, 0x7c, 0x4b, 0xd6, 0x2e, 0xb5, 0x40, 0x65, 0x25,
	0x4e, 0xba, 0xf2, 0x73, 0xa2, 0xad, 0xf6, 0x9c, 0x54, 0xe9, 0x7f, 0xb3, 0xa6, 0xc1, 0xbb, 0x6f,
	0xa6, 0x9b, 0x7e, 0x72, 0x16, 0x64, 0x52, 0x46, 0x38, 0x29, 0x1e, 0x3e, 0x3a, 0x90, 0x17, 0x06,
	0x32, 0x2f, 0x33, 0xc9, 0x41, 0x7d, 0x4e, 0xcd, 0x5e, 0xcb, 0x05, 0x6a, 0xf7, 0xec, 0xcf, 0xb1,
	0xab, 0x9f, 0x52, 0x8c, 0xa8, 0x3b, 0x8d, 0xc8, 0x03, 0xcb, 0x79, 0x9d, 0xc0, 0x2d, 0x95, 0xc5,
	0x7b, 0x3f, 0xf5, 0x91, 0x66, 0x1f, 0x8d, 0x33, 0xd1, 0x7e, 0x72, 0xb2, 0x2f, 0x07, 0x8f, 0x84,
	0x71, 0xf4, 0x66, 0xc0, 0x92, 0x6c, 0xbf, 0x42, 0x9f, 0xbf, 0x2f, 0x1f, 0x87, 0x9a, 0x62, 0x59,
};
__aligned(64) uint8_t rsa2048_keyn[256] = {
	0xb5, 0x63, 0x4c, 0xb1, 0x08, 0xf6, 0xe6, 0xa0, 0xd2, 0x6f, 0x76, 0xe6, 0x25, 0x3a, 0x7f, 0x13,
	0xbf, 0x1f, 0x36, 0x0c, 0xcd, 0xce, 0xaf, 0x73, 0xe9, 0x62, 0xc0, 0x35, 0xce, 0xd3, 0x14, 0x1c,
	0x0d, 0xe6, 0xba, 0x2e, 0xef, 0xc1, 0xb4, 0x57, 0x16, 0xa5, 0x03, 0x4b, 0x63, 0xac, 0xd5, 0x26,
	0x72, 0xf9, 0x8c, 0x90, 0x42, 0x61, 0x00, 0xe3, 0x9e, 0x74, 0x56, 0xbf, 0x8f, 0x69, 0xcf, 0xb0,
	0x10, 0xc7, 0x09, 0x6d, 0x3f, 0x5b, 0x41, 0x72, 0x31, 0x48, 0xb2, 0x9a, 0x75, 0xf7, 0x5a, 0x87,
	0xb8, 0xfe, 0xf0, 0x0d, 0xa0, 0x35, 0xd1, 0x69, 0xf6, 0xeb, 0xf5, 0xfc, 0xd8, 0x8b, 0xf1, 0x01,
	0xe5, 0xda, 0xa6, 0xdc, 0x47, 0x1f, 0xc0, 0x83, 0x25, 0x0b, 0xf6, 0x7e, 0xe4, 0xe4, 0x6e, 0xc2,
	0x3a, 0x85, 0x4e, 0x98, 0x2b, 0xcf, 0xae, 0x8a, 0x89, 0x52, 0x83, 0x8c, 0x3d, 0xed, 0xcd, 0xda,
	0xe1, 0xf2, 0xfa, 0x20, 0x44, 0x50, 0x08, 0x72, 0xc6, 0x6b, 0x79, 0x18, 0xb8, 0x57, 0x84, 0xdb,
	0x79, 0x2b, 0x7d, 0x0c, 0x11, 0x13, 0xe9, 0x51, 0x00, 0x4c, 0xde, 0x32, 0x14, 0x66, 0x6c, 0x20,
	0x33, 0x8d, 0x5a, 0x53, 0x23, 0xee, 0xe1, 0x2e, 0x1d, 0x1c, 0x40, 0xa0, 0xd5, 0xa0, 0x5e, 0xfe,
	0xf1, 0x89, 0x63, 0xa6, 0x57, 0xe7, 0x7a, 0xaa, 0x91, 0x9d, 0x89, 0xa8, 0x53, 0x0b, 0xd6, 0x69,
	0x7a, 0xd6, 0x00, 0xf6, 0x72, 0x16, 0x51, 0x0a, 0xec, 0x00, 0x3c, 0x09, 0xf2, 0x03, 0x92, 0x49,
	0x57, 0xf8, 0x4d, 0xff, 0xee, 0xda, 0x12, 0x4b, 0x70, 0x0d, 0x9e, 0x55, 0xf0, 0xfb, 0x97, 0xc3,
	0x48, 0xe5, 0xab, 0xd2, 0xff, 0x71, 0xa2, 0xc7, 0x5d, 0xaf, 0x85, 0x6a, 0xd2, 0xc9, 0x71, 0x8f,
	0xf5, 0x18, 0x1c, 0x33, 0x7c, 0xbf, 0x2e, 0x75, 0xed, 0x66, 0x8e, 0x46, 0x8d, 0x83, 0x9c, 0x75,
};
__aligned(64) uint8_t rsa2048_keye[256] = {
	0x01, 0x00, 0x01
};
__aligned(64) uint8_t rsa2048_keyd[256] = {
	0x00, 0x2d, 0x58, 0xa5, 0xd3, 0x9c, 0x6a, 0x1d, 0x3e, 0x17, 0x5d, 0xc6, 0x5b, 0xc2, 0xf2, 0xdc,
	0xd2, 0x12, 0xf5, 0xba, 0x8d, 0x78, 0xe6, 0x32, 0xf6, 0xc7, 0x61, 0xe8, 0xab, 0x8b, 0x09, 0x39,
	0xfd, 0xc9, 0x7b, 0xe5, 0x0f, 0xd6, 0xe0, 0x96, 0x35, 0x2f, 0x74, 0x11, 0x5e, 0xc7, 0x8c, 0x6d,
	0xbd, 0x2f, 0x01, 0x34, 0x22, 0xdc, 0x75, 0x63, 0xc3, 0x83, 0xd9, 0x91, 0xd6, 0x52, 0x04, 0x21,
	0xe7, 0xe2, 0x49, 0xe0, 0x11, 0x6f, 0xc5, 0x60, 0x97, 0x2b, 0xbb, 0x00, 0xeb, 0x9c, 0x92, 0x3a,
	0x0f, 0xb4, 0x30, 0x07, 0xd3, 0x60, 0x3a, 0x14, 0x20, 0x69, 0x9a, 0x93, 0xe4, 0xa2, 0x3e, 0x5a,
	0x02, 0x1f, 0x74, 0x8a, 0x42, 0x87, 0x85, 0x68, 0x9b, 0x60, 0xa7, 0x9c, 0xf8, 0x1c, 0x40, 0xff,
	0x6f, 0x8f, 0x31, 0xc4, 0x74, 0x46, 0x7f, 0xa5, 0x22, 0xfd, 0x31, 0xa3, 0xb1, 0x6b, 0xca, 0x07,
	0xac, 0x44, 0xbb, 0xa4, 0xe8, 0x7e, 0x78, 0x84, 0x25, 0x3f, 0xd8, 0xe6, 0xa6, 0x5b, 0x6f, 0x39,
	0x45, 0xf8, 0x5b, 0x51, 0xec, 0x34, 0x19, 0x9f, 0x2a, 0x23, 0xb3, 0x31, 0xbf, 0x12, 0x53, 0x34,
	0x74, 0x00, 0xc1, 0x32, 0x43, 0x19, 0xa6, 0x6c, 0x7f, 0x17, 0x06, 0x07, 0x72, 0x5c, 0x9f, 0x12,
	0x5f, 0x60, 0x1d, 0xbe, 0xd8, 0xce, 0xfc, 0x9b, 0x96, 0xff, 0x78, 0x85, 0x04, 0x3b, 0xfa, 0x30,
	0x1b, 0x4a, 0xf8, 0x33, 0xab, 0xd9, 0x6d, 0x0d, 0xb7, 0x21, 0x3e, 0xba, 0xf6, 0x43, 0xbd, 0xf9,
	0x4a, 0x23, 0x08, 0x03, 0xb0, 0x71, 0x40, 0x40, 0xd0, 0xa6, 0x83, 0x0f, 0x8e, 0x86, 0x35, 0x22,
	0x52, 0x38, 0xb6, 0xe7, 0x70, 0x93, 0x14, 0x29, 0x19, 0x24, 0xd1, 0xec, 0xc5, 0x69, 0x58, 0x62,
	0x04, 0xec, 0xf1, 0xe3, 0x8b, 0xcb, 0xdd, 0x3d, 0x20, 0x15, 0x42, 0x76, 0xd5, 0x91, 0x50, 0x01,
};
__aligned(64) uint8_t rsa2048_src[256] = {
	0x00, 0x41, 0x81, 0x41, 0x6d, 0xd8, 0xac, 0x6f, 0x7a, 0xc8, 0x54, 0xaf, 0x85, 0x9b, 0x26, 0x69,
	0x31, 0x02, 0xd9, 0x1c, 0x76, 0x4a, 0xd5, 0xc5, 0x2b, 0xac, 0x98, 0xe2, 0x66, 0x5e, 0xd4, 0x98,
	0x5b, 0xf5, 0x96, 0xd5, 0xe2, 0x19, 0x88, 0x43, 0x46, 0xae, 0x41, 0x46, 0x32, 0x83, 0x7f, 0x8a,
	0x30, 0xcd, 0x00, 0x34, 0x28, 0xe5, 0x03, 0x76, 0x4e, 0x19, 0x1a, 0x10, 0xa9, 0xb3, 0x19, 0x92,
	0x63, 0x94, 0x84, 0x5e, 0xe1, 0xc8, 0xb9, 0x13, 0xd8, 0x36, 0xe5, 0xa8, 0xec, 0x8a, 0x56, 0xce,
	0x10, 0x01, 0xb2, 0x12, 0x66, 0xcb, 0x51, 0x98, 0x12, 0x02, 0x62, 0x47, 0x81, 0x41, 0x84, 0x8c,
	0xfb, 0xce, 0x45, 0x4a, 0x3b, 0xcc, 0x72, 0xe2, 0xad, 0x00, 0x73, 0x9e, 0xff, 0xc2, 0x24, 0x7a,
	0xfb, 0xa8, 0x6c, 0x38, 0x66, 0x5d, 0x2a, 0x02, 0xa2, 0xa8, 0x0b, 0x1c, 0x40, 0x3d, 0x06, 0x0f,
	0x6a, 0x2d, 0x7e, 0x8d, 0xa2, 0x60, 0x9b, 0xbe, 0xdb, 0x00, 0xc0, 0x55, 0x87, 0xfd, 0x2e, 0xf7,
	0xb1, 0xee, 0xd6, 0x9d, 0xe9, 0xb9, 0x8c, 0x38, 0x56, 0xa6, 0x48, 0x2c, 0xbd, 0x8a, 0x16, 0x63,
	0x5d, 0x63, 0x6c, 0x70, 0xdc, 0x90, 0x59, 0xac, 0xd9, 0x38, 0xa9, 0x7f, 0x1c, 0x31, 0x93, 0xcd,
	0x4e, 0x51, 0x96, 0xad, 0xed, 0x21, 0x0a, 0x36, 0x5f, 0x53, 0x12, 0xac, 0x06, 0x64, 0xb2, 0x43,
	0x25, 0x42, 0x34, 0x6f, 0xa9, 0xbe, 0xa7, 0x8d, 0x48, 0x27, 0x2d, 0x69, 0x8e, 0x34, 0x6b, 0xd4,
	0xb9, 0x8f, 0x50, 0x34, 0x79, 0x61, 0x10, 0xd7, 0xc5, 0xd2, 0x44, 0x88, 0xe0, 0x1c, 0xe6, 0xe3,
	0x9f, 0xdf, 0x07, 0x8a, 0xc3, 0xfd, 0x75, 0xd4, 0x58, 0xbd, 0xd9, 0x08, 0x38, 0xc9, 0xaa, 0x55,
	0x7c, 0x7d, 0xd6, 0x3d, 0x0e, 0xef, 0xf7, 0x43, 0x09, 0x80, 0xa5, 0xd4, 0xf9, 0x05, 0x69, 0x93,
};
__aligned(64) uint8_t rsa2048_enc[256] = {
	0x9b, 0x1d, 0x97, 0x2a, 0xf4, 0xaa, 0xd2, 0x85, 0x47, 0xea, 0x17, 0x32, 0x64, 0x48, 0x9c, 0x93,
	0xa8, 0xb2, 0x84, 0x39, 0x19, 0x92, 0x35, 0xdd, 0xf3, 0x1b, 0xae, 0xde, 0x77, 0x8a, 0x72, 0x78,
	0xbf, 0xac, 0x69, 0xf6, 0xb7, 0xde, 0xc0, 0x07, 0x08, 0xc1, 0x4d, 0xd4, 0x15, 0xb4, 0xfa, 0xb2,
	0x80, 0x22, 0xdf, 0xd9, 0x62, 0xd0, 0xe0, 0x58, 0xfb, 0xb2, 0xfc, 0x40, 0x2b, 0x67, 0x86, 0x68,
	0xd9, 0x47, 0x52, 0xe2, 0x33, 0xbc, 0x57, 0x20, 0x3c, 0x3f, 0x84, 0x2d, 0x71, 0x51, 0xe3, 0x61,
	0xf1, 0x3d, 0xc3, 0xe7, 0x46, 0x59, 0xf9, 0x99, 0x49, 0x12, 0xd6, 0xac, 0xec, 0xd2, 0xb8, 0x35,
	0xef, 0x2e, 0x92, 0xf6, 0xe2, 0x66, 0x6e, 0x56, 0xbc, 0x20, 0x1e, 0x29, 0xff, 0x00, 0x39, 0xea,
	0x9e, 0x25, 0xc0, 0xf1, 0xfb, 0xb4, 0x81, 0x14, 0xc3, 0xf6, 0xe7, 0x6a, 0xd2, 0x35, 0x12, 0xe9,
	0x65, 0x13, 0xdc, 0x5e, 0xe9, 0x53, 0xbd, 0xa0, 0x49, 0xbe, 0x86, 0xff, 0xa5, 0x6d, 0x96, 0xa9,
	0x00, 0x58, 0xe7, 0xe7, 0x02, 0x0d, 0xbb, 0xda, 0x47, 0x87, 0x8c, 0x3e, 0x90, 0x9c, 0xde, 0x73,
	0xf9, 0x30, 0x35, 0x2f, 0xaf, 0x41, 0xfa, 0x9d, 0xb4, 0x37, 0x6d, 0x8b, 0xa2, 0xb8, 0x58, 0xd5,
	0x52, 0x40, 0xb1, 0x1b, 0x82, 0xfb, 0xb6, 0x52, 0xe0, 0x53, 0xbf, 0x8b, 0x84, 0x5c, 0x3d, 0xfa,
	0x86, 0xde, 0xdf, 0xa6, 0x18, 0x3d, 0xcb, 0xf9, 0xfa, 0x99, 0xdd, 0xd8, 0x8e, 0x05, 0x7e, 0x19,
	0x0e, 0x46, 0x15, 0x4b, 0x54, 0x1a, 0x58, 0xb5, 0x55, 0x55, 0x5a, 0x62, 0xe2, 0x42, 0xad, 0x2d,
	0xad, 0xde, 0xd8, 0x3c, 0x3c, 0x52, 0x27, 0x95, 0x7c, 0x74, 0xad, 0x28, 0xc0, 0x79, 0x76, 0x6a,
	0x06, 0x33, 0x76, 0x0c, 0xb8, 0x39, 0x6f, 0xcc, 0x4b, 0x71, 0x47, 0xde, 0xd3, 0x50, 0x87, 0x92,
};
__aligned(64) uint8_t rsa2048_sha256[32] = {
	0xe4, 0x41, 0x95, 0x4d, 0x8c, 0xde, 0x88, 0x65, 0x68, 0x79, 0x8e, 0x45, 0x8e, 0xc3, 0x71, 0x17,
	0x13, 0x43, 0x0a, 0x50, 0xbc, 0xc9, 0x0f, 0xc2, 0x9f, 0xad, 0x53, 0xa4, 0xbc, 0x09, 0xa2, 0x3f,
};
__aligned(64) uint8_t rsa2048_sha256_raw[256] = {
	0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
	0xe4, 0x41, 0x95, 0x4d, 0x8c, 0xde, 0x88, 0x65, 0x68, 0x79, 0x8e, 0x45, 0x8e, 0xc3, 0x71, 0x17,
	0x13, 0x43, 0x0a, 0x50, 0xbc, 0xc9, 0x0f, 0xc2, 0x9f, 0xad, 0x53, 0xa4, 0xbc, 0x09, 0xa2, 0x3f,
};
__aligned(64) uint8_t rsa2048_sha256_sign[256] = {
	0x83, 0x65, 0x73, 0xc8, 0xa9, 0x25, 0xd1, 0x54, 0x4b, 0xc2, 0xa4, 0x1b, 0xda, 0x8b, 0x1b, 0x1b,
	0x3b, 0xdd, 0x04, 0xe9, 0x9a, 0x76, 0x7b, 0x89, 0x59, 0x6f, 0x66, 0xf2, 0x0f, 0x7a, 0x46, 0x78,
	0x5b, 0xec, 0xe3, 0xe7, 0x43, 0x61, 0x53, 0x28, 0x20, 0x30, 0xa1, 0x0b, 0xe8, 0xcc, 0xde, 0x06,
	0x8d, 0x1f, 0x3a, 0x23, 0x6a, 0x01, 0x94, 0xff, 0x3d, 0xd5, 0xcf, 0xa1, 0xde, 0x11, 0xb4, 0x4e,
	0x8a, 0xeb, 0x37, 0xee, 0xca, 0x89, 0x37, 0xac, 0xee, 0xf5, 0x23, 0xe3, 0x2a, 0x67, 0x28, 0xe3,
	0x4c, 0xa2, 0x4b, 0xee, 0x56, 0x92, 0x36, 0xde, 0x84, 0x33, 0x9e, 0x79, 0x89, 0xbb, 0x3c, 0xf5,
	0xea, 0x13, 0x48, 0xd3, 0x97, 0x33, 0x35, 0x01, 0xcc, 0x2b, 0x66, 0xd1, 0xe9, 0x5e, 0xfe, 0xd7,
	0xe0, 0xb9, 0x05, 0x03, 0x61, 0x87, 0xa8, 0xcf, 0xe6, 0x3f, 0x9e, 0xb0, 0xb0, 0x12, 0x70, 0x46,
	0xfd, 0xd8, 0x23, 0x17, 0xe6, 0x51, 0x8d, 0x57, 0x6e, 0xb6, 0x36, 0xf9, 0xc7, 0x3a, 0xea, 0x74,
	0x07, 0x8d, 0xfe, 0x92, 0xe1, 0x38, 0x47, 0x52, 0x40, 0xe6, 0xd6, 0x7c, 0x4d, 0xc7, 0xa4, 0x4d,
	0xa3, 0xee, 0xf0, 0x00, 0xfc, 0x0d, 0xc5, 0xff, 0x2a, 0xea, 0xae, 0xf9, 0x43, 0xe7, 0x15, 0x35,
	0x70, 0x65, 0x25, 0xc0, 0x4e, 0x21, 0x42, 0xac, 0x79, 0x5f, 0xc5, 0xb8, 0xe8, 0x05, 0x61, 0x3e,
	0x3b, 0xbe, 0xed, 0x60, 0x0f, 0x86, 0xb8, 0xe8, 0x32, 0x65, 0x9f, 0x53, 0x40, 0xb1, 0x0e, 0xae,
	0xa6, 0xf3, 0x07, 0x15, 0xae, 0x4f, 0x88, 0xde, 0xed, 0x71, 0xb2, 0x09, 0x5d, 0x8e, 0x09, 0x7d,
	0x7c, 0xc9, 0x79, 0xbf, 0xca, 0x90, 0xc8, 0x73, 0x6c, 0x5c, 0xdf, 0x69, 0x25, 0x9f, 0x55, 0xcb,
	0xf0, 0xf9, 0xc7, 0x85, 0xac, 0x87, 0x03, 0x3b, 0x73, 0xb3, 0x6a, 0xc8, 0x02, 0xea, 0x96, 0xe8,
};
__aligned(64) uint8_t rsa2048_sign_raw[256] = {
	0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x30, 0x31, 0x30,
	0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x20,
	0xe4, 0x41, 0x95, 0x4d, 0x8c, 0xde, 0x88, 0x65, 0x68, 0x79, 0x8e, 0x45, 0x8e, 0xc3, 0x71, 0x17,
	0x13, 0x43, 0x0a, 0x50, 0xbc, 0xc9, 0x0f, 0xc2, 0x9f, 0xad, 0x53, 0xa4, 0xbc, 0x09, 0xa2, 0x3f,
};
__aligned(64) uint8_t rsa2048_sign[256] = {
	0x63, 0xe9, 0x5e, 0x83, 0x12, 0x52, 0xf6, 0x8a, 0x86, 0xcf, 0xdb, 0x82, 0x9e, 0xf8, 0x8e, 0xc4,
	0xdb, 0x2c, 0x16, 0x81, 0x1b, 0x5b, 0x1a, 0x37, 0x3c, 0x4f, 0xcc, 0x1d, 0x7e, 0xad, 0xa8, 0x88,
	0x93, 0x39, 0x7c, 0x09, 0x8c, 0x37, 0xe4, 0x5d, 0x6f, 0x64, 0xde, 0xac, 0x01, 0x8b, 0x8d, 0xb2,
	0x32, 0xbe, 0xea, 0x16, 0x88, 0xdc, 0xd7, 0x3f, 0x51, 0xbc, 0x68, 0xb5, 0x29, 0x44, 0x7d, 0x64,
	0xd0, 0x97, 0x2a, 0xd0, 0xea, 0xbc, 0x4a, 0xc0, 0x6e, 0x97, 0xa7, 0x15, 0xe2, 0xe7, 0x10, 0x31,
	0x14, 0x42, 0x76, 0x13, 0x4b, 0xe5, 0x47, 0xd3, 0x23, 0xb7, 0x21, 0x65, 0x2d, 0x5e, 0x7b, 0xf8,
	0xc3, 0x3a, 0xd2, 0x38, 0xc6, 0xf2, 0xc1, 0x76, 0x75, 0xf7, 0xf5, 0xcb, 0x42, 0x6b, 0x31, 0x2a,
	0x85, 0xd0, 0x3e, 0xb0, 0xd6, 0x5a, 0x89, 0x82, 0xc0, 0x4e, 0x60, 0xa7, 0x90, 0x6e, 0x15, 0x91,
	0x9e, 0xce, 0xb3, 0xd1, 0xa7, 0x86, 0xc2, 0x86, 0xd8, 0xb6, 0xe0, 0x33, 0x41, 0x34, 0xa3, 0xca,
	0xe7, 0x2d, 0x98, 0x36, 0xd0, 0x67, 0xc6, 0xa9, 0x83, 0x36, 0xc9, 0xba, 0x34, 0xb4, 0xa1, 0xb9,
	0xed, 0x3e, 0xbb, 0xf1, 0x51, 0x4e, 0xc4, 0xbd, 0x50, 0xe2, 0xe4, 0xed, 0xc0, 0x10, 0x7f, 0xb4,
	0x61, 0xb8, 0x23, 0x14, 0x92, 0xa3, 0x0d, 0x7f, 0x92, 0x6b, 0x59, 0x8a, 0x03, 0xfe, 0x7d, 0x82,
	0xe6, 0xfc, 0x52, 0x7c, 0x7b, 0xda, 0xcf, 0x7d, 0xd2, 0x63, 0xde, 0x55, 0xc7, 0xa9, 0x22, 0x52,
	0x96, 0xf8, 0xeb, 0xd3, 0xcb, 0x1e, 0x7d, 0x0b, 0xd4, 0xd8, 0x61, 0xed, 0x1f, 0xc1, 0x3b, 0x54,
	0x2a, 0x7e, 0x55, 0x0b, 0x0e, 0xd2, 0x9a, 0x38, 0x34, 0x2b, 0xe4, 0x6a, 0x66, 0xe3, 0x44, 0x1a,
	0x53, 0x2a, 0x41, 0xdb, 0x32, 0x9d, 0x71, 0xa9, 0xce, 0x1f, 0x10, 0x22, 0xe7, 0x8b, 0x5f, 0x14,
};
__aligned(64) uint32_t rsa_bitwidth[3] = {512, 1024, 2048};
__aligned(64) uint8_t *rsa_keyn[3] = {rsa512_keyn, rsa1024_keyn, rsa2048_keyn,};
__aligned(64) uint8_t *rsa_keye[3] = {rsa512_keye, rsa1024_keye, rsa2048_keye,};
__aligned(64) uint8_t *rsa_keyd[3] = {rsa512_keyd, rsa1024_keyd, rsa2048_keyd,};
__aligned(64) uint8_t *rsa_src[3] = {rsa512_src, rsa1024_src, rsa2048_src,};
__aligned(64) uint8_t *rsa_enc[3] = {rsa512_enc, rsa1024_enc, rsa2048_enc,};
__aligned(64) uint8_t *rsa_sha256[3] = {rsa512_sha256, rsa1024_sha256, rsa2048_sha256,};
__aligned(64) uint8_t *rsa_sha256_raw[3] = {rsa512_sha256_raw, rsa1024_sha256_raw, rsa2048_sha256_raw,};
__aligned(64) uint8_t *rsa_sha256_sign[3] = {rsa512_sha256_sign, rsa1024_sha256_sign, rsa2048_sha256_sign,};
__aligned(64) uint8_t *rsa_sign_raw[3] = {rsa512_sign_raw, rsa1024_sign_raw, rsa2048_sign_raw,};
__aligned(64) uint8_t *rsa_signature[3] = {rsa512_sign, rsa1024_sign, rsa2048_sign,};
/* rsa test array end */



#if 0
################################### generate scripts ###################################
#!/bin/bash

if [ $# -ne 1 ]; then
	echo "USAGE: $0 <header_file>"
	exit
fi

HEADER_FILE=$1
rm -f $1

dump_to_header_file()
{
	ARRAY_NAME=$1
	ARRAY_SIZE=$2
	FILE_NAME=$3

	echo "__aligned(64) uint8_t ${ARRAY_NAME}[${ARRAY_SIZE}] = {" >> ${HEADER_FILE}
	hexdump -v -e '"\t" 16/1 "%02x " "\n"' ${FILE_NAME} -n ${ARRAY_SIZE} | awk '{ i = 1; printf("\t"); while (i <= NF) { printf("0x%s, ", $i); i++} printf("\n"); }' >> ${HEADER_FILE}
	echo "};" >> ${HEADER_FILE}
}

function generate_aes_test_array()
{
	AES=$1
	KEYLEN=$2
	SRCLEN=$3
	KEYLEN_BYTE=$((${KEYLEN} / 8))

	# generate random source data
	if [ ! -f aes_src_${SRCLEN}.bin ]; then
		dd if=/dev/urandom of=aes_src_${SRCLEN}.bin bs=1 count=${SRCLEN} > /dev/null 2>&1
		SRC_ALIGN_LEN=$(((${SRCLEN} + 15)/16*16))
		dump_to_header_file "aes_src_${SRCLEN}" "${SRC_ALIGN_LEN}" "aes_src_${SRCLEN}.bin"
	fi

	# generate random key data
	if [ ! -f aes_key_${KEYLEN}.bin ]; then
		dd if=/dev/urandom of=aes_key_${KEYLEN}.bin bs=1 count=$((${KEYLEN}/8)) > /dev/null 2>&1
		dump_to_header_file "aes_key_${KEYLEN}" "${KEYLEN_BYTE}" "aes_key_${KEYLEN}.bin"
	fi

	# generate random iv data
	if [ ! -f aes_iv.bin ]; then
		dd if=/dev/urandom of=aes_iv.bin bs=1 count=16 > /dev/null 2>&1
		dump_to_header_file "aes_iv" "16" "aes_iv.bin"
	fi

	AES_KEY=`hexdump -v -e '32/1 "%02x" "\n"' aes_key_${KEYLEN}.bin`
	AES_IV=`hexdump -v -e '32/1 "%02x" "\n"' aes_iv.bin`
	openssl enc -aes-${KEYLEN}-${AES} -K ${AES_KEY} -iv ${AES_IV} -in aes_src_${SRCLEN}.bin -out aes_src_${SRCLEN}.bin.${AES}_${KEYLEN}.enc
	if [ $? -ne 0 ]; then
		echo "aes-${KEYLEN}-${AES} ${LEN} encrypt failed"
		exit
	fi

	openssl enc -d -aes-${KEYLEN}-${AES} -K ${AES_KEY} -iv ${AES_IV} -in aes_src_${SRCLEN}.bin.${AES}_${KEYLEN}.enc -out aes_src_${SRCLEN}.bin.${AES}_${KEYLEN}.dec
	if [ $? -ne 0 ]; then
		echo "aes-${KEYLEN}-${AES} ${LEN} decrypt failed"
		exit
	fi

	diff aes_src_${SRCLEN}.bin aes_src_${SRCLEN}.bin.${AES}_${KEYLEN}.dec
	if [ $? -ne 0 ]; then
		echo "aes-${KEYLEN}-${AES} ${LEN} encrypt/decrypt failed"
		exit
	fi

	ENC_ALIGN_LEN=$(((${SRCLEN} + 16 - 1) / 16 * 16))
	dump_to_header_file "aes_${KEYLEN}_${AES}_${SRCLEN}" "${ENC_ALIGN_LEN}" "aes_src_${SRCLEN}.bin.${AES}_${KEYLEN}.enc"
}

function generate_hash_test_array()
{
	HASH=$1
	LEN=$2
	STR=`echo $HASH | tr 'a-z' 'A-Z'`

	# generate random source data、key and iv
	if [ ! -f hash_src_${LEN}.bin ]; then
		dd if=/dev/urandom of=hash_src_${LEN}.bin bs=1 count=${LEN} > /dev/null 2>&1
		SRC_ALIGN_LEN=$(((${LEN} + 15)/16*16))
		dump_to_header_file "hash_src_${LEN}" "${SRC_ALIGN_LEN}" "hash_src_${LEN}.bin"
	fi

	openssl ${HASH} -binary -out hash_src_${LEN}.bin.${HASH} hash_src_${LEN}.bin

	echo "__aligned(64) uint8_t hash_${HASH}_${LEN}[${STR}_DIGEST_SIZE] = {" >> ${HEADER_FILE}
	hexdump -v -e '"\t" 16/1 "%02x " "\n"' hash_src_${LEN}.bin.${HASH} | awk '{ i = 1; printf("\t"); while (i <= NF) { printf("0x%s, ", $i); i++} printf("\n"); }' >> ${HEADER_FILE}
	echo "};" >> ${HEADER_FILE}
}

function generate_rsa_test_array()
{
	LEN=$1
	COUNT=`expr $LEN / 8`
	COUNT_1=`expr $COUNT - 1`

	# generate random source data，set the first byte to 0x00 to reduce the probability of "data too large for modulus" errors
	dd if=/dev/zero of=rsa_src_${LEN}.bin bs=1 count=1 > /dev/null 2>&1
	dd if=/dev/urandom of=rsa_src_${LEN}.bin seek=1 bs=1 count=${COUNT_1} > /dev/null 2>&1

	# generate rsa keys
	openssl genrsa -out rsa_${LEN}_pri.pem ${LEN} > /dev/null 2>&1
	openssl rsa -in rsa_${LEN}_pri.pem -pubout -out rsa_${LEN}_pub.pem > /dev/null 2>&1

	# get n(modulus), d(privateExponent)
	openssl rsa -in rsa_${LEN}_pri.pem -modulus -noout | awk -F = '{print $2}' | xxd -ps -r > rsa_${LEN}_keyn.bin
	openssl rsa -in rsa_${LEN}_pri.pem -inform pem -text -noout | awk '/^[^ ]/{if($1 == "privateExponent:") {dump=1} else {dump=0}} /^ /{if(dump==1){gsub(":","");printf "%s", $1}}END{print ""}' | xxd -ps -r > rsa_${LEN}_keyd.bin
	firstbyte=`head -c 1 rsa_${LEN}_keyd.bin | xxd -p`
	keyd_len=`stat --printf="%s" rsa_${LEN}_keyd.bin`
	if (( ${keyd_len} == ${COUNT} + 1 )); then
		if [ "x${firstbyte}" == "x00" ]; then
			dd if=rsa_${LEN}_keyd.bin of=rsa_${LEN}_keyd_real.bin bs=1 count=${COUNT} skip=1 > /dev/null 2>&1
			mv rsa_${LEN}_keyd_real.bin rsa_${LEN}_keyd.bin
		fi
	elif (( ${keyd_len} < ${COUNT} )); then
		dd if=/dev/zero of=rsa_${LEN}_keyd_real.bin bs=1 count=$((${COUNT}-${keyd_len})) > /dev/null 2>&1
		dd if=rsa_${LEN}_keyd.bin of=rsa_${LEN}_keyd_real.bin bs=1 count=${COUNT} seek=1 > /dev/null 2>&1
		mv rsa_${LEN}_keyd_real.bin rsa_${LEN}_keyd.bin
	fi

	# rsa encrypt and decrypt, note: src data size should be $COUNT
	openssl rsautl -encrypt -raw -pubin -inkey rsa_${LEN}_pub.pem  -in rsa_src_${LEN}.bin -out rsa_src_${LEN}.bin.enc
	if [ $? -ne 0 ]; then
		echo "rsa ${LEN} encrypt failed, maybe rsa_src_${LEN}.bin is bigger than modulus, please try again."
		exit
	fi
	openssl rsautl -decrypt -raw -inkey rsa_${LEN}_pri.pem -in rsa_src_${LEN}.bin.enc -out rsa_src_${LEN}.bin.dec
	diff rsa_src_${LEN}.bin rsa_src_${LEN}.bin.dec
	if [ $? -ne 0 ]; then
		echo "rsa ${LEN} encrypt/decrypt failed"
		exit
	fi

	# rsa sign/verify sha256 hash value
	openssl dgst -sha256 -binary -out rsa_src_${LEN}.bin.sha256 rsa_src_${LEN}.bin
	openssl rsautl -sign -in rsa_src_${LEN}.bin.sha256 -inkey rsa_${LEN}_pri.pem -out rsa_src_${LEN}.bin.sha256.sign
	openssl rsautl -verify -in rsa_src_${LEN}.bin.sha256.sign -pubin -inkey rsa_${LEN}_pub.pem -out rsa_src_${LEN}.bin.sha256v
	diff rsa_src_${LEN}.bin.sha256 rsa_src_${LEN}.bin.sha256v
	if [ $? -ne 0 ]; then
		echo "rsa ${LEN} sign/veirfy sha256 hash value failed"
		exit
	fi
	# get raw src data which sign (PKCS#1 v1.5 padding)
	openssl rsautl -verify -in rsa_src_${LEN}.bin.sha256.sign -pubin -inkey rsa_${LEN}_pub.pem -raw -out rsa_src_${LEN}.bin.sha256_raw

	# rsa dgst sign/verify src file
	openssl dgst -sign rsa_${LEN}_pri.pem -sha256 -out rsa_src_${LEN}.bin.sign rsa_src_${LEN}.bin
	openssl dgst -verify rsa_${LEN}_pub.pem -sha256 -signature rsa_src_${LEN}.bin.sign rsa_src_${LEN}.bin > /dev/null
	if [ $? -ne 0 ]; then
		echo "rsa ${LEN} sign/veirfy src file failed"
		exit
	fi
	# get raw src data which sign (ASN1 structure + PKCS#1 v1.5 padding)
	openssl rsautl -verify -in rsa_src_${LEN}.bin.sign -pubin -inkey rsa_${LEN}_pub.pem -raw -out rsa_src_${LEN}.bin.sign_raw

	dump_to_header_file "rsa${LEN}_keyn" "${COUNT}" "rsa_${LEN}_keyn.bin"

	echo "__aligned(64) uint8_t rsa${LEN}_keye[$COUNT] = {" >> ${HEADER_FILE}
	echo -e "\t0x01, 0x00, 0x01" >> ${HEADER_FILE}
	echo "};" >> ${HEADER_FILE}

	dump_to_header_file "rsa${LEN}_keyd" "${COUNT}" "rsa_${LEN}_keyd.bin"

	dump_to_header_file "rsa${LEN}_src" "${COUNT}" "rsa_src_${LEN}.bin"

	dump_to_header_file "rsa${LEN}_enc" "${COUNT}" "rsa_src_${LEN}.bin.enc"
	dump_to_header_file "rsa${LEN}_sha256" "32" "rsa_src_${LEN}.bin.sha256"
	dump_to_header_file "rsa${LEN}_sha256_raw" "${COUNT}" "rsa_src_${LEN}.bin.sha256_raw"
	dump_to_header_file "rsa${LEN}_sha256_sign" "${COUNT}" "rsa_src_${LEN}.bin.sha256.sign"
	dump_to_header_file "rsa${LEN}_sign_raw" "${COUNT}" "rsa_src_${LEN}.bin.sign_raw"
	dump_to_header_file "rsa${LEN}_sign" "${COUNT}" "rsa_src_${LEN}.bin.sign"
}

rm -rf rsa_* hash_* aes_*

################################### generate aes test array ###################################
echo -e "\n\n/* aes test array begin */" >> ${HEADER_FILE}
aes_srclen="13 16 192 223 256"
#aes_method="ecb cbc ctr cts ofb cfb"
aes_method="ecb cbc ctr ofb cfb8"
aes_keylen="128 192 256"

for i in ${aes_method}; do
	for j in ${aes_keylen}; do
		for k in ${aes_srclen}; do
			generate_aes_test_array $i $j $k
		done
	done
done
AES_SRC_NUM=`echo ${aes_srclen} | wc -w`
echo "__aligned(64) uint8_t *aes_src[${AES_SRC_NUM}] = {"`grep "aes_src_" ${HEADER_FILE} | awk '{print $3}' | awk -F [ '{print $1","}' | xargs`"};" >> ${HEADER_FILE}
echo "__aligned(64) uint32_t aes_src_len[${AES_SRC_NUM}] = {"`echo "${aes_srclen}" | sed 's/ /, /g'`"};" >> ${HEADER_FILE}
echo "__aligned(64) uint8_t *aes_key[3] = {"`grep "aes_key_" ${HEADER_FILE} | awk '{print $3}' | awk -F [ '{print $1","}' | xargs`"};" >> ${HEADER_FILE}
echo "__aligned(64) uint32_t aes_key_len[3] = {16, 24, 32};" >> ${HEADER_FILE}

for i in ${aes_method}; do
	echo "__aligned(64) uint8_t *aes_${i}[3][${AES_SRC_NUM}] = {" >> ${HEADER_FILE}
	grep "${i}_" ${HEADER_FILE} | awk '{print $3}' | awk -F [ '{print $1","}' | xargs -n ${AES_SRC_NUM} | awk '{print "\t"$0}' >> ${HEADER_FILE}
	echo "};" >> ${HEADER_FILE}
done

echo "/* aes test array end */" >> ${HEADER_FILE}

################################### generate hash test array ###################################
echo -e "\n\n/* hash test array begin */" >> ${HEADER_FILE}
hash_srclen="50 124 255 512"
hash_method="md5 sha1 sha224 sha256 sha384 sha512"
for i in ${hash_method}; do
	for j in ${hash_srclen}; do
		generate_hash_test_array $i $j
	done
done
HASH_SRC_NUM=`echo ${hash_srclen} | wc -w`
echo "__aligned(64) uint8_t *hash_src[${HASH_SRC_NUM}] = {"`grep "hash_src" ${HEADER_FILE} | awk '{print $3}' | awk -F [ '{print $1","}' | xargs`"};" >> ${HEADER_FILE}
echo "__aligned(64) uint32_t hash_src_len[${HASH_SRC_NUM}] = {"`echo "${hash_srclen}" | sed 's/ /, /g'`"};" >> ${HEADER_FILE}

for i in ${hash_method}; do
	echo "__aligned(64) uint8_t *hash_${i}[${HASH_SRC_NUM}] = {"`grep "hash_${i}" ${HEADER_FILE} | awk '{print $3}' | awk -F [ '{print $1","}' | xargs`"};" >> ${HEADER_FILE}
done

echo "/* hash test array end */" >> ${HEADER_FILE}

################################### generate rsa test array ###################################
echo -e "\n\n/* rsa test array begin */" >> ${HEADER_FILE}
rsa_keylen="512 1024 2048"
for i in ${rsa_keylen}; do
	generate_rsa_test_array $i
done
RSA_KEY_NUM=`echo ${rsa_keylen} | wc -w`
echo "__aligned(64) uint32_t rsa_bitwidth[${RSA_KEY_NUM}] = {"`echo "${rsa_keylen}" | sed 's/ /, /g'`"};" >> ${HEADER_FILE}
echo "__aligned(64) uint8_t *rsa_keyn[${RSA_KEY_NUM}] = {"`grep "_keyn" ${HEADER_FILE} | grep rsa | awk '{print $3}' | awk -F [ '{print $1","}' | xargs`"};" >> ${HEADER_FILE}
echo "__aligned(64) uint8_t *rsa_keye[${RSA_KEY_NUM}] = {"`grep "_keye" ${HEADER_FILE} | grep rsa | awk '{print $3}' | awk -F [ '{print $1","}' | xargs`"};" >> ${HEADER_FILE}
echo "__aligned(64) uint8_t *rsa_keyd[${RSA_KEY_NUM}] = {"`grep "_keyd" ${HEADER_FILE} | grep rsa | awk '{print $3}' | awk -F [ '{print $1","}' | xargs`"};" >> ${HEADER_FILE}
echo "__aligned(64) uint8_t *rsa_src[${RSA_KEY_NUM}] = {"`grep "_src\[" ${HEADER_FILE} | grep rsa | awk '{print $3}' | awk -F [ '{print $1","}' | xargs`"};" >> ${HEADER_FILE}
echo "__aligned(64) uint8_t *rsa_enc[${RSA_KEY_NUM}] = {"`grep "_enc" ${HEADER_FILE} | grep rsa | awk '{print $3}' | awk -F [ '{print $1","}' | xargs`"};" >> ${HEADER_FILE}
echo "__aligned(64) uint8_t *rsa_sha256[${RSA_KEY_NUM}] = {"`grep "_sha256\[" ${HEADER_FILE} | grep rsa | awk '{print $3}' | awk -F [ '{print $1","}' | xargs`"};" >> ${HEADER_FILE}
echo "__aligned(64) uint8_t *rsa_sha256_raw[${RSA_KEY_NUM}] = {"`grep "_sha256_raw" ${HEADER_FILE} | grep rsa | awk '{print $3}' | awk -F [ '{print $1","}' | xargs`"};" >> ${HEADER_FILE}
echo "__aligned(64) uint8_t *rsa_sha256_sign[${RSA_KEY_NUM}] = {"`grep "_sha256_sign" ${HEADER_FILE} | grep rsa | awk '{print $3}' | awk -F [ '{print $1","}' | xargs`"};" >> ${HEADER_FILE}
echo "__aligned(64) uint8_t *rsa_sign_raw[${RSA_KEY_NUM}] = {"`grep "_sign_raw" ${HEADER_FILE} | grep rsa | awk '{print $3}' | awk -F [ '{print $1","}' | xargs`"};" >> ${HEADER_FILE}
echo "__aligned(64) uint8_t *rsa_signature[${RSA_KEY_NUM}] = {"`grep "_sign\[" ${HEADER_FILE} | grep -v sha256 | grep rsa | awk '{print $3}' | awk -F [ '{print $1","}' | xargs`"};" >> ${HEADER_FILE}
echo "/* rsa test array end */" >> ${HEADER_FILE}

echo -e "\n\n\n#if 0" >> ${HEADER_FILE}
echo "################################### generate scripts ###################################" >> ${HEADER_FILE}
cat $0 >> ${HEADER_FILE}
echo -e "#endif" >> ${HEADER_FILE}
#endif
